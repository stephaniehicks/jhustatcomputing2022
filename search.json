[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "For Qmd files (markdown document with Quarto cross-language executable code), go to the course GitHub repository and navigate the directories, or best of all to clone the repo and navigate within RStudio.\n\n\n\n\n\n\n\n\n\n\n\nWeek\nDates\nTopics\nProjects\n\n\n\n\n\nModule 1\n\nStatistical and computational tools for scientific and reproducible research\n\n\n\n\n\n\n\n\n\n\n\nWeek 1\nAug 30\n👋 Course introduction [html] [Qmd]\n🌴 Project 0 [html] [Qmd]\n\n\n\n\n\n👩‍💻 Introduction to R and RStudio [html] [Qmd]\n\n\n\n\n\n\n🐙 Introduction to git/GitHub [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nSept 1\n🔬 Reproducible Research [html] [Qmd]\n\n\n\n\n\n\n👓 Literate programming [html] [Qmd]\n\n\n\n\n\n\n🆒 Reference management [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nModule 2\n\nData analysis in R\n\n\n\n\n\n\n\n\n\n\n\nWeek 2\nSept 6\n👀 Reading and writing data [html] [Qmd]\n🌴 Project 1 [html] [Qmd]\n\n\n\n\n\n✂️ Managing data frames with Tidyverse [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nSept 8\n😻 Tidy data and the Tidyverse [html] [Qmd]\n🍂 Project 0 due\n\n\n\n\n\n🤝 Joining data in R: Basics [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nModule 3\n\nData visualizations R\n\n\n\n\n\n\n\n\n\n\n\nWeek 3\nSept 13\n📊 Plotting systems in R [html] [Qmd]\n\n\n\n\n\n\n📊 The ggplot2 plotting system: qplot() [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nSept 15\n📊 The ggplot2 plotting system: ggplot() [html] [Qmd]\n🌴 Project 2 [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nSept 16\n\n🍂 Project 1 due\n\n\n\n\n\n\n\n\n\n\nModule 4\n\nNuts and bolts of R\n\n\n\n\n\n\n\n\n\n\n\nWeek 4\nSept 20\n🔩 R Nuts and Bolts [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nSept 22\n🔩 Control structures in R [html] [Qmd]\n\n\n\n\n\n\n🔩 Functions in R [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nWeek 5\nSept 27\n🔩 Loop functions [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nSept 29\n🐛 Debugging code in R [html] [Qmd]\n\n\n\n\n\n\n🐛 Error handling code in R [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nSept 30\n\n🍂 Project 2 due\n\n\n\n\n\n\n\n\n\n\nModule 5\n\nSpecial data types in R\n\n\n\n\n\n\n\n\n\n\n\nWeek 6\nOct 4\n📆 Working with dates and times [html] [Qmd]\n🌴 Project 3 [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nOct 6\n✨ Regular expressions [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nWeek 7\nOct 11\n🐱 Working with factors [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\n\nOct 13\n📆 Working with text data and sentiment analysis [html] [Qmd]\n\n\n\n\n\n\n\n\n\n\n\nModule 6\n\nBest practices for working with data and other languages\n\n\n\n\n\n\n\n\n\n\n\nWeek 8\nOct 18\n☁️ Best practices for storing data\n\n\n\n\n\n\n☁️ Best practices for ethical data analysis\n\n\n\n\n\n\n☁️ Best practices for project-oriented workflows in R\n\n\n\n\n\n\n\n\n\n\n\n\nOct 20\n🐍 Leveraging Python within R\n\n\n\n\n\n\n\n\n\n\n\n\nOct 21\n\n🍂 Project 3 due"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Location: In person and Online for Fall 2022\nCourse time: Tuesdays and Thursdays from 1:30-2:50pm (Eastern Daylight Time zone)\nCourse location:\n140.776.01 is in person in W2008\n140.776.41 will have recorded lectures posted online after class.\nAssignments: Three projects\n\n\n\n\nTo add the course to your 1st term registration: You can sign up for either the in person (140.776.01) or online only (140.776.41) course.\nAll lectures will be recorded and posted on CoursePlus. You can watch all lecture material and complete the assignments asynchronously.\nPlease course instructor if interested in auditing.\n\n\n\n\n\nStephanie C. Hicks (https://www.stephaniehicks.com)\n\nOffice Location: E3545, Wolfe Street building\nEmail: shicks19@jhu.edu\n\n\nInstructor office hours are announced on CoursePlus. If there are conflicts and/or need to cancel office hours, announcements will be made on CoursePlus.\n\n\n\n\nPhyllis Wei (ywei43@jhu.edu)\nJoe Sartini (jsartin1@jhu.edu)\n\nTA office hours are announced on CoursePlus.\n\n\n\nIn order of preference, here is a preferred list of ways to get help:\n\nWe strongly encourage you to use CoursePlus to ask questions first, before joining office hours. The reason for this is so that other students in the class (who likely have similar questions) can also benefit from the questions and answers asked by your colleagues.\nYou are welcome to join office hours to get more group interactive feedback.\nIf you are not able to make the office hours, appointments can be made by email with either the instructor or the TAs."
  },
  {
    "objectID": "syllabus.html#important-links",
    "href": "syllabus.html#important-links",
    "title": "Syllabus",
    "section": "Important Links",
    "text": "Important Links\n\nCourse website: https://stephaniehicks.com/jhustatcomputing2022\nGitHub repository with all course material: https://github.com/stephaniehicks/jhustatcomputing2022"
  },
  {
    "objectID": "syllabus.html#learning-objectives",
    "href": "syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning Objectives:",
    "text": "Learning Objectives:\nUpon successfully completing this course, students will be able to:\n\nInstall and configure software necessary for a statistical programming environment\nDiscuss generic programming language concepts as they are implemented in a high-level statistical language\nWrite and debug code in base R and the tidyverse (and integrate code from Python modules)\nBuild basic data visualizations using R and the tidyverse\nDiscuss best practices for coding and reproducible research, basics of data ethics, basics of working with special data types, and basics of storing data"
  },
  {
    "objectID": "syllabus.html#lectures",
    "href": "syllabus.html#lectures",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nIn Fall 2022, we will have in person lectures that will be recorded enabling an entirely online section for the course too. Mandatory attendance is not required."
  },
  {
    "objectID": "syllabus.html#textbook-and-other-course-material",
    "href": "syllabus.html#textbook-and-other-course-material",
    "title": "Syllabus",
    "section": "Textbook and Other Course Material",
    "text": "Textbook and Other Course Material\nThere is no required textbook. We will make use of several freely available textbooks and other materials. All course materials will be provided. We will use the R software for data analysis, which is freely available for download."
  },
  {
    "objectID": "syllabus.html#software",
    "href": "syllabus.html#software",
    "title": "Syllabus",
    "section": "Software",
    "text": "Software\nWe will make heavy use of R in this course, so you should have R installed. You can obtain R from the Comprehensive R Archive Network. There are versions available for Mac, Windows, and Unix/Linux. This software is required for this course.\nIt is important that you have the latest version of R installed. For this course we will be using R version 4.2.1. You can determine what version of R you have by starting up R and typing into the console R.version.string and hitting the return/enter key. If you do not have the proper version of R installed, go to CRAN and download and install the latest version.\nWe will also make use of the RStudio interactive development environment (IDE). RStudio requires that R be installed, and so is an “add-on” to R. You can obtain the RStudio Desktop for free from the RStudio web site. In particular, we will make heavy use of it when developing R packages. It is also essential that you have the latest release of RStudio. You can determine the version of RStudio by looking at menu item Help > About RStudio. You should be using RStudio version 1.4.1106 or higher."
  },
  {
    "objectID": "syllabus.html#projects",
    "href": "syllabus.html#projects",
    "title": "Syllabus",
    "section": "Projects",
    "text": "Projects\nThere will be 4 assignments, due every 2–3 weeks. Projects will be submitted electronically via the Drop Box on the CoursePlus web site (unless otherwise specified).\nThe project assignments will be due on\n\nProject 0: September 8, 1:29pm (entirely optional and not graded but hopefully useful and fun)\nProject 1: September 16, 11:59pm\nProject 2: September 30, 11:59pm\nProject 3: October 21, 11:59pm\n\n\nProject collaboration\nPlease feel free to study together and talk to one another about project assignments. The mutual instruction that students give each other is among the most valuable that can be achieved.\nHowever, it is expected that project assignments will be implemented and written up independently unless otherwise specified. Specifically, please do not share analytic code or output. Please do not collaborate on write-up and interpretation. Please do not access or use solutions from any source before your project assignment is submitted for grading."
  },
  {
    "objectID": "syllabus.html#discussion-forum",
    "href": "syllabus.html#discussion-forum",
    "title": "Syllabus",
    "section": "Discussion Forum",
    "text": "Discussion Forum\nThe course will make use of the CoursePlus Discussion Forum in order to ask and answer questions regarding any of the course materials. The Instructor and the Teaching Assistants will monitor the discussion boards and answer questions when appropriate."
  },
  {
    "objectID": "syllabus.html#exams",
    "href": "syllabus.html#exams",
    "title": "Syllabus",
    "section": "Exams",
    "text": "Exams\nThere are no exams in this course."
  },
  {
    "objectID": "syllabus.html#grading",
    "href": "syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\nGrades in the course will be based on Projects 0–3 with a percentage of the final grade being apportioned to each assignment. Each of Projects 1–3 counts approximately equally in the final grade. Grades for the projects and the final grade will be issued via the CoursePlus grade book."
  },
  {
    "objectID": "syllabus.html#policy-for-submitted-projects-late",
    "href": "syllabus.html#policy-for-submitted-projects-late",
    "title": "Syllabus",
    "section": "Policy for submitted projects late",
    "text": "Policy for submitted projects late\n\nProject 1\nFor submitted solutions that had prior approval to have a two day extension and submitted within the two days, these projects will be graded with no late day penalty.\nFor submitted solutions without prior approval to have an extension, these projects will be graded, but have a late day penalty of 5% off the 100% starting point for each day (24 hours from the original date and time the assignment was due) that it is past due from the original due date.\n\nFor example, we will deduct 5% for the assignment that is <24 hours late, 10% points for the assignment that is 24-48 hours late, and 15% points for the assignment that is 48-72 hours late.\nIf you had approval from the instructor to submit two days late, but submitted the assignment after the extension due date and time, the penalty will apply starting with the extension date if submitted late. For example, we will deduct 5% for the assignment that is <24 hours late from the extension due date, etc.\n\n\n\nProject 2 and Project 3\nStarting with Project 2 and 3, the instructor and TAs will not accept any more email late day policy requests.\nA new policy will be implemented for late submissions. This is the new policy:\n\nEach student will be given two free “late days” for the rest of the course.\nA late day extends the individual project deadline by 24 hours without penalty.\nThe late days can be applied to just one project (e.g. two late days for Project 2), or they can be split across the two projects (one late day for Project 2 and one late day for Project 3). This is entirely left up to the discretion of the student.\nLate days are intended to give you flexibility: you can use them for any reason no questions asked.\nYou do not get any bonus points for not using your late days.\n\nAlthough the each student is only given a total of two late days, we will be accepting homework from students that pass this limit.\n\nWe will be deducting 5% for each extra late day. For example, if you have already used all of your late days for the term, we will deduct 5% for the assignment that is <24 hours late, 10% points for the assignment that is 24-48 hours late, and 15% points for the assignment that is 48-72 hours late.\nWe will not grade assignments that are more than 3 days past the original due date.\n\n\n\nRegrading Policy\nIt is very important to us that all assignments are properly graded. If you believe there is an error in your assignment grading, please send an email to one of the instructors within 7 days of receiving the grade. No re-grade requests will be accepted orally, and no regrade requests will be accepted more than 7 days after you receive the grade for the assignment."
  },
  {
    "objectID": "syllabus.html#academic-ethics-and-student-conduct-code",
    "href": "syllabus.html#academic-ethics-and-student-conduct-code",
    "title": "Syllabus",
    "section": "Academic Ethics and Student Conduct Code",
    "text": "Academic Ethics and Student Conduct Code\nStudents enrolled in the Bloomberg School of Public Health of The Johns Hopkins University assume an obligation to conduct themselves in a manner appropriate to the University’s mission as an institution of higher education. A student is obligated to refrain from acts which he or she knows, or under the circumstances has reason to know, impair the academic integrity of the University. Violations of academic integrity include, but are not limited to: cheating; plagiarism; knowingly furnishing false information to any agent of the University for inclusion in the academic record; violation of the rights and welfare of animal or human subjects in research; and misconduct as a member of either School or University committees or recognized groups or organizations.\nStudents should be familiar with the policies and procedures specified under Policy and Procedure Manual Student-01 (Academic Ethics), available on the school’s portal.\nThe faculty, staff and students of the Bloomberg School of Public Health and the Johns Hopkins University have the shared responsibility to conduct themselves in a manner that upholds the law and respects the rights of others. Students enrolled in the School are subject to the Student Conduct Code (detailed in Policy and Procedure Manual Student-06) and assume an obligation to conduct themselves in a manner which upholds the law and respects the rights of others. They are responsible for maintaining the academic integrity of the institution and for preserving an environment conducive to the safe pursuit of the School’s educational, research, and professional practice missions."
  },
  {
    "objectID": "syllabus.html#disability-support-service",
    "href": "syllabus.html#disability-support-service",
    "title": "Syllabus",
    "section": "Disability Support Service",
    "text": "Disability Support Service\nStudents requiring accommodations for disabilities should register with Student Disability Service (SDS). It is the responsibility of the student to register for accommodations with SDS. Accommodations take effect upon approval and apply to the remainder of the time for which a student is registered and enrolled at the Bloomberg School of Public Health. Once you are f a student in your class has approved accommodations you will receive formal notification and the student will be encouraged to reach out. If you have questions about requesting accommodations, please contact BSPH.dss@jhu.edu."
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis is a quantitative course. We will not discuss the mathematical details of specific data analysis approaches, however some statistical background and being comfortable with quantitative thinking are useful. Previous experience with writing computer programs in general and R in particular is also helpful, but not necessary. If you have no programming experience, expect to spend extra time getting yourself familiar with R. As long as you are willing to invest the time to learn the programming and you do not mind thinking quantitatively, you should be able to take the course, independent of your background.\nFormal requirement for the course is Biostatistics 140.621. Knowledge of material from 140.621 is assumed. If you didn’t take this course, please contact me to get permission to enroll.\n\nGetting set up\nYou must install R and RStudio on your computer in order to complete this course. These are two different applications that must be installed separately before they can be used together:\n\nR is the core underlying programming language and computing engine that we will be learning in this course\nRStudio is an interface into R that makes many aspects of using and programming R simpler\n\nBoth R and RStudio are available for Windows, macOS, and most flavors of Unix and Linux. Please download the version that is suitable for your computing setup.\nThroughout the course, we will make use of numerous R add-on packages that must be installed over the Internet. Packages can be installed using the install.packages() function in R. For example, to install the tidyverse package, you can run\n\ninstall.packages(\"tidyverse\")\n\nin the R console.\n\nHow to Download R for Windows\nGo to https://cran.r-project.org and\n\nClick the link to “Download R for Windows”\nClick on “base”\nClick on “Download R 4.2.1 for Windows”\n\n\n\n\n\n\n\nWarning\n\n\n\nThe version in the video is not the latest version. Please download the latest version.\n\n\n\n\n\nVideo Demo for Downloading R for Windows\n\n\n\n\nHow to Download R for the Mac\nGoto https://cran.r-project.org and\n\nClick the link to “Download R for (Mac) OS X”.\nClick on “R-4.2.1.pkg”\n\n\n\n\n\n\n\nWarning\n\n\n\nThe version in the video is not the latest version. Please download the latest version.\n\n\n\n\n\nVideo Demo for Downloading R for the Mac\n\n\n\n\nHow to Download RStudio\nGoto https://rstudio.com and\n\nClick on “Products” in the top menu\nThen click on “RStudio” in the drop down menu\nClick on “RStudio Desktop”\nClick the button that says “DOWNLOAD RSTUDIO DESKTOP”\nClick the button under “RStudio Desktop” Free\nUnder the section “All Installers” choose the file that is appropriate for your operating system.\n\n\n\n\n\n\n\nWarning\n\n\n\nThe video shows how to download RStudio for the Mac but you should download RStudio for whatever computing setup you have\n\n\n\n\n\nVideo Demo for Downloading RStudio"
  },
  {
    "objectID": "syllabus.html#general-disclaimers",
    "href": "syllabus.html#general-disclaimers",
    "title": "Syllabus",
    "section": "General Disclaimers",
    "text": "General Disclaimers\n\nThis syllabus is a general plan, deviations announced to the class by the instructor may be necessary."
  },
  {
    "objectID": "projects/2022-08-30-project-0/index.html",
    "href": "projects/2022-08-30-project-0/index.html",
    "title": "Project 0 (optional)",
    "section": "",
    "text": "Part 1\nThis part of the project is to ensure that you have successfully set up your computing environment. Please email (use the Subject line: 140.776 Setup) the Course Instructor (Dr. Stephanie Hicks) at shicks19@jhu.edu the following information:\n\nSetting up your computing environment\n\nYour name, JHED ID (if applicable).\nThe type of computer/operating system you are using (Windows, Mac, Unix/Linux, other)\nThe version of R that you have installed on your computer. To do this, start up R and run the following in the R console and include the output in your email.\n\n\nprint(R.version.string)\n\n\n\n\nPrinting the R version string\n\n\n\nThe version of RStudio that you have installed on your computer. To do this start up RStudio and in the R console window, run the following and again include the output in your email:\n\n\nprint(RStudio.Version()$version)\n\n\nIf you have a GitHub username, please include this in your email. If you do not have a GitHub username, read https://happygitwithr.com, sign up for GitHub, and include your new username in your email to me.\nTo make sure git is installed on your system, use the ‘Terminal’ (e.g. it’s next to the R Console within RStudio) (or whatever you use), run the following and include the output in your email:\n\nFor example, this is mine:\n\ngit --version\n\ngit version 2.32.1 (Apple Git-133)\n\n\nIf you have any trouble with any of the steps above, try to first post on the discussion board on CoursePlus. The TAs and I will be checking it frequently, but other students may also be helpful in their replies. You can also use other resources to get help (Google, R4DS, colleagues/friends/relatives with R/Markdown experience, etc.). Still, try to do as much as possible yourself. We will use all the bits you are learning here repeatedly during this course.\n\n\n\nPart 2\nThis part of the project is to help you introduce yourself (and your interests!) to others in this course. You will create a new GitHub repository and build a small website about yourself.\n\n1. Create a GitHub repo for your website\nCreate a new GitHub repository titled biostat776-intro-<firstname>-<lastname> (where you replace <firstname> with your first name and <lastname> with your last name) in your own personal GitHub account (e.g. https://github.com/<yourgithubusername>/biostat776-intro-<firstname>-<lastname>).\nFor example, you can find an example that I created for myself at\n\ngithub repo: https://github.com/stephaniehicks/biostat776-intro-stephanie-hicks\n\n\n\n2. Build a website using R Markdown\nUsing one of the many ways we discussed in class (e.g. a simple R Markdown website, blogdown, distill, etc), create a new project in RStudio with the appropriate files. For example, you might include the following information:\n\nWrite a short summary introducing yourself. Structure the webpage with headings, subheadings, etc. Talk a bit about yourself, your background, training, research interests. Let me/us know what kind of statistics, programming, data analysis experience you already have. I am also curious to know what you most hope to learn in this course.\nFive fun facts about yourself\nA web page linking to something you think is really cool/interesting/inspiring/etc. You could also describe briefly what it is and why you like it.\n\nIf you want, feel free to get creative and include other things. You can play with RMarkdown if you wish to, e.g., you can try to include some table or a video, etc.\n\n\n3. Include a README.md file\nYour project repository should include a README.md file (if it was not included already).\nEdit the repository README.md file. Typically it will only contain the name of your repository with a # sign in front. The # represents a level 1 heading in Markdown. Change the headline and call it “Introducing myself” (or something like that). Underneath write something like “This website contains a short introduction of Your Name.”\nMake sure the 2 files (README.md and especially index.Rmd / index.html) look the way you want. Make changes until everything works.\n\n\n4. Deploy your website\nDepending on how you want to deploy your website, the following may or may not be relevant to you. In general, you want to make sure you have initialized your project to use git (i.e. you can type git init to initialize the repository to use git. Add and commit your changes. Push your changes and deploy your website.\nFollowing steps 2-4, here is my example website:\n\nwebsite: https://www.stephaniehicks.com/biostat776-intro-stephanie-hicks\n\n\n\n5. Share your website\n\nGo to the Discussion Board in CoursePlus and write a short post with a link (URL) to your website (and URL to the corresponding GitHub repository) that you created.\nAs you read the introductions from other folks in the class, feel free to comment/reply using Discussion board.\n\nIn class on Sept 8, I will show as many websites as I can from Courseplus!"
  },
  {
    "objectID": "projects/2022-09-06-project-1/index.html",
    "href": "projects/2022-09-06-project-1/index.html",
    "title": "Project 1",
    "section": "",
    "text": "Part 1: Explore data\nIn this part, use functions from dplyr and ggplot2 to answer the following questions.\n\nMake a histogram of the rating scores to visualize the overall distribution of scores. Change the number of bins from the default to 10, 15, 20, and 25. Pick on the one that you think looks the best. Explain what the difference is when you change the number of bins and explain why you picked the one you did.\n\n\n# Add your solution here and describe your answer afterwards\n\nThe ratings are discrete values making the histogram look strange. When you make the bin size smaller, it aggregates the ratings together in larger groups removing that effect. I picked 15, but there really is no wrong answer. Just looking for an answer here.\n\nConsider the countries where the beans originated from. How many reviews come from each country of bean origin?\n\n\n# Add your solution here\n\n\nWhat is average rating scores from reviews of chocolate bars that have Ecuador as country_of_bean_origin in this dataset? For this same set of reviews, also calculate (1) the total number of reviews and (2) the standard deviation of the rating scores. Your answer should be a new data frame with these three summary statistics in three columns. Label the name of these columns mean, sd, and total.\n\n\n# Add your solution here\n\n\nWhich country makes the best chocolate (or has the highest ratings on average) with beans from Ecuador?\n\n\n# Add your solution here\n\n\nCalculate the average rating across all country of origins for beans. Which top 3 countries have the highest ratings on average?\n\n\n# Add your solution here\n\n\nFollowing up on the previous problem, now remove any countries of bean origins that have less than 10 chocolate bar reviews. Now, which top 3 countries have the highest ratings on average?\n\n\n# Add your solution here\n\n\nFor this last part, let’s explore the relationship between percent chocolate and ratings.\n\nUse the functions in dplyr, tidyr, and lubridate to perform the following steps to the chocolate dataset:\n\nIdentify the countries of bean origin with at least 50 reviews. Remove reviews from countries are not in this list.\nUsing the variable describing the chocolate percentage for each review, create a new column that groups chocolate percentages into one of four groups: (i) <60%, (ii) >=60 to <70%, (iii) >=70 to <90%, and (iii) >=90% (Hint check out the substr() function in base R and the case_when() function from dplyr – see example below).\nUsing the new column described in #2, re-order the factor levels (if needed) to be starting with the smallest percentage group and increasing to the largest percentage group (Hint check out the fct_relevel() function from forcats).\nFor each country, make a set of four side-by-side boxplots plotting the groups on the x-axis and the ratings on the y-axis. These plots should be faceted by country.\n\nOn average, which category of chocolate percentage is most highly rated? Do these countries mostly agree or are there disagreements?\nHint: You may find the case_when() function useful in this part, which can be used to map values from one variable to different values in a new variable (when used in a mutate() call).\n\n## Generate some random numbers\ndat <- tibble(x = rnorm(100))\nslice(dat, 1:3)\n\n# A tibble: 3 × 1\n       x\n   <dbl>\n1  0.691\n2  0.285\n3 -0.892\n\n## Create a new column that indicates whether the value of 'x' is positive or negative\ndat %>%\n        mutate(is_positive = case_when(\n                x >= 0 ~ \"Yes\",\n                x < 0 ~ \"No\"\n        ))\n\n# A tibble: 100 × 2\n        x is_positive\n    <dbl> <chr>      \n 1  0.691 Yes        \n 2  0.285 Yes        \n 3 -0.892 No         \n 4 -0.722 No         \n 5 -1.73  No         \n 6  0.767 Yes        \n 7  2.18  Yes        \n 8  0.756 Yes        \n 9  2.02  Yes        \n10 -1.11  No         \n# … with 90 more rows\n\n\n\n# Add your solution here\n\n\n\nPart 2: Join two datasets together\nThe goal of this part of the assignment is to join two datasets together. gapminder is a R package that contains an excerpt from the Gapminder data.\n\nTasks\n\nUse this dataset it to create a new column called continent in our chocolate dataset that contains the continent name for each review where the country of bean origin is.\nOnly keep reviews that have reviews from countries of bean origin with at least 10 reviews.\nAlso, remove the country of bean origin named \"Blend\".\nMake a set of violin plots with ratings on the y-axis and continents on the x-axis.\n\nHint:\n\nCheck to see if there are any NAs in the new column. If there are any NAs, add the continent name for each row.\n\n\n# Add your solution here\n\n\n\n\nPart 3: Convert wide data into long data\nThe goal of this part of the assignment is to take a dataset that is either messy or simply not tidy and to make them tidy datasets. The objective is to gain some familiarity with the functions in the dplyr, tidyr packages. You may find it helpful to review the section on spreading and gathering data.\n\nTasks\nWe are going to create a set of features for us to plot over time. Use the functions in dplyr and tidyr to perform the following steps to the chocolate dataset:\n\nCreate a new set of columns titled beans, sugar, cocoa_butter, vanilla, letchin, and salt that contain a 1 or 0 representing whether or not that review for the chocolate bar contained that ingredient (1) or not (0).\nCreate a new set of columns titled char_cocoa, char_sweet, char_nutty, char_creamy, char_roasty, char_earthy that contain a 1 or 0 representing whether or not that the most memorable characteristic for the chocolate bar had that word (1) or not (0). For example, if the word “sweet” appears in the most_memorable_characteristics, then record a 1, otherwise a 0 for that review in the char_sweet column (Hint: check out str_detect() from the stringr package).\nFor each year (i.e. review_date), calculate the mean value in each new column you created across all reviews for that year. (Hint: If all has gone well thus far, you should have a dataset with 16 rows and 13 columns).\nConvert this wide dataset into a long dataset with a new feature and mean_score column.\n\nIt should look something like this:\nreview_date     feature   mean_score\n<dbl>           <chr>     <dbl>\n2006    beans   0.967741935     \n2006    sugar   0.967741935     \n2006    cocoa_butter    0.903225806     \n2006    vanilla 0.693548387     \n2006    letchin 0.693548387     \n2006    salt    0.000000000     \n2006    char_cocoa  0.209677419     \n2006    char_sweet  0.161290323     \n2006    char_nutty  0.032258065     \n2006    char_creamy 0.241935484 \n\n\nNotes\n\nYou may need to use functions outside these packages to obtain this result.\nDo not worry about the ordering of the rows or columns. Depending on whether you use gather() or pivot_longer(), the order of your output may differ from what is printed above. As long as the result is a tidy data set, that is sufficient.\n\n\n# Add your solution here\n\n\n\n\nPart 4: Data visualization\nIn this part of the project, we will continue to work with our now tidy song dataset from the previous part.\n\nTasks\nUse the functions in ggplot2 package to make a scatter plot of the mean_scores (y-axis) over time (x-axis). One plot for each mean_score. For full credit, your plot should include:\n\nAn overall title for the plot and a subtitle summarizing key trends that you found. Also include a caption in the figure with your name.\nBoth the observed points for the mean_score, but also a smoothed non-linear pattern of the trend\nAll plots should be shown in the one figure\nThere should be an informative x-axis and y-axis label\n\nConsider playing around with the theme() function to make the figure shine, including playing with background colors, font, etc.\n\n\nNotes\n\nYou may need to use functions outside these packages to obtain this result.\nDon’t worry about the ordering of the rows or columns. Depending on whether you use gather() or pivot_longer(), the order of your output may differ from what is printed above. As long as the result is a tidy data set, that is sufficient.\n\n\n# Add your solution here\n\n\n\n\nPart 5: Make the worst plot you can!\nThis sounds a bit crazy I know, but I want this to try and be FUN! Instead of trying to make a “good” plot, I want you to explore your creative side and make a really awful data visualization in every way. :)\n\nTasks\nUsing the chocolate dataset (or any of the modified versions you made throughout this assignment or anything else you wish you build upon it):\n\nMake the absolute worst plot that you can. You need to customize it in at least 7 ways to make it awful.\nIn your document, write 1 - 2 sentences about each different customization you added (using bullets – i.e. there should be at least 7 bullet points each with 1-2 sentences), and how it could be useful for you when you want to make an awesome data visualization.\n\n\n# Add your solution here\n\n\n\n\nPart 6: Make my plot a better plot!\nThe goal is to take my sad looking plot and make it better! If you’d like an example, here is a tweet I came across of someone who gave a talk about how to zhoosh up your ggplots.\n\nchocolate %>%\n  ggplot(aes(x = as.factor(review_date), \n             y = rating, \n             fill = review_date)) +\n  geom_violin()\n\n\n\n\n\nTasks\n\nYou need to customize it in at least 7 ways to make it better.\nIn your document, write 1 - 2 sentences about each different customization you added (using bullets – i.e. there should be at least 7 bullet points each with 1-2 sentences), describing how you improved it.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html",
    "href": "projects/2022-10-04-project-3/index.html",
    "title": "Project 3",
    "section": "",
    "text": "Due date: October 21 at 11:59pm\nThe goal of this assignment is to practice wrangling special data types (including dates, character strings, and factors) and visualizing results while practicing our tidyverse skills.\n\n\nPlease write up your project using R Markdown and processed with knitr. Compile your document as an HTML file and submit your HTML file to the dropbox on Courseplus. Please show all your code (i.e. make sure to set echo = TRUE) for each of the answers to each part."
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-1a",
    "href": "projects/2022-10-04-project-3/index.html#part-1a",
    "title": "Project 3",
    "section": "Part 1A",
    "text": "Part 1A\nIn this section, we will do some data wrangling.\n\nUse lubridate to create a column called released that is a Date class. However, to be able to do this, you first need to use stringr to search for pattern that matches things like this “(US)[51]” in a string like this “September 1, 2006 (US)[51]” and removes them. (Note: to get full credit, you must create the regular expression).\nUse forcats to create a factor called country (Note: you may need to collapse some factor levels).\nTransform the sales into a unit that is album sales in millions of dollars.\nKeep only album sales from the UK, the US or the World.\nAuto print your final wrangled tibble data frame.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-1b",
    "href": "projects/2022-10-04-project-3/index.html#part-1b",
    "title": "Project 3",
    "section": "Part 1B",
    "text": "Part 1B\nIn this section, we will do some more data wrangling followed by summarization using wrangled data from Part 1A.\n\nKeep only album sales from the US.\nCreate a new column called years_since_release corresponding to the number of years since the release of each album from Beyoncé and Taylor Swift. This should be a whole number and you should round down to “14” if you get a non-whole number like “14.12” years. (Hint: you may find the interval() function from lubridate helpful here, but this not the only way to do this.)\nCalculate the most recent, oldest, and the median years since albums were released for both Beyoncé and Taylor Swift.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-1c",
    "href": "projects/2022-10-04-project-3/index.html#part-1c",
    "title": "Project 3",
    "section": "Part 1C",
    "text": "Part 1C\nUsing the wrangled data from Part 1A:\n\nCalculate the total album sales for each artist and for each country (only sales from the UK, US, and World).\nUsing the total album sales, create a percent stacked barchart using ggplot2 of the percentage of sales of studio albums (in millions) along the y-axis for the two artists along the x-axis colored by the country.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-1d",
    "href": "projects/2022-10-04-project-3/index.html#part-1d",
    "title": "Project 3",
    "section": "Part 1D",
    "text": "Part 1D\nUsing the wrangled data from Part 1A, use ggplot2 to create a bar plot for the sales of studio albums (in millions) along the x-axis for each of the album titles along the y-axis.\nNote:\n\nYou only need to consider the global World sales (you can ignore US and UK sales for this part).\nThe title of the album must be clearly readable along the y-axis.\nEach bar should be colored by which artist made that album.\nThe bars should be ordered from albums with the most sales (top) to the least sales (bottom) (Note: you must use functions from forcats for this step).\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-1e",
    "href": "projects/2022-10-04-project-3/index.html#part-1e",
    "title": "Project 3",
    "section": "Part 1E",
    "text": "Part 1E\nUsing the wrangled data from Part 1A, use ggplot2 to create a scatter plot of sales of studio albums (in millions) along the y-axis by the released date for each album along the x-axis.\nNote:\n\nThe points should be colored by the artist.\nThere should be three scatter plots (one for UK, US and world sales) faceted by rows.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-2a",
    "href": "projects/2022-10-04-project-3/index.html#part-2a",
    "title": "Project 3",
    "section": "Part 2A",
    "text": "Part 2A\nUsing ts_lyrics, create a new column called line with one line containing the character string for each line of Taylor Swift’s songs.\n\nHow many lines in Taylor Swift’s lyrics contain the word “hello”? For full credit, show all the rows in ts_lyrics that have “hello” in the line column and report how many rows there are in total.\nHow many lines in Taylor Swift’s lyrics contain the word “goodbye”? For full credit, show all the rows in ts_lyrics that have “goodbye” in the line column and report how many rows there are in total.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-2b",
    "href": "projects/2022-10-04-project-3/index.html#part-2b",
    "title": "Project 3",
    "section": "Part 2B",
    "text": "Part 2B\nRepeat the same analysis for b_lyrics as described in Part 2A.\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-2c",
    "href": "projects/2022-10-04-project-3/index.html#part-2c",
    "title": "Project 3",
    "section": "Part 2C",
    "text": "Part 2C\nUsing the b_lyrics dataset,\n\nTokenize each lyrical line by words.\nRemove the “stopwords”.\nCalculate the total number for each word in the lyrics.\nUsing the “bing” sentiment lexicon, add a column to the summarized data frame adding the “bing” sentiment lexicon.\nSort the rows from most frequent to least frequent words.\nOnly keep the top 25 most frequent words.\nAuto print the wrangled tibble data frame.\nUse ggplot2 to create a bar plot with the top words on the y-axis and the frequency of each word on the x-axis. Color each bar by the sentiment of each word from the “bing” sentiment lexicon. Bars should be ordered from most frequent on the top to least frequent on the bottom of the plot.\nCreate a word cloud of the top 25 most frequent words.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-2d",
    "href": "projects/2022-10-04-project-3/index.html#part-2d",
    "title": "Project 3",
    "section": "Part 2D",
    "text": "Part 2D\nRepeat the same analysis as above in Part 2C, but for ts_lyrics.\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-10-04-project-3/index.html#part-2e",
    "href": "projects/2022-10-04-project-3/index.html#part-2e",
    "title": "Project 3",
    "section": "Part 2E",
    "text": "Part 2E\nUsing the ts_lyrics dataset,\n\nTokenize each lyrical line by words.\nRemove the “stopwords”.\nCalculate the total number for each word in the lyrics for each Album.\nUsing the “afinn” sentiment lexicon, add a column to the summarized data frame adding the “afinn” sentiment lexicon.\nCalculate the average sentiment score for each Album.\nAuto print the wrangled tibble data frame.\nJoin the wrangled data frame from Part 1A (album sales in millions) with the wrangled data frame from #6 above (average sentiment score for each album).\nUsing ggplot2, create a scatter plot of the average sentiment score for each album (y-axis) and the album release data along the x-axis. Make the size of each point the album sales in millions.\nAdd a horizontal line at y-intercept=0.\nWrite 2-3 sentences interpreting the plot answering the question “How has the sentiment of Taylor Swift’s albums have changed over time?”. Add a title, subtitle, and useful axis labels.\n\n\n# Add your solution here"
  },
  {
    "objectID": "projects/2022-09-15-project-2/index.html",
    "href": "projects/2022-09-15-project-2/index.html",
    "title": "Project 2",
    "section": "",
    "text": "Part 1: Fun with functions\nIn this part, we are going to practice creating functions.\n\nPart 1A: Exponential transformation\nThe exponential of a number can be written as an infinite series expansion of the form $$ (x) = 1 + x + + + \n$$ Of course, we cannot compute an infinite series by the end of this term and so we must truncate it at a certain point in the series. The truncated sum of terms represents an approximation to the true exponential, but the approximation may be usable.\nWrite a function that computes the exponential of a number using the truncated series expansion. The function should take two arguments:\n\nx: the number to be exponentiated\nk: the number of terms to be used in the series expansion beyond the constant 1. The value of k is always \\(\\geq 1\\).\n\nFor example, if \\(k = 1\\), then the Exp function should return the number \\(1 + x\\). If \\(k = 2\\), then you should return the number \\(1 + x + x^2/2!\\).\nInclude at least one example of output using your function.\n\n\n\n\n\n\nNote\n\n\n\n\nYou can assume that the input value x will always be a single number.\nYou can assume that the value k will always be an integer \\(\\geq 1\\).\nDo not use the exp() function in R.\nThe factorial() function can be used to compute factorials.\n\n\n\n\nExp <- function(x, k) {\n        # Add your solution here\n}\n\n\n\nPart 1B: Sample mean and sample standard deviation\nNext, write two functions called sample_mean() and sample_sd() that takes as input a vector of data of length \\(N\\) and calculates the sample average and sample standard deviation for the set of \\(N\\) observations.\n$$\n{x} = _{i=1}^n x_i\n\\[ \\]\ns = \n$$ Include at least one example of output using your functions.\n\n\n\n\n\n\nNote\n\n\n\n\nYou can assume that the input value x will always be a vector of numbers of length N.\nDo not use the mean() and sd() functions in R.\n\n\n\n\nsample_mean <- function(x) {\n        # Add your solution here\n}\n\nsample_sd <- function(x) {\n        # Add your solution here\n}\n\n\n\nPart 1C: Confidence intervals\nNext, write a function called calculate_CI() that:\n\nThere should be two inputs to the calculate_CI(). First, it should take as input a vector of data of length \\(N\\). Second, the function should also have a conf (\\(=1-\\alpha\\)) argument that allows the confidence interval to be adapted for different \\(\\alpha\\).\nCalculates a confidence interval (CI) (e.g. a 95% CI) for the estimate of the mean in the population. If you are not familiar with confidence intervals, it is an interval that contains the population parameter with probability \\(1-\\alpha\\) taking on this form\n\n$$\n{x} t_{/2, N-1} s_{{x}}\n$$\nwhere \\(t_{\\alpha/2, N-1}\\) is the value needed to generate an area of \\(\\alpha / 2\\) in each tail of the \\(t\\)-distribution with \\(N-1\\) degrees of freedom and \\(s_{\\bar{x}} = \\frac{s}{\\sqrt{N}}\\) is the standard error of the mean. For example, if we pick a 95% confidence interval and \\(N\\)=50, then you can calculate \\(t_{\\alpha/2, N-1}\\) as\n\nalpha <- 1 - 0.95\ndegrees_freedom = 50 - 1\nt_score = qt(p=alpha/2, df=degrees_freedom, lower.tail=FALSE)\n\n\nReturns a named vector of length 2, where the first value is the lower_bound, the second value is the upper_bound.\n\n\ncalculate_CI <- function(x, conf = 0.95) {\n        # Add your solution here\n}\n\nInclude example of output from your function showing the output when using two different levels of conf.\n\n\n\n\n\n\nNote\n\n\n\nIf you want to check if your function output matches an existing function in R, consider a vector \\(x\\) of length \\(N\\) and see if the following two code chunks match.\n\ncalculate_CI(x, conf = 0.95)\n\n\ndat = data.frame(x=x)\nfit <- lm(x ~ 1, dat)\n\n# Calculate a 95% confidence interval\nconfint(fit, level=0.95)\n\n\n\n\n\n\nPart 2: Wrangling data\nIn this part, we will practice our wrangling skills with the tidyverse that we learned about in module 1.\n\nData\nThe two datasets for this part of the assignment comes from TidyTuesday. Specifically, we will use the following data from January 2020, which I have provided for you below:\n\ntuesdata <- tidytuesdayR::tt_load('2020-01-07')\nrainfall <- tuesdata$rainfall\ntemperature <- tuesdata$temperature\n\nHowever, to avoid re-downloading data, we will check to see if those files already exist using an if() statement:\n\nlibrary(here)\nif(!file.exists(here(\"data\",\"tuesdata_rainfall.RDS\"))){\n  tuesdata <- tidytuesdayR::tt_load('2020-01-07')\n  rainfall <- tuesdata$rainfall\n  temperature <- tuesdata$temperature\n  \n  # save the files to RDS objects\n  saveRDS(tuesdata$rainfall, file = here(\"data\",\"tuesdata_rainfall.RDS\"))\n  saveRDS(tuesdata$temperature, file = here(\"data\",\"tuesdata_temperature.RDS\"))\n}\n\n\n\n\n\n\n\nNote\n\n\n\nThe above code will only run if it cannot find the path to the tuesdata_rainfall.RDS on your computer. Then, we can just read in these files every time we knit the R Markdown, instead of re-downloading them every time.\n\n\nLet’s load the datasets\n\nrainfall <- readRDS(here(\"data\",\"tuesdata_rainfall.RDS\"))\ntemperature <- readRDS(here(\"data\",\"tuesdata_temperature.RDS\"))\n\nNow we can look at the data with glimpse()\n\nlibrary(tidyverse)\n\nglimpse(rainfall)\n\nRows: 179,273\nColumns: 11\n$ station_code <chr> \"009151\", \"009151\", \"009151\", \"009151\", \"009151\", \"009151…\n$ city_name    <chr> \"Perth\", \"Perth\", \"Perth\", \"Perth\", \"Perth\", \"Perth\", \"Pe…\n$ year         <dbl> 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967, 196…\n$ month        <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01…\n$ day          <chr> \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10…\n$ rainfall     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ period       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ quality      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ lat          <dbl> -31.96, -31.96, -31.96, -31.96, -31.96, -31.96, -31.96, -…\n$ long         <dbl> 115.79, 115.79, 115.79, 115.79, 115.79, 115.79, 115.79, 1…\n$ station_name <chr> \"Subiaco Wastewater Treatment Plant\", \"Subiaco Wastewater…\n\nglimpse(temperature)\n\nRows: 528,278\nColumns: 5\n$ city_name   <chr> \"PERTH\", \"PERTH\", \"PERTH\", \"PERTH\", \"PERTH\", \"PERTH\", \"PER…\n$ date        <date> 1910-01-01, 1910-01-02, 1910-01-03, 1910-01-04, 1910-01-0…\n$ temperature <dbl> 26.7, 27.0, 27.5, 24.0, 24.8, 24.4, 25.3, 28.0, 32.6, 35.9…\n$ temp_type   <chr> \"max\", \"max\", \"max\", \"max\", \"max\", \"max\", \"max\", \"max\", \"m…\n$ site_name   <chr> \"PERTH AIRPORT\", \"PERTH AIRPORT\", \"PERTH AIRPORT\", \"PERTH …\n\n\nIf we look at the TidyTuesday github repo from 2020, we see this dataset contains temperature and rainfall data from Australia.\n\n[Source: Geoscience Australia]\nHere is a data dictionary for what all the column names mean:\n\nhttps://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-01-07/readme.md#data-dictionary\n\n\n\nTasks\nUsing the rainfall and temperature data, perform the following steps and create a new data frame called df:\n\nStart with rainfall dataset and drop any rows with NAs.\nCreate a new column titled date that combines the columns year, month, day into one column separated by “-”. (e.g. “2020-01-01”). This column should not be a character, but should be recognized as a date. (Hint: check out the ymd() function in lubridate R package). You will also want to add a column that just keeps the year.\nUsing the city_name column, convert the city names (character strings) to all upper case.\nJoin this wrangled rainfall dataset with the temperature dataset such that it includes only observations that are in both data frames. (Hint: there are two keys that you will need to join the two datasets together). (Hint: If all has gone well thus far, you should have a dataset with 83,964 rows and 13 columns).\n\n\n\n\n\n\n\nNote\n\n\n\n\nYou may need to use functions outside these packages to obtain this result, in particular you may find the functions drop_na() from tidyr and str_to_upper() function from stringr useful.\n\n\n\n\n# Add your solution here\n\n\n\n\nPart 3: Data visualization\nIn this part, we will practice our ggplot2 plotting skills within the tidyverse starting with our wrangled df data from Part 2. For full credit in this part (and for all plots that you make), your plots should include:\n\nAn overall title for the plot and a subtitle summarizing key trends that you found. Also include a caption in the figure.\nThere should be an informative x-axis and y-axis label.\n\nConsider playing around with the theme() function to make the figure shine, including playing with background colors, font, etc.\n\nPart 3A: Plotting temperature data over time\nUse the functions in ggplot2 package to make a line plot of the max and min temperature (y-axis) over time (x-axis) for each city in our wrangled data from Part 2. You should only consider years 2014 and onwards. For full credit, your plot should include:\n\nFor a given city, the min and max temperature should both appear on the plot, but they should be two different colors.\nUse a facet function to facet by city_name to show all cities in one figure.\n\n\n# Add your solution here\n\n\n\nPart 3B: Plotting rainfall over time\nHere we want to explore the distribution of rainfall (log scale) with histograms for a given city (indicated by the city_name column) for a given year (indicated by the year column) so we can make some exploratory plots of the data.\n\n\n\n\n\n\nNote\n\n\n\nYou are again using the wrangled data from Part 2.\n\n\nThe following code plots the data from one city (city_name == \"PERTH\") in a given year (year == 2000).\n\ndf %>% \n  filter(city_name == \"PERTH\", year == 2000) %>% \n  ggplot(aes(log(rainfall))) + \n    geom_histogram()\n\nWhile this code is useful, it only provides us information on one city in one year. We could cut and paste this code to look at other cities/years, but that can be error prone and just plain messy.\nThe aim here is to design and implement a function that can be re-used to visualize all of the data in this dataset.\n\nThere are 2 aspects that may vary in the dataset: The city_name and the year. Note that not all combinations of city_name and year have measurements.\nYour function should take as input two arguments city_name and year.\nGiven the input from the user, your function should return a single histogram for that input. Furthermore, the data should be readable on that plot so that it is in fact useful. It should be possible visualize the entire dataset with your function (through repeated calls to your function).\nIf the user enters an input that does not exist in the dataset, your function should catch that and report an error (via the stop() function).\n\nFor this section,\n\nWrite a short description of how you chose to design your function and why.\nPresent the code for your function in the R markdown document.\nInclude at least one example of output from your function.\n\n\n# Add your solution here\n\n\n\n\nPart 4: Apply functions and plot\n\nPart 4A: Tasks\nIn this part, we will apply the functions we wrote in Part 1 to our rainfall data starting with our wrangled df data from Part 2.\n\nFirst, filter for only years including 2014 and onwards.\nFor a given city and for a given year, calculate the sample mean (using your function sample_mean()), the sample standard deviation (using your function sample_sd()), and a 95% confidence interval for the average rainfall (using your function calculate_CI()). Specifically, you should add two columns in this summarized dataset: a column titled lower_bound and a column titled upper_bound containing the lower and upper bounds for you CI that you calculated (using your function calculate_CI()).\nCall this summarized dataset rain_df.\n\n\n# Add your solution here\n\n\n\nPart 4B: Tasks\nUsing the rain_df, plots the estimates of mean rainfall and the 95% confidence intervals on the same plot. There should be a separate faceted plot for each city. Think about using ggplot() with both geom_point() (and geom_line() to connect the points) for the means and geom_errorbar() for the lower and upper bounds of the confidence interval.\n\n# Add your solution here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to Statistical Computing!",
    "section": "",
    "text": "Welcome to Statistical Computing at Johns Hopkins Bloomberg School of Public Health!"
  },
  {
    "objectID": "index.html#what-is-this-course",
    "href": "index.html#what-is-this-course",
    "title": "Welcome to Statistical Computing!",
    "section": "What is this course?",
    "text": "What is this course?\nThis course covers the basics of practical issues in programming and other computer skills required for the research and application of statistical methods. Includes programming in R and the tidyverse, data ethics, best practices for coding and reproducible research, introduction to data visualizations, best practices for working with special data types (dates/times, text data, etc), best practices for storing data, basics of debugging, organizing and commenting code, basics of leveraging Python from R. Topics in statistical data analysis provide working examples."
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Welcome to Statistical Computing!",
    "section": "Getting started",
    "text": "Getting started\nI suggest that you start by looking over the Syllabus and Schedule under General Information. After that, start with the Lectures content in the given order."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Welcome to Statistical Computing!",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis course was developed and is maintained by Stephanie Hicks.\nThe following individuals have contributed to improving the course or materials have been adapted from their courses: Roger D. Peng, Andreas Handel, Naim Rashid, Michael Love.\nThe course materials are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Linked and embedded materials are governed by their own licenses. I assume that all external materials used or embedded here are covered under the educational fair use policy. If this is not the case and any material displayed here violates copyright, please let me know and I will remove it."
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html",
    "title": "R Nuts and Bolts",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://rafalab.github.io/dsbook/r-basics\nhttps://r4ds.had.co.nz/vectors.html?q=typeof#vectors\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-r-nuts-and-bolts"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#entering-input",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#entering-input",
    "title": "R Nuts and Bolts",
    "section": "Entering Input",
    "text": "Entering Input\nAt the R prompt we type expressions. The <- symbol is the assignment operator.\n\nx <- 1\nprint(x)\n\n[1] 1\n\nx\n\n[1] 1\n\nmsg <- \"hello\"\n\nThe grammar of the language determines whether an expression is complete or not.\n\nx <-  ## Incomplete expression\n\nError: <text>:2:0: unexpected end of input\n1: x <-  ## Incomplete expression\n   ^\n\n\nThe # character indicates a comment.\nAnything to the right of the # (including the # itself) is ignored. This is the only comment character in R.\nUnlike some other languages, R does not support multi-line comments or comment blocks."
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#evaluation",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#evaluation",
    "title": "R Nuts and Bolts",
    "section": "Evaluation",
    "text": "Evaluation\nWhen a complete expression is entered at the prompt, it is evaluated and the result of the evaluated expression is returned.\nThe result may be auto-printed.\n\nx <- 5  ## nothing printed\nx       ## auto-printing occurs\n\n[1] 5\n\nprint(x)  ## explicit printing\n\n[1] 5\n\n\nThe [1] shown in the output indicates that x is a vector and 5 is its first element.\nTypically with interactive work, we do not explicitly print objects with the print() function; it is much easier to just auto-print them by typing the name of the object and hitting return/enter.\nHowever, when writing scripts, functions, or longer programs, there is sometimes a need to explicitly print objects because auto-printing does not work in those settings.\nWhen an R vector is printed you will notice that an index for the vector is printed in square brackets [] on the side. For example, see this integer sequence of length 20.\n\n\n\n\nx <- 11:30\nx\n\n [1] 11 12 13 14 15 16 17 18 19 20 21 22\n[13] 23 24 25 26 27 28 29 30\n\n\n\n\n\nThe numbers in the square brackets are not part of the vector itself, they are merely part of the printed output.\n\n\n\n\n\n\nNote\n\n\n\nWith R, it’s important that one understand that there is a difference between the actual R object and the manner in which that R object is printed to the console.\nOften, the printed output may have additional bells and whistles to make the output more friendly to the users. However, these bells and whistles are not inherently part of the object.\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nThe : operator is used to create integer sequences.\n\n5:0\n\n[1] 5 4 3 2 1 0\n\n-15:15\n\n [1] -15 -14 -13 -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3\n[20]   4   5   6   7   8   9  10  11  12  13  14  15"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#r-objects",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#r-objects",
    "title": "R Nuts and Bolts",
    "section": "R Objects",
    "text": "R Objects\nThe most basic type of R object is a vector.\n\nVectors\nThere is really only one rule about vectors in R, which is that\n\nA vector can only contain objects of the same class\n\nTo understand what we mean here, we need to dig a little deeper. We will come back this in just a minute.\n\nTypes of vectors\nThere are two types of vectors in R:\n\nAtomic vectors:\n\nlogical: FALSE, TRUE, and NA\ninteger (and doubles): these are known collectively as numeric vectors (or real numbers)\ncomplex: complex numbers\ncharacter: the most complex type of atomic vector, because each element of a character vector is a string, and a string can contain an arbitrary amount of data\nraw: used to store fixed-length sequences of bytes. These are not commonly used directly in data analysis and I won’t cover them here.\n\nLists, which are sometimes called recursive vectors because lists can contain other lists.\n\n\n[Source: R 4 Data Science]\n\n\n\n\n\n\nNote\n\n\n\nThere’s one other related object: NULL.\n\nNULL is often used to represent the absence of a vector (as opposed to NA which is used to represent the absence of a value in a vector).\nNULL typically behaves like a vector of length 0.\n\n\n\n\n\nCreate an empty vector\nEmpty vectors can be created with the vector() function.\n\nvector(mode = \"numeric\", length = 4)\n\n[1] 0 0 0 0\n\nvector(mode = \"logical\", length = 4)\n\n[1] FALSE FALSE FALSE FALSE\n\nvector(mode = \"character\", length = 4)\n\n[1] \"\" \"\" \"\" \"\"\n\n\n\n\nCreating a non-empty vector\nThe c() function can be used to create vectors of objects by concatenating things together.\n\nx <- c(0.5, 0.6)       ## numeric\nx <- c(TRUE, FALSE)    ## logical\nx <- c(T, F)           ## logical\nx <- c(\"a\", \"b\", \"c\")  ## character\nx <- 9:29              ## integer\nx <- c(1+0i, 2+4i)     ## complex\n\n\n\n\n\n\n\nNote\n\n\n\nIn the above example, T and F are short-hand ways to specify TRUE and FALSE.\nHowever, in general, one should try to use the explicit TRUE and FALSE values when indicating logical values.\nThe T and F values are primarily there for when you’re feeling lazy.\n\n\n\n\nLists\nSo, I know I said there is one rule about vectors:\n\nA vector can only contain objects of the same class\n\nBut of course, like any good rule, there is an exception, which is a list (which we will get to in greater details a bit later).\nFor now, just know a list is represented as a vector but can contain objects of different classes. Indeed, that’s usually why we use them.\n\n\n\n\n\n\nNote\n\n\n\nThe main difference between atomic vectors and lists is that atomic vectors are homogeneous, while lists can be heterogeneous.\n\n\n\n\n\nNumerics\nInteger and double vectors are known collectively as numeric vectors.\nIn R, numbers are doubles by default.\nTo make an integer, place an L after the number:\n\ntypeof(4)\n\n[1] \"double\"\n\ntypeof(4L)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe distinction between integers and doubles is not usually important, but there are two important differences that you should be aware of:\n\nDoubles are approximations!\nDoubles represent floating point numbers that can not always be precisely represented with a fixed amount of memory. This means that you should consider all doubles to be approximations.\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s explore this. What is square of the square root of two? i.e. \\((\\sqrt{2})^2\\)\n\nx <- sqrt(2) ^ 2\nx\n\n[1] 2\n\n\nTry subtracting 2 from x? What happened?\n\n## try it here\n\n\n\n\n\nNumbers\nNumbers in R are generally treated as numeric objects (i.e. double precision real numbers).\nThis means that even if you see a number like “1” or “2” in R, which you might think of as integers, they are likely represented behind the scenes as numeric objects (so something like “1.00” or “2.00”).\nThis isn’t important most of the time…except when it is!\nIf you explicitly want an integer, you need to specify the L suffix. So entering 1 in R gives you a numeric object; entering 1L explicitly gives you an integer object.\n\n\n\n\n\n\nNote\n\n\n\nThere is also a special number Inf which represents infinity. This allows us to represent entities like 1 / 0. This way, Inf can be used in ordinary calculations; e.g. 1 / Inf is 0.\nThe value NaN represents an undefined value (“not a number”); e.g. 0 / 0; NaN can also be thought of as a missing value (more on that later)\n\n\n\n\nAttributes\nR objects can have attributes, which are like metadata for the object.\nThese metadata can be very useful in that they help to describe the object.\nFor example, column names on a data frame help to tell us what data are contained in each of the columns. Some examples of R object attributes are\n\nnames, dimnames\ndimensions (e.g. matrices, arrays)\nclass (e.g. integer, numeric)\nlength\nother user-defined attributes/metadata\n\nAttributes of an object (if any) can be accessed using the attributes() function. Not all R objects contain attributes, in which case the attributes() function returns NULL.\nHowever, every vector has two key properties:\n\nIts type, which you can determine with typeof().\n\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\ntypeof(letters)\n\n[1] \"character\"\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ntypeof(1:10)\n\n[1] \"integer\"\n\n\n\nIts length, which you can determine with length().\n\n\nx <- list(\"a\", \"b\", 1:10)\nx\n\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\nlength(x)\n\n[1] 3\n\ntypeof(x)\n\n[1] \"list\"\n\nattributes(x)\n\nNULL"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#mixing-objects",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#mixing-objects",
    "title": "R Nuts and Bolts",
    "section": "Mixing Objects",
    "text": "Mixing Objects\nThere are occasions when different classes of R objects get mixed together.\nSometimes this happens by accident but it can also happen on purpose.\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s use typeof() to ask what happens when we mix different classes of R objects together.\n\ny <- c(1.7, \"a\")\ny <- c(TRUE, 2)\ny <- c(\"a\", TRUE)\n\n\n## try it here\n\n\n\nWhy is this happening?\nIn each case above, we are mixing objects of two different classes in a vector.\nBut remember that the only rule about vectors says this is not allowed?\nWhen different objects are mixed in a vector, coercion occurs so that every element in the vector is of the same class.\nIn the example above, we see the effect of implicit coercion.\nWhat R tries to do is find a way to represent all of the objects in the vector in a reasonable fashion. Sometimes this does exactly what you want and…sometimes not.\nFor example, combining a numeric object with a character object will create a character vector, because numbers can usually be easily represented as strings."
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#explicit-coercion",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#explicit-coercion",
    "title": "R Nuts and Bolts",
    "section": "Explicit Coercion",
    "text": "Explicit Coercion\nObjects can be explicitly coerced from one class to another using the as.*() functions, if available.\n\nx <- 0:6\nclass(x)\n\n[1] \"integer\"\n\nas.numeric(x)\n\n[1] 0 1 2 3 4 5 6\n\nas.logical(x)\n\n[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nas.character(x)\n\n[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\n\n\nSometimes, R can’t figure out how to coerce an object and this can result in NAs being produced.\n\nx <- c(\"a\", \"b\", \"c\")\nas.numeric(x)\n\nWarning: NAs introduced by coercion\n\n\n[1] NA NA NA\n\nas.logical(x)\n\n[1] NA NA NA\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s try to convert the x vector above to integers.\n\n## try it here \n\n\n\nWhen nonsensical coercion takes place, you will usually get a warning from R."
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#matrices",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#matrices",
    "title": "R Nuts and Bolts",
    "section": "Matrices",
    "text": "Matrices\nMatrices are vectors with a dimension attribute.\n\nThe dimension attribute is itself an integer vector of length 2 (number of rows, number of columns)\n\n\nm <- matrix(nrow = 2, ncol = 3) \nm\n\n     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n\ndim(m)\n\n[1] 2 3\n\nattributes(m)\n\n$dim\n[1] 2 3\n\n\nMatrices are constructed column-wise, so entries can be thought of starting in the “upper left” corner and running down the columns.\n\nm <- matrix(1:6, nrow = 2, ncol = 3) \nm\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s try to use attributes() function to look at the attributes of the m object\n\n## try it here \n\n\n\nMatrices can also be created directly from vectors by adding a dimension attribute.\n\nm <- 1:10 \nm\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ndim(m) <- c(2, 5)\nm\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n\nMatrices can be created by column-binding or row-binding with the cbind() and rbind() functions.\n\nx <- 1:3\ny <- 10:12\ncbind(x, y)\n\n     x  y\n[1,] 1 10\n[2,] 2 11\n[3,] 3 12\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s try to use rbind() to row bind x and y above.\n\n## try it here"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#lists-1",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#lists-1",
    "title": "R Nuts and Bolts",
    "section": "Lists",
    "text": "Lists\nLists are a special type of vector that can contain elements of different classes. Lists are a very important data type in R and you should get to know them well.\n\n\n\n\n\n\nPro-tip\n\n\n\nLists, in combination with the various “apply” functions discussed later, make for a powerful combination.\n\n\nLists can be explicitly created using the list() function, which takes an arbitrary number of arguments.\n\nx <- list(1, \"a\", TRUE, 1 + 4i) \nx\n\n[[1]]\n[1] 1\n\n[[2]]\n[1] \"a\"\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] 1+4i\n\n\nWe can also create an empty list of a prespecified length with the vector() function\n\nx <- vector(\"list\", length = 5)\nx\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\n\n[[5]]\nNULL"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#factors",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#factors",
    "title": "R Nuts and Bolts",
    "section": "Factors",
    "text": "Factors\nFactors are used to represent categorical data and can be unordered or ordered. One can think of a factor as an integer vector where each integer has a label.\n\n\n\n\n\n\nPro-tip\n\n\n\nFactors are important in statistical modeling and are treated specially by modelling functions like lm() and glm().\n\n\nUsing factors with labels is better than using integers because factors are self-describing.\n\n\n\n\n\n\nPro-tip\n\n\n\nHaving a variable that has values “Yes” and “No” or “Smoker” and “Non-Smoker” is better than a variable that has values 1 and 2.\n\n\nFactor objects can be created with the factor() function.\n\nx <- factor(c(\"yes\", \"yes\", \"no\", \"yes\", \"no\")) \nx\n\n[1] yes yes no  yes no \nLevels: no yes\n\ntable(x) \n\nx\n no yes \n  2   3 \n\n## See the underlying representation of factor\nunclass(x)  \n\n[1] 2 2 1 2 1\nattr(,\"levels\")\n[1] \"no\"  \"yes\"\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s try to use attributes() function to look at the attributes of the x object\n\n## try it here \n\n\n\nOften factors will be automatically created for you when you read in a dataset using a function like read.table().\n\nThose functions often default to creating factors when they encounter data that look like characters or strings.\n\nThe order of the levels of a factor can be set using the levels argument to factor(). This can be important in linear modeling because the first level is used as the baseline level.\n\nx <- factor(c(\"yes\", \"yes\", \"no\", \"yes\", \"no\"))\nx  ## Levels are put in alphabetical order\n\n[1] yes yes no  yes no \nLevels: no yes\n\nx <- factor(c(\"yes\", \"yes\", \"no\", \"yes\", \"no\"),\n            levels = c(\"yes\", \"no\"))\nx\n\n[1] yes yes no  yes no \nLevels: yes no"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#missing-values",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#missing-values",
    "title": "R Nuts and Bolts",
    "section": "Missing Values",
    "text": "Missing Values\nMissing values are denoted by NA or NaN for undefined mathematical operations.\n\nis.na() is used to test objects if they are NA\nis.nan() is used to test for NaN\nNA values have a class also, so there are integer NA, character NA, etc.\nA NaN value is also NA but the converse is not true\n\n\n## Create a vector with NAs in it\nx <- c(1, 2, NA, 10, 3)  \n## Return a logical vector indicating which elements are NA\nis.na(x)    \n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n## Return a logical vector indicating which elements are NaN\nis.nan(x)   \n\n[1] FALSE FALSE FALSE FALSE FALSE\n\n\n\n## Now create a vector with both NA and NaN values\nx <- c(1, 2, NaN, NA, 4)\nis.na(x)\n\n[1] FALSE FALSE  TRUE  TRUE FALSE\n\nis.nan(x)\n\n[1] FALSE FALSE  TRUE FALSE FALSE"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#data-frames",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#data-frames",
    "title": "R Nuts and Bolts",
    "section": "Data Frames",
    "text": "Data Frames\nData frames are used to store tabular data in R. They are an important type of object in R and are used in a variety of statistical modeling applications. Hadley Wickham’s package dplyr has an optimized set of functions designed to work efficiently with data frames.\nData frames are represented as a special type of list where every element of the list has to have the same length.\n\nEach element of the list can be thought of as a column\nThe length of each element of the list is the number of rows\n\nUnlike matrices, data frames can store different classes of objects in each column. Matrices must have every element be the same class (e.g. all integers or all numeric).\nIn addition to column names, indicating the names of the variables or predictors, data frames have a special attribute called row.names which indicate information about each row of the data frame.\nData frames are usually created by reading in a dataset using the read.table() or read.csv(). However, data frames can also be created explicitly with the data.frame() function or they can be coerced from other types of objects like lists.\n\nx <- data.frame(foo = 1:4, bar = c(T, T, F, F)) \nx\n\n  foo   bar\n1   1  TRUE\n2   2  TRUE\n3   3 FALSE\n4   4 FALSE\n\nnrow(x)\n\n[1] 4\n\nncol(x)\n\n[1] 2\n\nattributes(x)\n\n$names\n[1] \"foo\" \"bar\"\n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4\n\n\nData frames can be converted to a matrix by calling data.matrix(). While it might seem that the as.matrix() function should be used to coerce a data frame to a matrix, almost always, what you want is the result of data.matrix().\n\ndata.matrix(x)\n\n     foo bar\n[1,]   1   1\n[2,]   2   1\n[3,]   3   0\n[4,]   4   0\n\nattributes(data.matrix(x))\n\n$dim\n[1] 4 2\n\n$dimnames\n$dimnames[[1]]\nNULL\n\n$dimnames[[2]]\n[1] \"foo\" \"bar\"\n\n\n\nExample\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s use the palmerpenguins dataset.\n\nWhat attributes does penguins have?\nWhat class is the penguins R object?\nWhat are the levels in the species column in the penguins dataset?\nCreate a logical vector for all the penguins measured from 2008.\nCreate a matrix with just the columns bill_length_mm, bill_depth_mm, flipper_length_mm, and body_mass_g\n\n\n# try it yourself\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins \n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "posts/2022-09-20-r-nuts-and-bolts/index.html#names",
    "href": "posts/2022-09-20-r-nuts-and-bolts/index.html#names",
    "title": "R Nuts and Bolts",
    "section": "Names",
    "text": "Names\nR objects can have names, which is very useful for writing readable code and self-describing objects.\nHere is an example of assigning names to an integer vector.\n\nx <- 1:3\nnames(x)\n\nNULL\n\nnames(x) <- c(\"New York\", \"Seattle\", \"Los Angeles\") \nx\n\n   New York     Seattle Los Angeles \n          1           2           3 \n\nnames(x)\n\n[1] \"New York\"    \"Seattle\"     \"Los Angeles\"\n\nattributes(x)\n\n$names\n[1] \"New York\"    \"Seattle\"     \"Los Angeles\"\n\n\nLists can also have names, which is often very useful.\n\nx <- list(\"Los Angeles\" = 1, Boston = 2, London = 3) \nx\n\n$`Los Angeles`\n[1] 1\n\n$Boston\n[1] 2\n\n$London\n[1] 3\n\nnames(x)\n\n[1] \"Los Angeles\" \"Boston\"      \"London\"     \n\n\nMatrices can have both column and row names.\n\nm <- matrix(1:4, nrow = 2, ncol = 2)\ndimnames(m) <- list(c(\"a\", \"b\"), c(\"c\", \"d\")) \nm\n\n  c d\na 1 3\nb 2 4\n\n\nColumn names and row names can be set separately using the colnames() and rownames() functions.\n\ncolnames(m) <- c(\"h\", \"f\")\nrownames(m) <- c(\"x\", \"z\")\nm\n\n  h f\nx 1 3\nz 2 4\n\n\n\n\n\n\n\n\nNote\n\n\n\nFor data frames, there is a separate function for setting the row names, the row.names() function.\nAlso, data frames do not have column names, they just have names (like lists).\nSo to set the column names of a data frame just use the names() function. Yes, I know its confusing.\nHere’s a quick summary:\n\n\n\nObject\nSet column names\nSet row names\n\n\n\n\ndata frame\nnames()\nrow.names()\n\n\nmatrix\ncolnames()\nrownames()"
  },
  {
    "objectID": "posts/2022-09-22-control-structures/index.html",
    "href": "posts/2022-09-22-control-structures/index.html",
    "title": "Control Structures",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://rafalab.github.io/dsbook/programming-basics\nhttps://r4ds.had.co.nz/iteration\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-control-structures\nhttps://r4ds.had.co.nz/iteration"
  },
  {
    "objectID": "posts/2022-09-22-control-structures/index.html#if-else",
    "href": "posts/2022-09-22-control-structures/index.html#if-else",
    "title": "Control Structures",
    "section": "if-else",
    "text": "if-else\nThe if-else combination is probably the most commonly used control structure in R (or perhaps any language). This structure allows you to test a condition and act on it depending on whether it’s true or false.\nFor starters, you can just use the if statement.\nif(<condition>) {\n        ## do something\n} \n## Continue with rest of code\nThe above code does nothing if the condition is false. If you have an action you want to execute when the condition is false, then you need an else clause.\nif(<condition>) {\n        ## do something\n} \nelse {\n        ## do something else\n}\nYou can have a series of tests by following the initial if with any number of else ifs.\nif(<condition1>) {\n        ## do something\n} else if(<condition2>)  {\n        ## do something different\n} else {\n        ## do something different\n}\nHere is an example of a valid if/else structure.\nLet’s use the runif(n, min=0, max=1) function which draws a random value between a min and max value with the default being between 0 and 1.\n\nx <- runif(n=1, min=0, max=10)  \nx\n\n[1] 0.1601887\n\n\nThen, we can write and if-else statement that tests whethere x is greater than 3 or not.\n\nx > 3\n\n[1] FALSE\n\n\nIf x is greater than 3, then the first condition occurs. If x is not greater than 3, then the second condition occurs.\n\nif(x > 3) {\n    y <- 10\n  } else {\n    y <- 0\n  }\n\nFinally, we can auto print y to see what the value is.\n\ny\n\n[1] 0\n\n\nThis expression can also be written a different (but equivalent!) way in R.\n\ny <- if(x > 3) {\n    10\n  } else { \n    0\n  }\n\ny\n\n[1] 0\n\n\n\n\n\n\n\n\nNote\n\n\n\nNeither way of writing this expression is more correct than the other.\nWhich one you use will depend on your preference and perhaps those of the team you may be working with.\n\n\nOf course, the else clause is not necessary. You could have a series of if clauses that always get executed if their respective conditions are true.\nif(<condition1>) {\n\n}\n\nif(<condition2>) {\n\n}\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s use the palmerpenguins dataset and write a if-else statement that\n\nRandomly samples a value from a standard normal distribution (Hint: check out the rnorm(n, mean = 0, sd = 1) function in base R).\nIf the value is larger than 0, use dplyr functions to keep only the Chinstrap penguins.\nOtherwise, keep only the Gentoo penguins.\nRe-run the code 10 times and look at output.\n\n\n# try it yourself\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins \n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "posts/2022-09-22-control-structures/index.html#for-loops",
    "href": "posts/2022-09-22-control-structures/index.html#for-loops",
    "title": "Control Structures",
    "section": "for Loops",
    "text": "for Loops\nFor loops are pretty much the only looping construct that you will need in R. While you may occasionally find a need for other types of loops, in my experience doing data analysis, I’ve found very few situations where a for loop was not sufficient.\nIn R, for loops take an iterator variable and assign it successive values from a sequence or vector.\nFor loops are most commonly used for iterating over the elements of an object (list, vector, etc.)\n\nfor(i in 1:10) {\n        print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\nThis loop takes the i variable and in each iteration of the loop gives it values 1, 2, 3, …, 10, then executes the code within the curly braces, and then the loop exits.\nThe following three loops all have the same behavior.\n\n## define the loop to iterate over\nx <- c(\"a\", \"b\", \"c\", \"d\")\n\n## create for loop\nfor(i in 1:4) {\n        ## Print out each element of 'x'\n        print(x[i])  \n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nWe can also print just the iteration value (i) itself\n\n## define the loop to iterate over\nx <- c(\"a\", \"b\", \"c\", \"d\")\n\n## create for loop\nfor(i in 1:4) {\n        ## Print out just 'i'\n        print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n\n\nseq_along()\nThe seq_along() function is commonly used in conjunction with for loops in order to generate an integer sequence based on the length of an object (or ncol() of an R object) (in this case, the object x).\n\nx\n\n[1] \"a\" \"b\" \"c\" \"d\"\n\nseq_along(x)\n\n[1] 1 2 3 4\n\n\nThe seq_along() function takes in a vector and then returns a sequence of integers that is the same length as the input vector. It doesn’t matter what class the vector is.\nLet’s put seq_along() and for loops together.\n\n## Generate a sequence based on length of 'x'\nfor(i in seq_along(x)) {   \n        print(x[i])\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nIt is not necessary to use an index-type variable (i.e. i).\n\nfor(babyshark in x) {\n        print(babyshark)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\nfor(candyisgreat in x) {\n        print(candyisgreat)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\n\nfor(RememberToVote in x) {\n        print(RememberToVote)\n}\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nYou can use any character index you want (but not with symbols or numbers).\n\nfor(1999 in x) {\n        print(1999)\n}\n\nError: <text>:1:5: unexpected numeric constant\n1: for(1999\n        ^\n\n\nFor one line loops, the curly braces are not strictly necessary.\n\nfor(i in 1:4) print(x[i])\n\n[1] \"a\"\n[1] \"b\"\n[1] \"c\"\n[1] \"d\"\n\n\nHowever, I like to use curly braces even for one-line loops, because that way if you decide to expand the loop to multiple lines, you won’t be burned because you forgot to add curly braces (and you will be burned by this).\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s use the palmerpenguins dataset. Here are the tasks:\n\nStart a for loop\nIterate over the columns of penguins\nFor each column, extract the values of that column (Hint: check out the pull() function in dplyr).\nUsing a if-else statement, test whether or not the values in the column are numeric or not (Hint: remember the is.numeric() function to test if a value is numeric).\nIf they are numeric, compute the column mean. Otherwise, report a NA.\n\n\n# try it yourself\n\n\n\n\n\nNested for loops\nfor loops can be nested inside of each other.\n\nx <- matrix(1:6, nrow = 2, ncol = 3)\nx\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\n\nfor(i in seq_len(nrow(x))) {\n        for(j in seq_len(ncol(x))) {\n                print(x[i, j])\n        }   \n}\n\n[1] 1\n[1] 3\n[1] 5\n[1] 2\n[1] 4\n[1] 6\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe j index goes across the columns. That’s why we values 1, 3, etc.\n\n\nNested loops are commonly needed for multidimensional or hierarchical data structures (e.g. matrices, lists). Be careful with nesting though.\nNesting beyond 2 to 3 levels often makes it difficult to read/understand the code.\nIf you find yourself in need of a large number of nested loops, you may want to break up the loops by using functions (discussed later)."
  },
  {
    "objectID": "posts/2022-09-22-control-structures/index.html#while-loops",
    "href": "posts/2022-09-22-control-structures/index.html#while-loops",
    "title": "Control Structures",
    "section": "while Loops",
    "text": "while Loops\nwhile loops begin by testing a condition.\nIf it is true, then they execute the loop body.\nOnce the loop body is executed, the condition is tested again, and so forth, until the condition is false, after which the loop exits.\n\ncount <- 0\nwhile(count < 10) {\n        print(count)\n        count <- count + 1\n}\n\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n\n\nwhile loops can potentially result in infinite loops if not written properly. Use with care!\nSometimes there will be more than one condition in the test.\n\nz <- 5\nset.seed(1)\n\nwhile(z >= 3 && z <= 10) {\n        coin <- rbinom(1, 1, 0.5)\n        \n        if(coin == 1) {  ## random walk\n                z <- z + 1\n        } else {\n                z <- z - 1\n        } \n}\nprint(z)\n\n[1] 2\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nWhat’s the difference between using one & or two && ?\nIf you use only one &, these are vectorized operations, meaning they can return a vector, like this:\n\n-2:2\n\n[1] -2 -1  0  1  2\n\n((-2:2) >= 0) & ((-2:2) <= 0)\n\n[1] FALSE FALSE  TRUE FALSE FALSE\n\n\nIf you use two && (as above), then these conditions are evaluated left to right. For example, in the above code, if z were less than 3, the second test would not have been evaluated.\n\n(2 >= 0) && (-2 <= 0)\n\n[1] TRUE\n\n(-2 >= 0) && (-2 <= 0)\n\n[1] FALSE"
  },
  {
    "objectID": "posts/2022-09-22-control-structures/index.html#repeat-loops",
    "href": "posts/2022-09-22-control-structures/index.html#repeat-loops",
    "title": "Control Structures",
    "section": "repeat Loops",
    "text": "repeat Loops\nrepeat initiates an infinite loop right from the start. These are not commonly used in statistical or data analysis applications, but they do have their uses.\n\n\n\n\n\n\nIMPORTANT (READ THIS AND DON’T FORGET… I’M SERIOUS… YOU WANT TO REMEMBER THIS.. FOR REALZ PLZ REMEMBER THIS)\n\n\n\nThe only way to exit a repeat loop is to call break.\n\n\nOne possible paradigm might be in an iterative algorithm where you may be searching for a solution and you do not want to stop until you are close enough to the solution.\nIn this kind of situation, you often don’t know in advance how many iterations it’s going to take to get “close enough” to the solution.\n\nx0 <- 1\ntol <- 1e-8\n\nrepeat {\n        x1 <- computeEstimate()\n        \n        if(abs(x1 - x0) < tol) {  ## Close enough?\n                break\n        } else {\n                x0 <- x1\n        } \n}\n\n\n\n\n\n\n\nNote\n\n\n\nThe above code will not run if the computeEstimate() function is not defined (I just made it up for the purposes of this demonstration).\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nThe loop above is a bit dangerous because there is no guarantee it will stop.\nYou could get in a situation where the values of x0 and x1 oscillate back and forth and never converge.\nBetter to set a hard limit on the number of iterations by using a for loop and then report whether convergence was achieved or not."
  },
  {
    "objectID": "posts/2022-09-22-control-structures/index.html#next-break",
    "href": "posts/2022-09-22-control-structures/index.html#next-break",
    "title": "Control Structures",
    "section": "next, break",
    "text": "next, break\nnext is used to skip an iteration of a loop.\n\nfor(i in 1:100) {\n        if(i <= 20) {\n                ## Skip the first 20 iterations\n                next                 \n        }\n        ## Do something here\n}\n\nbreak is used to exit a loop immediately, regardless of what iteration the loop may be on.\n\nfor(i in 1:100) {\n      print(i)\n\n      if(i > 20) {\n              ## Stop loop after 20 iterations\n              break  \n      }     \n}"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html",
    "href": "posts/2022-09-22-functions/index.html",
    "title": "Functions",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://r4ds.had.co.nz/functions\nhttps://adv-r.hadley.nz/functions.html?#functions\nhttps://swcarpentry.github.io/r-novice-inflammation/02-func-R\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-functions\nhttps://rdpeng.github.io/Biostat776/lecture-scoping-rules-of-r\nhttps://r4ds.had.co.nz/functions\nhttps://r4ds.had.co.nz/functions.html#environment"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#functions-in-r",
    "href": "posts/2022-09-22-functions/index.html#functions-in-r",
    "title": "Functions",
    "section": "Functions in R",
    "text": "Functions in R\nFunctions in R are “first class objects”, which means that they can be treated much like any other R object.\n\n\n\n\n\n\nImportant facts about R functions\n\n\n\n\nFunctions can be passed as arguments to other functions.\n\nThis is very handy for the various apply functions, like lapply() and sapply().\n\nFunctions can be nested, so that you can define a function inside of another function.\n\n\n\nIf you are familiar with common language like C, these features might appear a bit strange. However, they are really important in R and can be useful for data analysis."
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#your-first-function",
    "href": "posts/2022-09-22-functions/index.html#your-first-function",
    "title": "Functions",
    "section": "Your First Function",
    "text": "Your First Function\nFunctions are defined using the function() directive and are stored as R objects just like anything else.\n\n\n\n\n\n\nImportant\n\n\n\nIn particular, functions are R objects of class function.\nHere’s a simple function that takes no arguments and does nothing.\n\nf <- function() {\n        ## This is an empty function\n}\n## Functions have their own class\nclass(f)  \n\n[1] \"function\"\n\n## Execute this function\nf()       \n\nNULL\n\n\n\n\nNot very interesting, but it is a start!\nThe next thing we can do is create a function that actually has a non-trivial function body.\n\nf <- function() {\n        # this is the function body\n        hello <- \"Hello, world!\\n\"\n        cat(hello) \n}\nf()\n\nHello, world!\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\ncat() is useful and preferable to print() in several settings. One reason is that it doesn’t output new lines (i.e. \\n).\n\nhello <- \"Hello, world!\\n\"\n\nprint(hello)\n\n[1] \"Hello, world!\\n\"\n\ncat(hello)\n\nHello, world!\n\n\n\n\nThe last aspect of a basic function is the function arguments.\nThese are the options that you can specify to the user that the user may explicitly set.\nFor this basic function, we can add an argument that determines how many times “Hello, world!” is printed to the console.\n\nf <- function(num) {\n        for(i in seq_len(num)) {\n                hello <- \"Hello, world!\\n\"\n                cat(hello) \n        }\n}\nf(3)\n\nHello, world!\nHello, world!\nHello, world!\n\n\nObviously, we could have just cut-and-pasted the cat(\"Hello, world!\\n\") code three times to achieve the same effect, but then we wouldn’t be programming, would we?\nAlso, it would be un-neighborly of you to give your code to someone else and force them to cut-and-paste the code however many times the need to see “Hello, world!”.\n\n\n\n\n\n\nPro-tip\n\n\n\nIf you find yourself doing a lot of cutting and pasting, that’s usually a good sign that you might need to write a function.\n\n\nFinally, the function above doesn’t return anything.\nIt just prints “Hello, world!” to the console num number of times and then exits.\nBut often it is useful if a function returns something that perhaps can be fed into another section of code.\nThis next function returns the total number of characters printed to the console.\n\nf <- function(num) {\n        hello <- \"Hello, world!\\n\"\n        for(i in seq_len(num)) {\n                 cat(hello)\n        }\n        chars <- nchar(hello) * num\n        chars\n}\nmeaningoflife <- f(3)\n\nHello, world!\nHello, world!\nHello, world!\n\nprint(meaningoflife)\n\n[1] 42\n\n\nIn the above function, we did not have to indicate anything special in order for the function to return the number of characters.\nIn R, the return value of a function is always the very last expression that is evaluated.\nBecause the chars variable is the last expression that is evaluated in this function, that becomes the return value of the function.\n\n\n\n\n\n\nNote\n\n\n\nThere is a return() function that can be used to return an explicitly value from a function, but it is rarely used in R (we will discuss it a bit later in this lesson).\n\n\nFinally, in the above function, the user must specify the value of the argument num. If it is not specified by the user, R will throw an error.\n\nf()\n\nError in f(): argument \"num\" is missing, with no default\n\n\nWe can modify this behavior by setting a default value for the argument num.\nAny function argument can have a default value, if you wish to specify it.\nSometimes, argument values are rarely modified (except in special cases) and it makes sense to set a default value for that argument. This relieves the user from having to specify the value of that argument every single time the function is called.\nHere, for example, we could set the default value for num to be 1, so that if the function is called without the num argument being explicitly specified, then it will print “Hello, world!” to the console once.\n\nf <- function(num = 1) {\n        hello <- \"Hello, world!\\n\"\n        for(i in seq_len(num)) {\n                cat(hello)\n        }\n        chars <- nchar(hello) * num\n        chars\n}\n\n\nf()    ## Use default value for 'num'\n\nHello, world!\n\n\n[1] 14\n\nf(2)   ## Use user-specified value\n\nHello, world!\nHello, world!\n\n\n[1] 28\n\n\nRemember that the function still returns the number of characters printed to the console.\n\n\n\n\n\n\nPro-tip\n\n\n\nThe formals() function returns a list of all the formal arguments of a function\n\nformals(f)\n\n$num\n[1] 1"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#summary",
    "href": "posts/2022-09-22-functions/index.html#summary",
    "title": "Functions",
    "section": "Summary",
    "text": "Summary\nWe have written a function that\n\nhas one formal argument named num with a default value of 1. The formal arguments are the arguments included in the function definition.\nprints the message “Hello, world!” to the console a number of times indicated by the argument num\nreturns the number of characters printed to the console"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#named-arguments",
    "href": "posts/2022-09-22-functions/index.html#named-arguments",
    "title": "Functions",
    "section": "Named arguments",
    "text": "Named arguments\nAbove, we have learned that functions have named arguments, which can optionally have default values.\nBecause all function arguments have names, they can be specified using their name.\n\nf(num = 2)\n\nHello, world!\nHello, world!\n\n\n[1] 28\n\n\nSpecifying an argument by its name is sometimes useful if a function has many arguments and it may not always be clear which argument is being specified.\nHere, our function only has one argument so there’s no confusion."
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#argument-matching",
    "href": "posts/2022-09-22-functions/index.html#argument-matching",
    "title": "Functions",
    "section": "Argument matching",
    "text": "Argument matching\nCalling an R function with multiple arguments can be done in a variety of ways.\nThis may be confusing at first, but it’s really handy when doing interactive work at the command line. R functions arguments can be matched positionally or by name.\n\nPositional matching just means that R assigns the first value to the first argument, the second value to second argument, etc.\n\nSo, in the following call to rnorm()\n\nstr(rnorm)\n\nfunction (n, mean = 0, sd = 1)  \n\nmydata <- rnorm(100, 2, 1)              ## Generate some data\n\n100 is assigned to the n argument, 2 is assigned to the mean argument, and 1 is assigned to the sd argument, all by positional matching.\nThe following calls to the sd() function (which computes the empirical standard deviation of a vector of numbers) are all equivalent.\n\n\n\n\n\n\nNote\n\n\n\nsd(x, na.rm = FALSE) has two arguments:\n\nx indicates the vector of numbers\nna.rm is a logical indicating whether missing values should be removed or not (default is FALSE)\n\n\n## Positional match first argument, default for 'na.rm'\nsd(mydata)                     \n\n[1] 1.059718\n\n## Specify 'x' argument by name, default for 'na.rm'\nsd(x = mydata)                 \n\n[1] 1.059718\n\n## Specify both arguments by name\nsd(x = mydata, na.rm = FALSE) \n\n[1] 1.059718\n\n\n\n\nWhen specifying the function arguments by name, it doesn’t matter in what order you specify them.\nIn the example below, we specify the na.rm argument first, followed by x, even though x is the first argument defined in the function definition.\n\n## Specify both arguments by name\nsd(na.rm = FALSE, x = mydata)     \n\n[1] 1.059718\n\n\nYou can mix positional matching with matching by name.\nWhen an argument is matched by name, it is “taken out” of the argument list and the remaining unnamed arguments are matched in the order that they are listed in the function definition.\n\nsd(na.rm = FALSE, mydata)\n\n[1] 1.059718\n\n\nHere, the mydata object is assigned to the x argument, because it’s the only argument not yet specified.\n\n\n\n\n\n\nPro-tip\n\n\n\nThe args() function displays the argument names and corresponding default values of a function\n\nargs(f)\n\nfunction (num = 1) \nNULL\n\n\n\n\nBelow is the argument list for the lm() function, which fits linear models to a dataset.\n\nargs(lm)\n\nfunction (formula, data, subset, weights, na.action, method = \"qr\", \n    model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n    contrasts = NULL, offset, ...) \nNULL\n\n\nThe following two calls are equivalent.\nlm(data = mydata, y ~ x, model = FALSE, 1:100)\nlm(y ~ x, mydata, 1:100, model = FALSE)\n\n\n\n\n\n\nPro-tip\n\n\n\nEven though it’s legal, I don’t recommend messing around with the order of the arguments too much, since it can lead to some confusion.\n\n\nMost of the time, named arguments are helpful:\n\nOn the command line when you have a long argument list and you want to use the defaults for everything except for an argument near the end of the list\nIf you can remember the name of the argument and not its position on the argument list\n\nFor example, plotting functions often have a lot of options to allow for customization, but this makes it difficult to remember exactly the position of every argument on the argument list.\nFunction arguments can also be partially matched, which is useful for interactive work.\n\n\n\n\n\n\nPro-tip\n\n\n\nThe order of operations when given an argument is\n\nCheck for exact match for a named argument\nCheck for a partial match\nCheck for a positional match\n\n\n\nPartial matching should be avoided when writing longer code or programs, because it may lead to confusion if someone is reading the code. However, partial matching is very useful when calling functions interactively that have very long argument names."
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#lazy-evaluation",
    "href": "posts/2022-09-22-functions/index.html#lazy-evaluation",
    "title": "Functions",
    "section": "Lazy Evaluation",
    "text": "Lazy Evaluation\nArguments to functions are evaluated lazily, so they are evaluated only as needed in the body of the function.\nIn this example, the function f() has two arguments: a and b.\n\nf <- function(a, b) {\n        a^2\n} \nf(2)\n\n[1] 4\n\n\nThis function never actually uses the argument b, so calling f(2) will not produce an error because the 2 gets positionally matched to a.\nThis behavior can be good or bad. It’s common to write a function that doesn’t use an argument and not notice it simply because R never throws an error.\nThis example also shows lazy evaluation at work, but does eventually result in an error.\n\nf <- function(a, b) {\n        print(a)\n        print(b)\n}\nf(45)\n\n[1] 45\n\n\nError in print(b): argument \"b\" is missing, with no default\n\n\nNotice that “45” got printed first before the error was triggered! This is because b did not have to be evaluated until after print(a).\nOnce the function tried to evaluate print(b) the function had to throw an error."
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#the-...-argument",
    "href": "posts/2022-09-22-functions/index.html#the-...-argument",
    "title": "Functions",
    "section": "The ... Argument",
    "text": "The ... Argument\nThere is a special argument in R known as the ... argument, which indicates a variable number of arguments that are usually passed on to other functions.\nThe ... argument is often used when extending another function and you do not want to copy the entire argument list of the original function\nFor example, a custom plotting function may want to make use of the default plot() function along with its entire argument list. The function below changes the default for the type argument to the value type = \"l\" (the original default was type = \"p\").\nmyplot <- function(x, y, type = \"l\", ...) {\n        plot(x, y, type = type, ...)    ## Pass '...' to 'plot' function\n}\nGeneric functions use ... so that extra arguments can be passed to methods.\n\nmean\n\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x13a05d430>\n<environment: namespace:base>\n\n\nThe ... argument is necessary when the number of arguments passed to the function cannot be known in advance. This is clear in functions like paste() and cat().\n\npaste(\"one\", \"two\", \"three\")\n\n[1] \"one two three\"\n\npaste(\"one\", \"two\", \"three\", \"four\", \"five\", sep=\"_\")\n\n[1] \"one_two_three_four_five\"\n\n\n\nargs(paste)\n\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n\n\nBecause paste() prints out text to the console by combining multiple character vectors together, it is impossible for this function to know in advance how many character vectors will be passed to the function by the user.\nSo the first argument in the function is ...."
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#arguments-coming-after-the-...-argument",
    "href": "posts/2022-09-22-functions/index.html#arguments-coming-after-the-...-argument",
    "title": "Functions",
    "section": "Arguments Coming After the ... Argument",
    "text": "Arguments Coming After the ... Argument\nOne catch with ... is that any arguments that appear after ... on the argument list must be named explicitly and cannot be partially matched or matched positionally.\nTake a look at the arguments to the paste() function.\n\nargs(paste)\n\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n\n\nWith the paste() function, the arguments sep and collapse must be named explicitly and in full if the default values are not going to be used.\nHere, I specify that I want “a” and “b” to be pasted together and separated by a colon.\n\npaste(\"a\", \"b\", sep = \":\")\n\n[1] \"a:b\"\n\n\nIf I don’t specify the sep argument in full and attempt to rely on partial matching, I don’t get the expected result.\n\npaste(\"a\", \"b\", se = \":\")\n\n[1] \"a b :\""
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#the-name-of-a-function-is-important",
    "href": "posts/2022-09-22-functions/index.html#the-name-of-a-function-is-important",
    "title": "Functions",
    "section": "The name of a function is important",
    "text": "The name of a function is important\nIn an ideal world, you want the name of your function to be short but clearly describe what the function does. This is not always easy, but here are some tips.\nThe function names should be verbs, and arguments should be nouns.\nThere are some exceptions:\n\nnouns are ok if the function computes a very well known noun (i.e. mean() is better than compute_mean()).\nA good sign that a noun might be a better choice is if you are using a very broad verb like “get”, “compute”, “calculate”, or “determine”. Use your best judgement and do not be afraid to rename a function if you figure out a better name later.\n\n\n# Too short\nf()\n\n# Not a verb, or descriptive\nmy_awesome_function()\n\n# Long, but clear\nimpute_missing()\ncollapse_years()"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#snake_case-vs-camelcase",
    "href": "posts/2022-09-22-functions/index.html#snake_case-vs-camelcase",
    "title": "Functions",
    "section": "snake_case vs camelCase",
    "text": "snake_case vs camelCase\nIf your function name is composed of multiple words, use “snake_case”, where each lowercase word is separated by an underscore.\n“camelCase” is a popular alternative. It does not really matter which one you pick, the important thing is to be consistent: pick one or the other and stick with it.\nR itself is not very consistent, but there is nothing you can do about that. Make sure you do not fall into the same trap by making your code as consistent as possible.\n\n# Never do this!\ncol_mins <- function(x, y) {}\nrowMaxes <- function(x, y) {}"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#use-a-common-prefix",
    "href": "posts/2022-09-22-functions/index.html#use-a-common-prefix",
    "title": "Functions",
    "section": "Use a common prefix",
    "text": "Use a common prefix\nIf you have a family of functions that do similar things, make sure they have consistent names and arguments.\nIt’s a good idea to indicate that they are connected. That is better than a common suffix because autocomplete allows you to type the prefix and see all the members of the family.\n\n# Good\ninput_select()\ninput_checkbox()\ninput_text()\n\n# Not so good\nselect_input()\ncheckbox_input()\ntext_input()"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#avoid-overriding-exisiting-functions",
    "href": "posts/2022-09-22-functions/index.html#avoid-overriding-exisiting-functions",
    "title": "Functions",
    "section": "Avoid overriding exisiting functions",
    "text": "Avoid overriding exisiting functions\nWhere possible, avoid overriding existing functions and variables.\nIt is impossible to do in general because so many good names are already taken by other packages, but avoiding the most common names from base R will avoid confusion.\n\n# Don't do this!\nT <- FALSE\nc <- 10\nmean <- function(x) sum(x)"
  },
  {
    "objectID": "posts/2022-09-22-functions/index.html#use-comments",
    "href": "posts/2022-09-22-functions/index.html#use-comments",
    "title": "Functions",
    "section": "Use comments",
    "text": "Use comments\nUse comments are lines starting with #. They can explain the “why” of your code.\nYou generally should avoid comments that explain the “what” or the “how”. If you can’t understand what the code does from reading it, you should think about how to rewrite it to be more clear.\n\nDo you need to add some intermediate variables with useful names?\nDo you need to break out a subcomponent of a large function so you can name it?\n\nHowever, your code can never capture the reasoning behind your decisions:\n\nWhy did you choose this approach instead of an alternative?\nWhat else did you try that didn’t work?\n\nIt’s a great idea to capture that sort of thinking in a comment."
  },
  {
    "objectID": "posts/2022-08-30-introduction-to-gitgithub/index.html",
    "href": "posts/2022-08-30-introduction-to-gitgithub/index.html",
    "title": "Introduction to git/GitHub",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nHappy Git with R from Jenny Bryan\nChapter on git and GitHub in dsbook from Rafael Irizarry\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://andreashandel.github.io/MADAcourse"
  },
  {
    "objectID": "posts/2022-08-30-introduction-to-gitgithub/index.html#rtistry",
    "href": "posts/2022-08-30-introduction-to-gitgithub/index.html#rtistry",
    "title": "Introduction to git/GitHub",
    "section": "rtistry",
    "text": "rtistry\n\n\n\n\n\n[‘Flametree’ from Danielle Navarro https://art.djnavarro.net]"
  },
  {
    "objectID": "posts/2022-09-13-plotting-systems/index.html",
    "href": "posts/2022-09-13-plotting-systems/index.html",
    "title": "Plotting Systems",
    "section": "",
    "text": "The data may not contain the answer. And, if you torture the data long enough, it will tell you anything. —John W. Tukey"
  },
  {
    "objectID": "posts/2022-09-13-plotting-systems/index.html#the-base-plotting-system",
    "href": "posts/2022-09-13-plotting-systems/index.html#the-base-plotting-system",
    "title": "Plotting Systems",
    "section": "The Base Plotting System",
    "text": "The Base Plotting System\nThe base plotting system is the original plotting system for R. The basic model is sometimes referred to as the “artist’s palette” model.\nThe idea is you start with blank canvas and build up from there.\nIn more R-specific terms, you typically start with plot() function (or similar plot creating function) to initiate a plot and then annotate the plot with various annotation functions (text, lines, points, axis)\nThe base plotting system is often the most convenient plotting system to use because it mirrors how we sometimes think of building plots and analyzing data.\nIf we do not have a completely well-formed idea of how we want to look at some data, often we will start by “throwing some data on the page” and then slowly add more information to it as our thought process evolves.\n\n\n\n\n\n\nExample\n\n\n\nWe might look at a simple scatterplot and then decide to add a linear regression line or a smoother to it to highlight the trends.\n\ndata(airquality)\nwith(airquality, {\n        plot(Temp, Ozone)\n        lines(loess.smooth(Temp, Ozone))\n})\n\n\n\n\nScatterplot with loess curve\n\n\n\n\n\n\nIn the code above:\n\nThe plot() function creates the initial plot and draws the points (circles) on the canvas.\nThe lines function is used to annotate or add to the plot (in this case it adds a loess smoother to the scatterplot).\n\nNext, we use the plot() function to draw the points on the scatterplot and then use the main argument to add a main title to the plot.\n\ndata(airquality)\nwith(airquality, {\n        plot(Temp, Ozone, main = \"my plot\")\n        lines(loess.smooth(Temp, Ozone))\n})\n\n\n\n\nScatterplot with loess curve\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOne downside with constructing base plots is that you cannot go backwards once the plot has started.\nIt is possible that you could start down the road of constructing a plot and realize later (when it is too late) that you do not have enough room to add a y-axis label or something like that\n\n\nIf you have specific plot in mind, there is then a need to plan in advance to make sure, for example, that you have set your margins to be the right size to fit all of the annotations that you may want to include.\nWhile the base plotting system is nice in that it gives you the flexibility to specify these kinds of details to painstaking accuracy, sometimes it would be nice if the system could just figure it out for you.\n\n\n\n\n\n\nNote\n\n\n\nAnother downside of the base plotting system is that it is difficult to describe or translate a plot to others because there is no clear graphical language or grammar that can be used to communicate what you have done.\nThe only real way to describe what you have done in a base plot is to just list the series of commands/functions that you have executed, which is not a particularly compact way of communicating things.\nThis is one problem that the ggplot2 package attempts to address.\n\n\n\n\n\n\n\n\nExample\n\n\n\nAnother typical base plot is constructed with the following code.\n\ndata(cars)\n\n## Create the plot / draw canvas\nwith(cars, plot(speed, dist))\n\n## Add annotation\ntitle(\"Speed vs. Stopping distance\")\n\n\n\n\nBase plot with title\n\n\n\n\n\n\nWe will go into more detail on what these functions do in later lessons."
  },
  {
    "objectID": "posts/2022-09-13-plotting-systems/index.html#the-lattice-system",
    "href": "posts/2022-09-13-plotting-systems/index.html#the-lattice-system",
    "title": "Plotting Systems",
    "section": "The Lattice System",
    "text": "The Lattice System\nThe lattice plotting system is implemented in the lattice R package which comes with every installation of R (although it is not loaded by default).\nTo use the lattice plotting functions, you must first load the lattice package with the library function.\n\nlibrary(lattice)\n\nWith the lattice system, plots are created with a single function call, such as xyplot() or bwplot().\nThere is no real distinction between functions that create or initiate plots and functions that annotate plots because it all happens at once.\nLattice plots tend to be most useful for conditioning types of plots, i.e. looking at how y changes with x across levels of z.\n\ne.g. these types of plots are useful for looking at multi-dimensional data and often allow you to squeeze a lot of information into a single window or page.\n\nAnother aspect of lattice that makes it different from base plotting is that things like margins and spacing are set automatically.\nThis is possible because entire plot is specified at once via a single function call, so all of the available information needed to figure out the spacing and margins is already there.\n\n\n\n\n\n\nExample\n\n\n\nHere is a lattice plot that looks at the relationship between life expectancy and income and how that relationship varies by region in the United States.\n\nstate <- data.frame(state.x77, region = state.region)\nxyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))\n\n\n\n\nLattice plot\n\n\n\n\n\n\nYou can see that the entire plot was generated by the call to xyplot() and all of the data for the plot were stored in the state data frame.\nThe plot itself contains four panels—one for each region—and within each panel is a scatterplot of life expectancy and income.\nThe notion of panels comes up a lot with lattice plots because you typically have many panels in a lattice plot (each panel typically represents a condition, like “region”).\n\n\n\n\n\n\nNote\n\n\n\nDownsides with the lattice system\n\nIt can sometimes be very awkward to specify an entire plot in a single function call (you end up with functions with many many arguments).\nAnnotation in panels in plots is not especially intuitive and can be difficult to explain. In particular, the use of custom panel functions and subscripts can be difficult to wield and requires intense preparation.\nOnce a plot is created, you cannot “add” to the plot (but of course you can just make it again with modifications)."
  },
  {
    "objectID": "posts/2022-09-13-plotting-systems/index.html#the-ggplot2-system",
    "href": "posts/2022-09-13-plotting-systems/index.html#the-ggplot2-system",
    "title": "Plotting Systems",
    "section": "The ggplot2 System",
    "text": "The ggplot2 System\nThe ggplot2 plotting system attempts to split the difference between base and lattice in a number of ways.\n\n\n\n\n\n\nNote\n\n\n\nTaking cues from lattice, the ggplot2 system automatically deals with spacings, text, titles but also allows you to annotate by “adding” to a plot.\n\n\nThe ggplot2 system is implemented in the ggplot2 package (part of the tidyverse package), which is available from CRAN (it does not come with R).\nYou can install it from CRAN via\n\ninstall.packages(\"ggplot2\")\n\nand then load it into R via the library() function.\n\nlibrary(ggplot2)\n\nSuperficially, the ggplot2 functions are similar to lattice, but the system is generally easier and more intuitive to use.\nThe defaults used in ggplot2 make many choices for you, but you can still customize plots to your heart’s desire.\n\n\n\n\n\n\nExample\n\n\n\nA typical plot with the ggplot2 package looks as follows.\n\nlibrary(tidyverse)\ndata(mpg)\nmpg %>%\n  ggplot(aes(displ, hwy)) + \n  geom_point()\n\n\n\n\nggplot2 plot\n\n\n\n\n\n\nThere are additional functions in ggplot2 that allow you to make arbitrarily sophisticated plots.\nWe will discuss more about this in the next lecture."
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html",
    "href": "posts/2022-10-11-working-with-factors/index.html",
    "title": "Factors",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nWrangling Categorical Data in R by Amelia McNamara, Nicholas J Horton\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nWrangling Categorical Data in R by Amelia McNamara, Nicholas J Horton\nhttps://r4ds.had.co.nz/factors"
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#factor-basics",
    "href": "posts/2022-10-11-working-with-factors/index.html#factor-basics",
    "title": "Factors",
    "section": "Factor basics",
    "text": "Factor basics\nYou can fix both of these problems with a factor.\nTo create a factor you must start by creating a list of the valid levels:\n\nmonth_levels <- c(\n  \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n)\n\nNow you can create a factor:\n\ny1 <- factor(x1, levels = month_levels)\ny1\n\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nsort(y1)\n\n[1] Jan Mar Apr Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nattributes(y1)\n\n$levels\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n$class\n[1] \"factor\"\n\n\nAnd any values not in the level will be silently converted to NA:\n\ny2 <- factor(x2, levels = month_levels)\ny2\n\n[1] Dec  Apr  <NA> Mar \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\n\nIf you want to access the set of levels directly, you can do so with levels():\n\nlevels(y2)\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\""
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#challenges-working-with-categorical-data",
    "href": "posts/2022-10-11-working-with-factors/index.html#challenges-working-with-categorical-data",
    "title": "Factors",
    "section": "Challenges working with categorical data",
    "text": "Challenges working with categorical data\nWorking with categorical data can often be challenging. For example,\n\nWhat if the original data source for where the categorical data is getting ingested changes? If a domain expert is providing spreadsheet data at regular intervals, code that worked on the initial data may not generate an error message, but could silently produce incorrect results.\nWhat if a new level of a categorical data is added in an updated dataset?\nIf the categorical data coded with numerical values, it can be easy to break the relationship between category numbers and category labels without realizing it, thus losing the information encoded in a variable.\n\n\n\n\n\n\n\nExample\n\n\n\nConsider a set of decades,\n\nlibrary(tidyverse)\n\nx1_original <- c(10, 10, 20, 20, 40)\nx1_factor <- factor(x1_original)\nattributes(x1_factor)\n\n$levels\n[1] \"10\" \"20\" \"40\"\n\n$class\n[1] \"factor\"\n\ntibble(x1_original, x1_factor) %>% \n  mutate(x1_numeric = as.numeric(x1_factor))\n\n# A tibble: 5 × 3\n  x1_original x1_factor x1_numeric\n        <dbl> <fct>          <dbl>\n1          10 10                 1\n2          10 10                 1\n3          20 20                 2\n4          20 20                 2\n5          40 40                 3\n\n\nInstead of creating a new variable with a numeric version of the value of the factor variable x1_factor, the variable is created with a factor number (i.e., 10 is mapped to 1, 20 is mapped to 2, and 40 is mapped to 3).\n\n\nThis result is unexpected because base::as.numeric() is intended to recover numeric information by coercing a character variable.\n\n\n\n\n\n\nExample\n\n\n\nCompare the following:\n\nas.numeric(c(\"hello\"))\n\nWarning: NAs introduced by coercion\n\n\n[1] NA\n\nas.numeric(factor(c(\"hello\")))\n\n[1] 1\n\n\nIn the first example, R does not how to convert the character string to a numeric, but in the second example, it creates factor numbers and orders them according to an alphabetical order:\n\nas.numeric(factor(c(\"hello\", \"goodbye\")))\n\n[1] 2 1\n\n\n\n\nThis behavior of the factor() function feels unexpected.\nAnother example is how the function will silently make a missing value because the values in the data and the levels do not match.\n\nfactor(\"a\", levels=\"c\")\n\n[1] <NA>\nLevels: c\n\n\nThe unfortunate behavior of factors in R has led to an online movement against the default behavior of many data import functions to make factors out of any variable composed as strings.\nThe tidyverse is part of this movement, with functions from the readr package defaulting to leaving strings as-is. (Others have chosen to add options(stringAsFactors=FALSE) into their start up commands.)"
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#factors-when-modeling-data",
    "href": "posts/2022-10-11-working-with-factors/index.html#factors-when-modeling-data",
    "title": "Factors",
    "section": "Factors when modeling data",
    "text": "Factors when modeling data\nFactors are still necessary for some data analytic tasks. The most salient case is in modeling.\nWhen you pass a factor variable into lm() or glm(), R automatically creates indicator (or more colloquially ‘dummy’) variables for each of the levels and picks one as a reference group.\nFor simple cases, this behavior can also be achieved with a character vector. However, to choose which level to use as a reference level or to order classes, factors must be used.\n\n\n\n\n\n\nExample\n\n\n\nConsider a vector of character strings with three income levels:\n\nincome_level <- c(rep(\"low\",10), \n                  rep(\"medium\",10), \n                  rep(\"high\",10))\nincome_level\n\n [1] \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"    \"low\"   \n [9] \"low\"    \"low\"    \"medium\" \"medium\" \"medium\" \"medium\" \"medium\" \"medium\"\n[17] \"medium\" \"medium\" \"medium\" \"medium\" \"high\"   \"high\"   \"high\"   \"high\"  \n[25] \"high\"   \"high\"   \"high\"   \"high\"   \"high\"   \"high\"  \n\n\nHere, it might make sense to use the lowest income level (low) as the reference class so that all the other coefficients can be interpreted in comparison to it.\nHowever, R would use high as the reference by default because ‘h’ comes before ‘l’ in the alphabet.\n\nx <- factor(income_level)\nx\n\n [1] low    low    low    low    low    low    low    low    low    low   \n[11] medium medium medium medium medium medium medium medium medium medium\n[21] high   high   high   high   high   high   high   high   high   high  \nLevels: high low medium\n\ny <- rnorm(30)\nlm(y ~ x)\n\n\nCall:\nlm(formula = y ~ x)\n\nCoefficients:\n(Intercept)         xlow      xmedium  \n    0.04280     -0.33189     -0.08482"
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#factors-are-more-memory-efficient-than-character-strings",
    "href": "posts/2022-10-11-working-with-factors/index.html#factors-are-more-memory-efficient-than-character-strings",
    "title": "Factors",
    "section": "Factors are more memory-efficient than character strings",
    "text": "Factors are more memory-efficient than character strings\nConsider a large character string such as income_level corresponding to a categorical variable.\n\nlibrary(pryr)\n\n\nAttaching package: 'pryr'\n\n\nThe following objects are masked from 'package:purrr':\n\n    compose, partial\n\nincome_level <- c(rep(\"low\",10000), \n                  rep(\"medium\",10000), \n                  rep(\"high\",10000))\n\nobject_size(income_level) # computes the size of the character string\n\n240.22 kB\n\nobject_size(factor(income_level)) # computes the size of the factor\n\n120.63 kB\n\n\nIn early versions of R, storing categorical data as a factor variable was considerably more efficient than storing the same data as strings, because factor variables only store the factor labels once.\nHowever, R now uses a global string pool, so each unique string is only stored once, which means storage is now less of an issue."
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#general-social-survey",
    "href": "posts/2022-10-11-working-with-factors/index.html#general-social-survey",
    "title": "Factors",
    "section": "General Social Survey",
    "text": "General Social Survey\nFor the rest of this chapter, we’re going to use the forcats::gss_cat dataset. It’s a sample of data from the General Social Survey, a long-running US survey conducted by the independent research organization NORC at the University of Chicago. The survey has thousands of questions, so in gss_cat.\nI have selected a handful that will illustrate some common challenges you will encounter when working with factors.\n\ngss_cat\n\n# A tibble: 21,483 × 9\n    year marital         age race  rincome        partyid    relig denom tvhours\n   <int> <fct>         <int> <fct> <fct>          <fct>      <fct> <fct>   <int>\n 1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12\n 2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA\n 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n 4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4\n 5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1\n 6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA\n 7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3\n 8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA\n 9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0\n10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3\n# … with 21,473 more rows\n\n\n(Remember, since this dataset is provided by a package, you can get more information about the variables with ?gss_cat.)\nWhen factors are stored in a tibble, you cannot see their levels so easily. One way to view them is with count():\n\ngss_cat %>% \n  count(race)\n\n# A tibble: 3 × 2\n  race      n\n  <fct> <int>\n1 Other  1959\n2 Black  3129\n3 White 16395\n\n\nOr with a bar chart:\n\nggplot(gss_cat, aes(race)) +\n  geom_bar()\n\n\n\n\nWhen working with factors, the two most common operations are changing the order of the levels, and changing the values of the levels. Those operations are described in the sections below."
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#modifying-factor-order",
    "href": "posts/2022-10-11-working-with-factors/index.html#modifying-factor-order",
    "title": "Factors",
    "section": "Modifying factor order",
    "text": "Modifying factor order\nIt’s often useful to change the order of the factor levels in a visualization.\nFor example, imagine you want to explore the average number of hours spent watching TV per day across religions:\n\nrelig_summary <- gss_cat %>% \n  group_by(relig) %>% \n  summarise(age = mean(age, na.rm = TRUE),\n            tvhours = mean(tvhours, na.rm = TRUE),\n            n = n())\n\nggplot(relig_summary, aes(tvhours, relig)) + \n  geom_point()\n\n\n\n\nIt is hard to read this plot because there’s no overall pattern.\nWe can improve it by reordering the levels of relig using fct_reorder(). fct_reorder(f, x, fun) takes three arguments:\n\nf, the factor whose levels you want to modify.\nx, a numeric vector that you want to use to reorder the levels.\nOptionally, fun, a function that’s used if there are multiple values of x for each value of f. The default value is median.\n\n\nrelig_summary %>% \n  ggplot(aes(tvhours, fct_reorder(relig, tvhours))) +\n    geom_point()\n\n\n\n\nReordering religion makes it much easier to see that people in the “Don’t know” category watch much more TV, and Hinduism & Other Eastern religions watch much less.\nAs you start making more complicated transformations, we recommend moving them out of aes() and into a separate mutate() step. For example, you could rewrite the plot above as:\n\nrelig_summary %>% \n  mutate(relig = fct_reorder(relig, tvhours)) %>% \n  ggplot(aes(tvhours, relig)) +\n    geom_point()\n\nWhat if we create a similar plot looking at how average age varies across reported income level?\n\nrincome_summary <- \n  gss_cat %>% \n  group_by(rincome) %>% \n  summarise(age = mean(age, na.rm = TRUE),\n            tvhours = mean(tvhours, na.rm = TRUE),\n            n = n())\n\nrincome_summary %>% \n  ggplot(aes(age, fct_reorder(rincome, age))) + \n    geom_point()\n\n\n\n\nHere, arbitrarily reordering the levels isn’t a good idea! That’s because rincome already has a principled order that we shouldn’t mess with.\nReserve fct_reorder() for factors whose levels are arbitrarily ordered.\nHowever, it does make sense to pull “Not applicable” to the front with the other special levels.\nYou can use fct_relevel().\nIt takes a factor, f, and then any number of levels that you want to move to the front of the line.\n\nrincome_summary %>% \n  ggplot(aes(age, fct_relevel(rincome, \"Not applicable\"))) +\n    geom_point()\n\n\n\n\nWhy do you think the average age for “Not applicable” is so high?\nAnother type of reordering is useful when you are coloring the lines on a plot. fct_reorder2(f, x, y) reorders the factor f by the y values associated with the largest x values.\nThis makes the plot easier to read because the colors of the line at the far right of the plot will line up with the legend.\n\nby_age <- \n  gss_cat %>% \n  filter(!is.na(age)) %>% \n  count(age, marital) %>% \n  group_by(age) %>% \n  mutate(prop = n / sum(n))\n\nby_age %>% \n  ggplot(aes(age, prop, colour = marital)) +\n    geom_line(na.rm = TRUE)\nby_age %>% \n  ggplot(aes(age, prop, colour = fct_reorder2(marital, age, prop))) +\n    geom_line() +\n  labs(colour = \"marital\")\n\n\n\n\n\n\n\n\n\n\n\nFinally, for bar plots, you can use fct_infreq() to order levels in decreasing frequency: this is the simplest type of reordering because it doesn’t need any extra variables. Combine it with fct_rev() if you want them in increasing frequency so that in the bar plot largest values are on the right, not the left.\n\ngss_cat %>% \n  mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%  \n  ggplot(aes(marital)) +\n    geom_bar()"
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#modifying-factor-levels",
    "href": "posts/2022-10-11-working-with-factors/index.html#modifying-factor-levels",
    "title": "Factors",
    "section": "Modifying factor levels",
    "text": "Modifying factor levels\nMore powerful than changing the orders of the levels is changing their values. This allows you to clarify labels for publication, and collapse levels for high-level displays.\nThe most general and powerful tool is fct_recode(). It allows you to recode, or change, the value of each level. For example, take the gss_cat$partyid:\n\ngss_cat %>% \n  count(partyid)\n\n# A tibble: 10 × 2\n   partyid                n\n   <fct>              <int>\n 1 No answer            154\n 2 Don't know             1\n 3 Other party          393\n 4 Strong republican   2314\n 5 Not str republican  3032\n 6 Ind,near rep        1791\n 7 Independent         4119\n 8 Ind,near dem        2499\n 9 Not str democrat    3690\n10 Strong democrat     3490\n\n\nThe levels are terse and inconsistent. Let’s tweak them to be longer and use a parallel construction. Like most rename and recoding functions in the tidyverse, the new values go on the left and the old values go on the right:\n\ngss_cat %>% \n  mutate(partyid = fct_recode(partyid,\n      \"Republican, strong\"    = \"Strong republican\",\n      \"Republican, weak\"      = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\"        = \"Not str democrat\",\n      \"Democrat, strong\"      = \"Strong democrat\")) %>% \n  count(partyid)\n\n# A tibble: 10 × 2\n   partyid                   n\n   <fct>                 <int>\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Republican, strong     2314\n 5 Republican, weak       3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Democrat, weak         3690\n10 Democrat, strong       3490\n\n\nfct_recode() will leave the levels that aren’t explicitly mentioned as is, and will warn you if you accidentally refer to a level that doesn’t exist.\nTo combine groups, you can assign multiple old levels to the same new level:\n\ngss_cat %>% \n  mutate(partyid = fct_recode(partyid,\n      \"Republican, strong\"    = \"Strong republican\",\n      \"Republican, weak\"      = \"Not str republican\",\n      \"Independent, near rep\" = \"Ind,near rep\",\n      \"Independent, near dem\" = \"Ind,near dem\",\n      \"Democrat, weak\"        = \"Not str democrat\",\n      \"Democrat, strong\"      = \"Strong democrat\",\n      \"Other\"                 = \"No answer\",\n      \"Other\"                 = \"Don't know\",\n      \"Other\"                 = \"Other party\")) %>% \n  count(partyid)\n\n# A tibble: 8 × 2\n  partyid                   n\n  <fct>                 <int>\n1 Other                   548\n2 Republican, strong     2314\n3 Republican, weak       3032\n4 Independent, near rep  1791\n5 Independent            4119\n6 Independent, near dem  2499\n7 Democrat, weak         3690\n8 Democrat, strong       3490\n\n\nUse this technique with care: if you group together categories that are truly different you will end up with misleading results.\nIf you want to collapse a lot of levels, fct_collapse() is a useful variant of fct_recode(). For each new variable, you can provide a vector of old levels:\n\ngss_cat %>% \n  mutate(partyid = fct_collapse(partyid,\n      \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n      \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n      \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n      \"dem\" = c(\"Not str democrat\", \"Strong democrat\"))) %>% \n  count(partyid)\n\n# A tibble: 4 × 2\n  partyid     n\n  <fct>   <int>\n1 other     548\n2 rep      5346\n3 ind      8409\n4 dem      7180\n\n\nSometimes you just want to lump together the small groups to make a plot or table simpler.\nThat’s the job of the fct_lump_*() family of functions. fct_lump_lowfreq() is a simple starting point that progressively lumps the smallest groups categories into “Other”, always keeping “Other” as the smallest category.\n\ngss_cat %>% \n  mutate(relig = fct_lump_lowfreq(relig)) %>% \n  count(relig)\n\n# A tibble: 2 × 2\n  relig          n\n  <fct>      <int>\n1 Protestant 10846\n2 Other      10637\n\n\nIn this case it’s not very helpful: it is true that the majority of Americans in this survey are Protestant, but we’d probably like to see some more details! Instead, we can use the fct_lump_n() to specify that we want exactly 10 groups:\n\ngss_cat %>% \n  mutate(relig = fct_lump_n(relig, n = 10)) %>% \n  count(relig, sort = TRUE) %>% \n  print(n = Inf)\n\n# A tibble: 10 × 2\n   relig                       n\n   <fct>                   <int>\n 1 Protestant              10846\n 2 Catholic                 5124\n 3 None                     3523\n 4 Christian                 689\n 5 Other                     458\n 6 Jewish                    388\n 7 Buddhism                  147\n 8 Inter-nondenominational   109\n 9 Moslem/islam              104\n10 Orthodox-christian         95\n\n\nRead the documentation to learn about fct_lump_min() and fct_lump_prop() which are useful in other cases."
  },
  {
    "objectID": "posts/2022-10-11-working-with-factors/index.html#ordered-factors",
    "href": "posts/2022-10-11-working-with-factors/index.html#ordered-factors",
    "title": "Factors",
    "section": "Ordered factors",
    "text": "Ordered factors\nBefore we go on, there’s a special type of factor that needs to be mentioned briefly: ordered factors. Ordered factors, created with ordered(), imply a strict ordering and equal distance between levels: the first level is “less than” the second level by the same amount that the second level is “less than” the third level, and so on.. You can recognize them when printing because they use < between the factor levels:\n\nordered(c(\"a\", \"b\", \"c\"))\n\n[1] a b c\nLevels: a < b < c\n\n\nIn practice, ordered() factors behave very similarly to regular factors. There are only two places where you might notice different behavior:\n\nIf you map an ordered factor to color or fill in ggplot2, it will default to scale_color_viridis()/scale_fill_viridis(), a color scale that implies a ranking.\nIf you use an ordered function in a linear model, it will use “polygonal contrasts”. These are mildly useful, but you are unlikely to have heard of them unless you have a PhD in Statistics, and even then you probably don’t routinely interpret them. If you want to learn more, we recommend vignette(\"contrasts\", package = \"faux\") by Lisa DeBruine.\n\nGiven the arguable utility of these differences, we don’t generally recommend using ordered factors."
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html",
    "href": "posts/2022-09-27-loop-functions/index.html",
    "title": "Vectorization and loop functionals",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://rafalab.github.io/dsbook/programming-basics.html#vectorization\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-loop-functions\nhttps://rafalab.github.io/dsbook/programming-basics.html#vectorization"
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html#vector-arithmetics",
    "href": "posts/2022-09-27-loop-functions/index.html#vector-arithmetics",
    "title": "Vectorization and loop functionals",
    "section": "Vector arithmetics",
    "text": "Vector arithmetics\n\nRescaling a vector\nIn R, arithmetic operations on vectors occur element-wise. For a quick example, suppose we have height in inches:\n\ninches <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)\n\nand want to convert to centimeters.\nNotice what happens when we multiply inches by 2.54:\n\ninches * 2.54\n\n [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80\n\n\nIn the line above, we multiplied each element by 2.54.\nSimilarly, if for each entry we want to compute how many inches taller or shorter than 69 inches (the average height for males), we can subtract it from every entry like this:\n\ninches - 69\n\n [1]  0 -7 -3  1  1  4 -2  4 -2  1\n\n\n\n\nTwo vectors\nIf we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows:\n\nx <- 1:10\ny <- 1:10 \nx + y\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\n\nThe same holds for other mathematical operations, such as -, * and /.\n\nx <- 1:10\nsqrt(x)\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\n\n\ny <- 1:10\nx*y\n\n [1]   1   4   9  16  25  36  49  64  81 100"
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html#lapply",
    "href": "posts/2022-09-27-loop-functions/index.html#lapply",
    "title": "Vectorization and loop functionals",
    "section": "lapply()",
    "text": "lapply()\nThe lapply() function does the following simple series of operations:\n\nit loops over a list, iterating over each element in that list\nit applies a function to each element of the list (a function that you specify)\nand returns a list (the l in lapply() is for “list”).\n\nThis function takes three arguments: (1) a list X; (2) a function (or the name of a function) FUN; (3) other arguments via its ... argument. If X is not a list, it will be coerced to a list using as.list().\nThe body of the lapply() function can be seen here.\n\nlapply\n\nfunction (X, FUN, ...) \n{\n    FUN <- match.fun(FUN)\n    if (!is.vector(X) || is.object(X)) \n        X <- as.list(X)\n    .Internal(lapply(X, FUN))\n}\n<bytecode: 0x14f92f928>\n<environment: namespace:base>\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe actual looping is done internally in C code for efficiency reasons.\n\n\nIt is important to remember that lapply() always returns a list, regardless of the class of the input.\n\n\n\n\n\n\nExample\n\n\n\nHere’s an example of applying the mean() function to all elements of a list. If the original list has names, the the names will be preserved in the output.\n\nx <- list(a = 1:5, b = rnorm(10))\nx\n\n$a\n[1] 1 2 3 4 5\n\n$b\n [1] -0.796902151 -0.704764494  2.602279644  0.342396072  0.959892466\n [6]  0.001693647 -0.038861708  0.413760458 -0.740300144 -1.696169815\n\nlapply(x, mean)\n\n$a\n[1] 3\n\n$b\n[1] 0.0343024\n\n\nNotice that here we are passing the mean() function as an argument to the lapply() function.\n\n\nFunctions in R can be used this way and can be passed back and forth as arguments just like any other object inR.\nWhen you pass a function to another function, you do not need to include the open and closed parentheses () like you do when you are calling a function.\n\n\n\n\n\n\nExample\n\n\n\nHere is another example of using lapply().\n\nx <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nlapply(x, mean)\n\n$a\n[1] 2.5\n\n$b\n[1] -0.1328501\n\n$c\n[1] 1.227173\n\n$d\n[1] 5.012158\n\n\n\n\nYou can use lapply() to evaluate a function multiple times each with a different argument.\nNext is an example where I call the runif() function (to generate uniformly distributed random variables) four times, each time generating a different number of random numbers.\n\nx <- 1:4\nlapply(x, runif)\n\n[[1]]\n[1] 0.3924746\n\n[[2]]\n[1] 0.807656 0.852134\n\n[[3]]\n[1] 0.9680554 0.6216622 0.4746080\n\n[[4]]\n[1] 0.09363509 0.80682941 0.44572025 0.55164581\n\n\n\n\n\n\n\n\nWhat happened?\n\n\n\nWhen you pass a function to lapply(), lapply() takes elements of the list and passes them as the first argument of the function you are applying.\nIn the above example, the first argument of runif() is n, and so the elements of the sequence 1:4 all got passed to the n argument of runif().\n\n\nFunctions that you pass to lapply() may have other arguments. For example, the runif() function has a min and max argument too.\n\n\n\n\n\n\nQuestion\n\n\n\nIn the example above I used the default values for min and max.\n\nHow would you be able to specify different values for that in the context of lapply()?\n\n\n\nHere is where the ... argument to lapply() comes into play. Any arguments that you place in the ... argument will get passed down to the function being applied to the elements of the list.\nHere, the min = 0 and max = 10 arguments are passed down to runif() every time it gets called.\n\nx <- 1:4\nlapply(x, runif, min = 0, max = 10)\n\n[[1]]\n[1] 7.339994\n\n[[2]]\n[1] 6.159324 4.167184\n\n[[3]]\n[1] 1.3182169 6.3869630 0.2614679\n\n[[4]]\n[1] 7.640224 1.984159 9.285444 2.845784\n\n\nSo now, instead of the random numbers being between 0 and 1 (the default), the are all between 0 and 10.\nThe lapply() function (and its friends) makes heavy use of anonymous functions. Anonymous functions are like members of Project Mayhem—they have no names. These functions are generated “on the fly” as you are using lapply(). Once the call to lapply() is finished, the function disappears and does not appear in the workspace.\n\n\n\n\n\n\nExample\n\n\n\nHere I am creating a list that contains two matrices.\n\nx <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2)) \nx\n\n$a\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n$b\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nSuppose I wanted to extract the first column of each matrix in the list. I could write an anonymous function for extracting the first column of each matrix.\n\nlapply(x, function(elt) { elt[,1] })\n\n$a\n[1] 1 2\n\n$b\n[1] 1 2 3\n\n\nNotice that I put the function() definition right in the call to lapply().\n\n\nThis is perfectly legal and acceptable. You can put an arbitrarily complicated function definition inside lapply(), but if it’s going to be more complicated, it’s probably a better idea to define the function separately.\nFor example, I could have done the following.\n\nf <- function(elt) {\n        elt[, 1]\n}\nlapply(x, f)\n\n$a\n[1] 1 2\n\n$b\n[1] 1 2 3\n\n\n\n\n\n\n\n\nNote\n\n\n\nNow the function is no longer anonymous; its name is f.\n\n\nWhether you use an anonymous function or you define a function first depends on your context. If you think the function f is something you are going to need a lot in other parts of your code, you might want to define it separately. But if you are just going to use it for this call to lapply(), then it is probably simpler to use an anonymous function."
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html#sapply",
    "href": "posts/2022-09-27-loop-functions/index.html#sapply",
    "title": "Vectorization and loop functionals",
    "section": "sapply()",
    "text": "sapply()\nThe sapply() function behaves similarly to lapply(); the only real difference is in the return value. sapply() will try to simplify the result of lapply() if possible. Essentially, sapply() calls lapply() on its input and then applies the following algorithm:\n\nIf the result is a list where every element is length 1, then a vector is returned\nIf the result is a list where every element is a vector of the same length (> 1), a matrix is returned.\nIf it can’t figure things out, a list is returned\n\nHere’s the result of calling lapply().\n\nx <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nlapply(x, mean)\n\n$a\n[1] 2.5\n\n$b\n[1] -0.7692304\n\n$c\n[1] 1.1845\n\n$d\n[1] 5.011145\n\n\nNotice that lapply() returns a list (as usual), but that each element of the list has length 1.\nHere’s the result of calling sapply() on the same list.\n\nsapply(x, mean) \n\n         a          b          c          d \n 2.5000000 -0.7692304  1.1844997  5.0111453 \n\n\nBecause the result of lapply() was a list where each element had length 1, sapply() collapsed the output into a numeric vector, which is often more useful than a list."
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html#split",
    "href": "posts/2022-09-27-loop-functions/index.html#split",
    "title": "Vectorization and loop functionals",
    "section": "split()",
    "text": "split()\nThe split() function takes a vector or other objects and splits it into groups determined by a factor or list of factors.\nThe arguments to split() are\n\nstr(split)\n\nfunction (x, f, drop = FALSE, ...)  \n\n\nwhere\n\nx is a vector (or list) or data frame\nf is a factor (or coerced to one) or a list of factors\ndrop indicates whether empty factors levels should be dropped\n\nThe combination of split() and a function like lapply() or sapply() is a common paradigm in R. The basic idea is that you can take a data structure, split it into subsets defined by another variable, and apply a function over those subsets. The results of applying that function over the subsets are then collated and returned as an object. This sequence of operations is sometimes referred to as “map-reduce” in other contexts.\nHere we simulate some data and split it according to a factor variable. Note that we use the gl() function to “generate levels” in a factor variable.\n\nx <- c(rnorm(10), runif(10), rnorm(10, 1))\nf <- gl(3, 10) # generate factor levels\nf\n\n [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\nLevels: 1 2 3\n\n\n\nsplit(x, f)\n\n$`1`\n [1]  0.06440437  1.78480833 -0.94373825  1.94781191 -0.16936618 -0.58442286\n [7]  1.23801276  0.02465268 -0.35022800 -0.03086819\n\n$`2`\n [1] 0.1623650 0.7931292 0.5370609 0.6692380 0.2197358 0.2657368 0.6490295\n [8] 0.2862331 0.8169028 0.9344586\n\n$`3`\n [1]  0.13424958  0.31285258  2.39555383 -0.11859862 -0.08085121 -0.17574475\n [7] -1.08308465  0.18204113  1.13764707  0.56204495\n\n\nA common idiom is split followed by an lapply.\n\nlapply(split(x, f), mean)\n\n$`1`\n[1] 0.2981067\n\n$`2`\n[1] 0.533389\n\n$`3`\n[1] 0.326611\n\n\n\nSplitting a Data Frame\n\nlibrary(datasets)\nhead(airquality)\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\n\nWe can split the airquality data frame by the Month variable so that we have separate sub-data frames for each month.\n\ns <- split(airquality, airquality$Month)\nstr(s)\n\nList of 5\n $ 5:'data.frame':  31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 41 36 12 18 NA 28 23 19 8 NA ...\n  ..$ Solar.R: int [1:31] 190 118 149 313 NA NA 299 99 19 194 ...\n  ..$ Wind   : num [1:31] 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n  ..$ Temp   : int [1:31] 67 72 74 62 56 66 65 59 61 69 ...\n  ..$ Month  : int [1:31] 5 5 5 5 5 5 5 5 5 5 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 6:'data.frame':  30 obs. of  6 variables:\n  ..$ Ozone  : int [1:30] NA NA NA NA NA NA 29 NA 71 39 ...\n  ..$ Solar.R: int [1:30] 286 287 242 186 220 264 127 273 291 323 ...\n  ..$ Wind   : num [1:30] 8.6 9.7 16.1 9.2 8.6 14.3 9.7 6.9 13.8 11.5 ...\n  ..$ Temp   : int [1:30] 78 74 67 84 85 79 82 87 90 87 ...\n  ..$ Month  : int [1:30] 6 6 6 6 6 6 6 6 6 6 ...\n  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...\n $ 7:'data.frame':  31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 135 49 32 NA 64 40 77 97 97 85 ...\n  ..$ Solar.R: int [1:31] 269 248 236 101 175 314 276 267 272 175 ...\n  ..$ Wind   : num [1:31] 4.1 9.2 9.2 10.9 4.6 10.9 5.1 6.3 5.7 7.4 ...\n  ..$ Temp   : int [1:31] 84 85 81 84 83 83 88 92 92 89 ...\n  ..$ Month  : int [1:31] 7 7 7 7 7 7 7 7 7 7 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 8:'data.frame':  31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 39 9 16 78 35 66 122 89 110 NA ...\n  ..$ Solar.R: int [1:31] 83 24 77 NA NA NA 255 229 207 222 ...\n  ..$ Wind   : num [1:31] 6.9 13.8 7.4 6.9 7.4 4.6 4 10.3 8 8.6 ...\n  ..$ Temp   : int [1:31] 81 81 82 86 85 87 89 90 90 92 ...\n  ..$ Month  : int [1:31] 8 8 8 8 8 8 8 8 8 8 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 9:'data.frame':  30 obs. of  6 variables:\n  ..$ Ozone  : int [1:30] 96 78 73 91 47 32 20 23 21 24 ...\n  ..$ Solar.R: int [1:30] 167 197 183 189 95 92 252 220 230 259 ...\n  ..$ Wind   : num [1:30] 6.9 5.1 2.8 4.6 7.4 15.5 10.9 10.3 10.9 9.7 ...\n  ..$ Temp   : int [1:30] 91 92 93 93 87 84 80 78 75 73 ...\n  ..$ Month  : int [1:30] 9 9 9 9 9 9 9 9 9 9 ...\n  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...\n\n\nThen we can take the column means for Ozone, Solar.R, and Wind for each sub-data frame.\n\nlapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")])\n})\n\n$`5`\n   Ozone  Solar.R     Wind \n      NA       NA 11.62258 \n\n$`6`\n    Ozone   Solar.R      Wind \n       NA 190.16667  10.26667 \n\n$`7`\n     Ozone    Solar.R       Wind \n        NA 216.483871   8.941935 \n\n$`8`\n   Ozone  Solar.R     Wind \n      NA       NA 8.793548 \n\n$`9`\n   Ozone  Solar.R     Wind \n      NA 167.4333  10.1800 \n\n\nUsing sapply() might be better here for a more readable output.\n\nsapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")])\n})\n\n               5         6          7        8        9\nOzone         NA        NA         NA       NA       NA\nSolar.R       NA 190.16667 216.483871       NA 167.4333\nWind    11.62258  10.26667   8.941935 8.793548  10.1800\n\n\nUnfortunately, there are NAs in the data so we cannot simply take the means of those variables. However, we can tell the colMeans function to remove the NAs before computing the mean.\n\nsapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")], \n                 na.rm = TRUE)\n})\n\n                5         6          7          8         9\nOzone    23.61538  29.44444  59.115385  59.961538  31.44828\nSolar.R 181.29630 190.16667 216.483871 171.857143 167.43333\nWind     11.62258  10.26667   8.941935   8.793548  10.18000"
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html#tapply",
    "href": "posts/2022-09-27-loop-functions/index.html#tapply",
    "title": "Vectorization and loop functionals",
    "section": "tapply",
    "text": "tapply\ntapply() is used to apply a function over subsets of a vector. It can be thought of as a combination of split() and sapply() for vectors only. I’ve been told that the “t” in tapply() refers to “table”, but that is unconfirmed.\n\nstr(tapply)\n\nfunction (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)  \n\n\nThe arguments to tapply() are as follows:\n\nX is a vector\nINDEX is a factor or a list of factors (or else they are coerced to factors)\nFUN is a function to be applied\n… contains other arguments to be passed FUN\nsimplify, should we simplify the result?\n\n\n\n\n\n\n\nExample\n\n\n\nGiven a vector of numbers, one simple operation is to take group means.\n\n## Simulate some data\nx <- c(rnorm(10), runif(10), rnorm(10, 1))\n## Define some groups with a factor variable\nf <- gl(3, 10)   \nf\n\n [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\nLevels: 1 2 3\n\ntapply(x, f, mean)\n\n        1         2         3 \n0.2927136 0.2936399 1.0340813 \n\n\n\n\nWe can also apply functions that return more than a single value. In this case, tapply() will not simplify the result and will return a list. Here’s an example of finding the range() (min and max) of each sub-group.\n\ntapply(x, f, range)\n\n$`1`\n[1] -1.217068  1.723239\n\n$`2`\n[1] 0.0620568 0.8443268\n\n$`3`\n[1] -0.1079284  2.8115679"
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html#apply",
    "href": "posts/2022-09-27-loop-functions/index.html#apply",
    "title": "Vectorization and loop functionals",
    "section": "apply()",
    "text": "apply()\nThe apply() function is used to a evaluate a function (often an anonymous one) over the margins of an array. It is most often used to apply a function to the rows or columns of a matrix (which is just a 2-dimensional array). However, it can be used with general arrays, for example, to take the average of an array of matrices. Using apply() is not really faster than writing a loop, but it works in one line and is highly compact.\n\nstr(apply)\n\nfunction (X, MARGIN, FUN, ..., simplify = TRUE)  \n\n\nThe arguments to apply() are\n\nX is an array\nMARGIN is an integer vector indicating which margins should be “retained”.\nFUN is a function to be applied\n... is for other arguments to be passed to FUN\n\n\n\n\n\n\n\nExample\n\n\n\nHere I create a 20 by 10 matrix of Normal random numbers. I then compute the mean of each column.\n\nx <- matrix(rnorm(200), 20, 10)\nhead(x)\n\n            [,1]       [,2]        [,3]       [,4]       [,5]       [,6]\n[1,] -0.08951039  0.8826521 -0.08872757 -0.1902191  1.6645398 -0.6256195\n[2,] -1.61681249 -0.1291864 -0.33969902  0.0642613  0.3666109  0.1417229\n[3,] -0.04658801 -0.3518867 -1.19269194  0.5000525  0.7995802 -0.8268586\n[4,]  0.54126740 -0.5923315  0.59592538 -1.3801277  0.9194444  0.6511138\n[5,]  0.02298819 -1.2806856 -0.36783197 -0.8432676 -1.2392163 -0.4812132\n[6,] -0.27934449 -1.0370041  0.74642687 -2.1841962  0.3488571 -0.6985333\n            [,7]       [,8]        [,9]       [,10]\n[1,]  1.54160420 -0.5170260 -0.52851441 -0.04676887\n[2,] -1.46016301 -1.2740124  0.05790032 -1.42846117\n[3,] -0.57536442  2.0125221 -1.91502406 -1.36074140\n[4,]  0.58692626 -0.6922853  0.06218197 -0.10036921\n[5,]  0.03727834  0.1837202  0.26596992 -0.59420697\n[6,] -0.02896566  0.5216695 -0.74571287  0.29136921\n\napply(x, 2, mean)  ## Take the mean of each column\n\n [1] -0.32908184 -0.19267585  0.04411986 -0.21452934 -0.11431928 -0.21070416\n [7]  0.27329343 -0.21840568 -0.41166243 -0.28090778\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nI can also compute the sum of each row.\n\napply(x, 1, sum)   ## Take the mean of each row\n\n [1]  2.0024103 -5.6178391 -2.9570003  0.5917455 -4.2964651 -3.0654338\n [7] -1.9762763 -4.2211525 -3.3652473 -0.6591509 -1.8506994 -3.4277422\n[13] -0.9036821  0.9532504 -0.1092196  2.6233840  2.6924633 -1.8723594\n[19] -4.1938965 -3.4445502\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn both calls to apply(), the return value was a vector of numbers.\n\n\nYou’ve probably noticed that the second argument is either a 1 or a 2, depending on whether we want row statistics or column statistics. What exactly is the second argument to apply()?\nThe MARGIN argument essentially indicates to apply() which dimension of the array you want to preserve or retain.\nSo when taking the mean of each column, I specify\n\napply(x, 2, mean)\n\nbecause I want to collapse the first dimension (the rows) by taking the mean and I want to preserve the number of columns. Similarly, when I want the row sums, I run\n\napply(x, 1, mean)\n\nbecause I want to collapse the columns (the second dimension) and preserve the number of rows (the first dimension).\n\nCol/Row Sums and Means\n\n\n\n\n\n\nPro-tip\n\n\n\nFor the special case of column/row sums and column/row means of matrices, we have some useful shortcuts.\n\nrowSums = apply(x, 1, sum)\nrowMeans = apply(x, 1, mean)\ncolSums = apply(x, 2, sum)\ncolMeans = apply(x, 2, mean)\n\n\n\nThe shortcut functions are heavily optimized and hence are much faster, but you probably won’t notice unless you’re using a large matrix.\nAnother nice aspect of these functions is that they are a bit more descriptive. It’s arguably more clear to write colMeans(x) in your code than apply(x, 2, mean).\n\n\nOther Ways to Apply\nYou can do more than take sums and means with the apply() function.\n\n\n\n\n\n\nExample\n\n\n\nFor example, you can compute quantiles of the rows of a matrix using the quantile() function.\n\nx <- matrix(rnorm(200), 20, 10)\nhead(x)\n\n            [,1]        [,2]         [,3]        [,4]       [,5]       [,6]\n[1,]  0.30116593 -0.22143862 -0.780484437  0.24715546  0.4620109 -0.1284762\n[2,] -1.02790308 -0.92858900  0.191527407  0.69079520 -0.2844016  0.3033426\n[3,] -0.07119538 -0.06317295 -0.987710196 -0.33902017  0.2571209  0.5702837\n[4,]  1.12855517  1.73876299 -2.037467412  0.06666361 -1.6490073 -1.0061759\n[5,]  1.00533831 -1.29756896  0.009980026  1.98505348 -0.0113328 -0.2182344\n[6,]  0.05762476 -0.28615154 -0.517267972  1.07147513  1.4076715  2.2987914\n           [,7]       [,8]       [,9]       [,10]\n[1,] -0.0770105 -0.0758423 -0.2742897 -1.06783913\n[2,] -0.4108593 -0.7534294 -1.2058456 -0.74607337\n[3,] -0.9714008  0.1451234 -1.4040156 -0.03308528\n[4,] -1.5909674 -0.7444157 -1.6793615 -0.09789561\n[5,]  0.2916761 -2.4666819 -0.9916369  0.99983123\n[6,]  0.6401452  1.1482895  1.0475003 -0.69766008\n\n## Get row quantiles\napply(x, 1, quantile, probs = c(0.25, 0.75))    \n\n          [,1]        [,2]       [,3]        [,4]       [,5]       [,6]\n25% -0.2610769 -0.88479910 -0.8133057 -1.63449728 -0.7982863 -0.2002075\n75%  0.1664060  0.07254515  0.1005712  0.02552381  0.8227924  1.1290859\n          [,7]       [,8]     [,9]       [,10]       [,11]      [,12]\n25% -0.3483229 -0.2178852 0.142347 -0.00305639 -0.05045378 -0.8347654\n75%  0.2779571  0.6790140 1.226393  0.95341826  0.90565824  0.7197274\n         [,13]       [,14]      [,15]      [,16]      [,17]      [,18]\n25% 0.08092159 -0.08878187 -0.8914984 -0.3260444 -0.4409576 -0.7755624\n75% 1.22063634  0.63504774 -0.1218225  0.8874655  1.3131417  1.0484453\n         [,19]      [,20]\n25% -0.1979752 -0.3811029\n75%  0.7158692  0.6466877\n\n\nNotice that I had to pass the probs = c(0.25, 0.75) argument to quantile() via the ... argument to apply()."
  },
  {
    "objectID": "posts/2022-09-27-loop-functions/index.html#vectorizing-a-function",
    "href": "posts/2022-09-27-loop-functions/index.html#vectorizing-a-function",
    "title": "Vectorization and loop functionals",
    "section": "Vectorizing a Function",
    "text": "Vectorizing a Function\nLet’s talk about how we can “vectorize” a function.\nWhat this means is that we can write function that typically only takes single arguments and create a new function that can take vector arguments.\nThis is often needed when you want to plot functions.\n\n\n\n\n\n\nExample\n\n\n\nHere’s an example of a function that computes the sum of squares given some data, a mean parameter and a standard deviation. The formula is \\(\\sum_{i=1}^n(x_i-\\mu)^2/\\sigma^2\\).\n\nsumsq <- function(mu, sigma, x) {\n        sum(((x - mu) / sigma)^2)\n}\n\nThis function takes a mean mu, a standard deviation sigma, and some data in a vector x.\nIn many statistical applications, we want to minimize the sum of squares to find the optimal mu and sigma. Before we do that, we may want to evaluate or plot the function for many different values of mu or sigma.\n\nx <- rnorm(100)       ## Generate some data\nsumsq(mu=1, sigma=1, x)  ## This works (returns one value)\n\n[1] 203.2493\n\n\nHowever, passing a vector of mus or sigmas won’t work with this function because it’s not vectorized.\n\nsumsq(1:10, 1:10, x)  ## This is not what we want\n\n[1] 105.2917\n\n\n\n\nThere’s even a function in R called Vectorize() that automatically can create a vectorized version of your function.\nSo we could create a vsumsq() function that is fully vectorized as follows.\n\nvsumsq <- Vectorize(sumsq, c(\"mu\", \"sigma\"))\nvsumsq(1:10, 1:10, x)\n\n [1] 203.24928 122.09428 108.16721 103.66455 101.75042 100.80246 100.28605\n [8]  99.98663  99.80583  99.69400\n\n\nPretty cool, right?"
  },
  {
    "objectID": "posts/2022-09-29-error-handling-and-generation/index.html",
    "href": "posts/2022-09-29-error-handling-and-generation/index.html",
    "title": "Error Handling and Generation",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://adv-r.hadley.nz/debugging\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-error-handling-and-generation\nhttps://adv-r.hadley.nz/debugging"
  },
  {
    "objectID": "posts/2022-09-29-error-handling-and-generation/index.html#what-is-an-error",
    "href": "posts/2022-09-29-error-handling-and-generation/index.html#what-is-an-error",
    "title": "Error Handling and Generation",
    "section": "What is an error?",
    "text": "What is an error?\nErrors most often occur when code is used in a way that it is not intended to be used.\n\n\n\n\n\n\nExample\n\n\n\nFor example adding two strings together produces the following error:\n\n\"hello\" + \"world\"\n\nError in \"hello\" + \"world\": non-numeric argument to binary operator\n\n\n\n\nThe + operator is essentially a function that takes two numbers as arguments and finds their sum.\nSince neither \"hello\" nor \"world\" are numbers, the R interpreter produces an error.\nErrors will stop the execution of your program, and they will (hopefully) print an error message to the R console.\nIn R there are two other constructs which are related to errors:\n\nWarnings\nMessages\n\nWarnings are meant to indicate that something seems to have gone wrong in your program that should be inspected.\n\n\n\n\n\n\nExample\n\n\n\nHere’s a simple example of a warning being generated:\n\nas.numeric(c(\"5\", \"6\", \"seven\"))\n\nWarning: NAs introduced by coercion\n\n\n[1]  5  6 NA\n\n\nThe as.numeric() function attempts to convert each string in c(\"5\", \"6\", \"seven\") into a number, however it is impossible to convert \"seven\", so a warning is generated.\nExecution of the code is not halted, and an NA is produced for \"seven\" instead of a number.\n\n\nMessages simply print to the R console, though they are generated by an underlying mechanism that is similar to how errors and warning are generated.\n\n\n\n\n\n\nExample\n\n\n\nHere’s a small function that will generate a message:\n\nf <- function(){\n  message(\"This is a message.\")\n}\n\nf()\n\nThis is a message."
  },
  {
    "objectID": "posts/2022-09-29-error-handling-and-generation/index.html#generating-errors",
    "href": "posts/2022-09-29-error-handling-and-generation/index.html#generating-errors",
    "title": "Error Handling and Generation",
    "section": "Generating Errors",
    "text": "Generating Errors\nThere are a few essential functions for generating errors, warnings, and messages in R.\nThe stop() function will generate an error.\n\n\n\n\n\n\nExample\n\n\n\nLet’s generate an error:\n\nstop(\"Something erroneous has occurred!\")\n\nError: Something erroneous has occurred!\n\n\nIf an error occurs inside of a function, then the name of that function will appear in the error message:\n\nname_of_function <- function(){\n  stop(\"Something bad happened.\")\n}\n\nname_of_function()\n\nError in name_of_function(): Something bad happened.\n\n\nThe stopifnot() function takes a series of logical expressions as arguments and if any of them are false an error is generated specifying which expression is false.\n\n\n\n\n\n\nExample\n\n\n\nLet’s take a look at an example:\n\nerror_if_n_is_greater_than_zero <- function(n){\n  stopifnot(n <= 0)\n  n\n}\n\nerror_if_n_is_greater_than_zero(5)\n\nError in error_if_n_is_greater_than_zero(5): n <= 0 is not TRUE\n\n\n\n\nThe warning() function creates a warning, and the function itself is very similar to the stop() function. Remember that a warning does not stop the execution of a program (unlike an error.)\n\n\n\n\n\n\nExample\n\n\n\n\nwarning(\"Consider yourself warned!\")\n\nWarning: Consider yourself warned!\n\n\n\n\nJust like errors, a warning generated inside of a function will include the name of the function in which it was generated:\n\nmake_NA <- function(x){\n  warning(\"Generating an NA.\")\n  NA\n}\n\nmake_NA(\"Sodium\")\n\nWarning in make_NA(\"Sodium\"): Generating an NA.\n\n\n[1] NA\n\n\nMessages are simpler than errors or warnings; they just print strings to the R console.\nYou can issue a message with the message() function:\n\n\n\n\n\n\nExample\n\n\n\n\nmessage(\"In a bottle.\")\n\nIn a bottle."
  },
  {
    "objectID": "posts/2022-09-29-error-handling-and-generation/index.html#when-to-generate-errors-or-warnings",
    "href": "posts/2022-09-29-error-handling-and-generation/index.html#when-to-generate-errors-or-warnings",
    "title": "Error Handling and Generation",
    "section": "When to generate errors or warnings",
    "text": "When to generate errors or warnings\nStopping the execution of your program with stop() should only happen in the event of a catastrophe - meaning only if it is impossible for your program to continue.\n\nIf there are conditions that you can anticipate that would cause your program to create an error, then you should document those conditions so whoever uses your software is aware.\n\nAn example includes:\n\nProviding invalid arguments to a function. You could check this at the beginning of your program using stopifnot() so that the user can quickly realize something has gone wrong.\n\nYou can think of a function as kind of contract between you and the user:\n\nif the user provides specified arguments, your program will provide predictable results.\n\nOf course it’s impossible for you to anticipate all of the potential uses of your program.\nIt’s appropriate to create a warning  when this contract between you and the user is violated.\nA perfect example of this situation is the result of\n\nas.numeric(c(\"5\", \"6\", \"seven\"))\n\nWarning: NAs introduced by coercion\n\n\n[1]  5  6 NA\n\n\nThe user expects a vector of numbers to be returned as the result of as.numeric() but \"seven\" is coerced into being NA, which is not completely intuitive.\nR has largely been developed according to the Unix Philosophy, which generally discourages printing text to the console unless something unexpected has occurred.\nLanguages that commonly run on Unix systems like C and C++ are rarely used interactively, meaning that they usually underpin computer infrastructure (computers “talking” to other computers).\nMessages printed to the console are therefore not very useful since nobody will ever read them and it’s not straightforward for other programs to capture and interpret them.\nIn contrast, R code is frequently executed by human beings in the R console, which serves as an interactive environment between the computer and person at the keyboard.\nIf you think your program should produce a message, make sure that the output of the message is primarily meant for a human to read.\nYou should avoid signaling a condition or the result of your program to another program by creating a message."
  },
  {
    "objectID": "posts/2022-09-29-error-handling-and-generation/index.html#how-should-errors-be-handled",
    "href": "posts/2022-09-29-error-handling-and-generation/index.html#how-should-errors-be-handled",
    "title": "Error Handling and Generation",
    "section": "How should errors be handled?",
    "text": "How should errors be handled?\nImagine writing a program that will take a long time to complete because of a complex calculation or because you’re handling a large amount of data. If an error occurs during this computation then you’re liable to lose all of the results that were calculated before the error, or your program may not finish a critical task that a program further down your pipeline is depending on. If you anticipate the possibility of errors occurring during the execution of your program, then you can design your program to handle them appropriately.\nThe tryCatch() function is the workhorse of handling errors and warnings in R. The first argument of this function is any R expression, followed by conditions which specify how to handle an error or a warning. The last argument, finally, specifies a function or expression that will be executed after the expression no matter what, even in the event of an error or a warning.\nLet’s construct a simple function I’m going to call beera that catches errors and warnings gracefully.\n\nbeera <- function(expr){\n  tryCatch(expr,\n         error = function(e){\n           message(\"An error occurred:\\n\", e)\n         },\n         warning = function(w){\n           message(\"A warning occured:\\n\", w)\n         },\n         finally = {\n           message(\"Finally done!\")\n         })\n}\n\nThis function takes an expression as an argument and tries to evaluate it. If the expression can be evaluated without any errors or warnings then the result of the expression is returned and the message Finally done! is printed to the R console. If an error or warning is generated, then the functions that are provided to the error or warning arguments are printed. Let’s try this function out with a few examples.\n\nbeera({\n  2 + 2\n})\n\nFinally done!\n\n\n[1] 4\n\nbeera({\n  \"two\" + 2\n})\n\nAn error occurred:\nError in \"two\" + 2: non-numeric argument to binary operator\n\nFinally done!\n\nbeera({\n  as.numeric(c(1, \"two\", 3))\n})\n\nA warning occured:\nsimpleWarning in doTryCatch(return(expr), name, parentenv, handler): NAs introduced by coercion\n\nFinally done!\n\n\nNotice that we’ve effectively transformed errors and warnings into messages.\nNow that you know the basics of generating and catching errors you’ll need to decide when your program should generate an error. My advice to you is to limit the number of errors your program generates as much as possible. Even if you design your program so that it’s able to catch and handle errors, the error handling process slows down your program by orders of magnitude. Imagine you wanted to write a simple function that checks if an argument is an even number. You might write the following:\n\nis_even <- function(n){\n  n %% 2 == 0\n}\n\nis_even(768)\n\n[1] TRUE\n\nis_even(\"two\")\n\nError in n%%2: non-numeric argument to binary operator\n\n\nYou can see that providing a string causes this function to raise an error. You could imagine though that you want to use this function across a list of different data types, and you only want to know which elements of that list are even numbers. You might think to write the following:\n\nis_even_error <- function(n){\n  tryCatch(n %% 2 == 0,\n           error = function(e){\n             FALSE\n           })\n}\n\nis_even_error(714)\n\n[1] TRUE\n\nis_even_error(\"eight\")\n\n[1] FALSE\n\n\nThis appears to be working the way you intended, however when applied to more data this function will be seriously slow compared to alternatives. For example I could check that n is numeric before treating n like a number:\n\nis_even_check <- function(n){\n  is.numeric(n) && n %% 2 == 0\n}\n\nis_even_check(1876)\n\n[1] TRUE\n\nis_even_check(\"twelve\")\n\n[1] FALSE\n\n\n\nNotice that by using is.numeric() before the “AND” operator (&&), the expression n %% 2 == 0 is never evaluated. This is a programming language design feature called “short circuiting.” The expression can never evaluate to TRUE if the left hand side of && evaluates to FALSE, so the right hand side is ignored.\n\nTo demonstrate the difference in the speed of the code, we will use the microbenchmark package to measure how long it takes for each function to be applied to the same data.\n\nlibrary(microbenchmark)\nmicrobenchmark(sapply(letters, is_even_check))\n\nUnit: microseconds\n                           expr    min      lq     mean  median      uq     max neval\n sapply(letters, is_even_check) 46.224 47.7975 61.43616 48.6445 58.4755 167.091   100\n\nmicrobenchmark(sapply(letters, is_even_error))\n\nUnit: microseconds\n                           expr     min       lq     mean   median       uq      max neval\n sapply(letters, is_even_error) 640.067 678.0285 906.3037 784.4315 1044.501 2308.931   100\nThe error catching approach is nearly 15 times slower!\nProper error handling is an essential tool for any software developer so that you can design programs that are error tolerant. Creating clear and informative error messages is essential for building quality software.\n\n\n\n\n\n\nPro-tip\n\n\n\nOne closing tip I recommend is to put documentation for your software online, including the meaning of the errors that your software can potentially throw. Often a user’s first instinct when encountering an error is to search online for that error message, which should lead them to your documentation!"
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html",
    "title": "Reading and Writing data",
    "section": "",
    "text": "[Source]"
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#txt-or-csv",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#txt-or-csv",
    "title": "Reading and Writing data",
    "section": "txt or csv",
    "text": "txt or csv\nThere are a few primary functions reading data from base R.\n\nread.table(), read.csv(): for reading tabular data\nreadLines(): for reading lines of a text file\n\nThere are analogous functions for writing data to files\n\nwrite.table(): for writing tabular data to text files (i.e. CSV) or connections\nwriteLines(): for writing character data line-by-line to a file or connection\n\nLet’s try reading some data into R with the read.csv() function.\n\ndf <- read.csv(here(\"data\", \"team_standings.csv\"))\ndf\n\n   Standing         Team\n1         1        Spain\n2         2  Netherlands\n3         3      Germany\n4         4      Uruguay\n5         5    Argentina\n6         6       Brazil\n7         7        Ghana\n8         8     Paraguay\n9         9        Japan\n10       10        Chile\n11       11     Portugal\n12       12          USA\n13       13      England\n14       14       Mexico\n15       15  South Korea\n16       16     Slovakia\n17       17  Ivory Coast\n18       18     Slovenia\n19       19  Switzerland\n20       20 South Africa\n21       21    Australia\n22       22  New Zealand\n23       23       Serbia\n24       24      Denmark\n25       25       Greece\n26       26        Italy\n27       27      Nigeria\n28       28      Algeria\n29       29       France\n30       30     Honduras\n31       31     Cameroon\n32       32  North Korea\n\n\nWe can use the $ symbol to pick out a specific column:\n\ndf$Team\n\n [1] \"Spain\"        \"Netherlands\"  \"Germany\"      \"Uruguay\"      \"Argentina\"   \n [6] \"Brazil\"       \"Ghana\"        \"Paraguay\"     \"Japan\"        \"Chile\"       \n[11] \"Portugal\"     \"USA\"          \"England\"      \"Mexico\"       \"South Korea\" \n[16] \"Slovakia\"     \"Ivory Coast\"  \"Slovenia\"     \"Switzerland\"  \"South Africa\"\n[21] \"Australia\"    \"New Zealand\"  \"Serbia\"       \"Denmark\"      \"Greece\"      \n[26] \"Italy\"        \"Nigeria\"      \"Algeria\"      \"France\"       \"Honduras\"    \n[31] \"Cameroon\"     \"North Korea\" \n\n\nWe can also ask for the full paths for specific files\n\nhere(\"data\", \"team_standings.csv\")\n\n[1] \"/Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022/data/team_standings.csv\"\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\nWhat happens when you use readLines() function with the team_standings.csv data?\nHow would you only read in the first 5 lines?"
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#r-code",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#r-code",
    "title": "Reading and Writing data",
    "section": "R code",
    "text": "R code\nSometimes, someone will give you a file that ends in a .R.\nThis is what’s called an R script file. It may contain code someone has written (maybe even you!), for example, a function that you can use with your data. In this case, you want the function available for you to use.\nTo use the function, you have to first, read in the function from R script file into R.\nYou can check to see if the function already is loaded in R by looking at the Environment tab.\nThe function you want to use is\n\nsource(): for reading in R code files\n\nFor example, it might be something like this:\n\nsource(here::here('functions.R'))"
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#r-objects",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#r-objects",
    "title": "Reading and Writing data",
    "section": "R objects",
    "text": "R objects\nAlternatively, you might be interested in reading and writing R objects.\nWriting data in e.g. .txt, .csv or Excel file formats is good if you want to open these files with other analysis software, such as Excel. However, these formats do not preserve data structures, such as column data types (numeric, character or factor). In order to do that, the data should be written out in a R data format.\nThere are several types R data file formats to be aware of:\n\n.RData: Stores multiple R objects\n.Rda: This is short for .RData and is equivalent.\n.Rds: Stores a single R object\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhy is saving data in as a R object useful?\nSaving data into R data formats can typically reduce considerably the size of large files by compression.\n\n\nNext, we will learn how to read and save\n\nA single R object\nMultiple R objects\nYour entire work space in a specified file\n\n\nReading in data from files\n\nload(): for reading in single or multiple R objects (opposite of save()) with a .Rda or .RData file format (objects must be same name)\nreadRDS(): for reading in a single object with a .Rds file format (can rename objects)\nunserialize(): for reading single R objects in binary form\n\n\n\nWriting data to files\n\nsave(): for saving an arbitrary number of R objects in binary format (possibly compressed) to a file.\nsaveRDS(): for saving a single object\nserialize(): for converting an R object into a binary format for outputting to a connection (or file).\nsave.image(): short for ‘save my current workspace’; while this sounds nice, it’s not terribly useful for reproducibility (hence not suggested); it’s also what happens when you try to quit R and it asks if you want to save your work space.\n\n\n\n\n\n\nSave data into R data file formats: RDS and RDATA\n\n\n\n\n[Source]\n\n\nExample\nLet’s try an example. Let’s save a vector of length 5 into the two file formats.\n\nx <- 1:5\nsave(x, file=here(\"data\", \"x.Rda\"))\nsaveRDS(x, file=here(\"data\", \"x.Rds\"))\nlist.files(path=here(\"data\"))\n\n[1] \"2016-07-19.csv.bz2\" \"chicago.rds\"        \"chocolate.RDS\"     \n[4] \"team_standings.csv\" \"x.Rda\"              \"x.Rds\"             \n\n\nHere we assign the imported data to an object using readRDS()\n\nnew_x1 <- readRDS(here(\"data\", \"x.Rds\"))\nnew_x1\n\n[1] 1 2 3 4 5\n\n\nHere we assign the imported data to an object using load()\n\nnew_x2 <- load(here(\"data\", \"x.Rda\"))\nnew_x2\n\n[1] \"x\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nload() simply returns the name of the objects loaded. Not the values.\n\n\nLet’s clean up our space.\n\nfile.remove(here(\"data\", \"x.Rda\"))\n\n[1] TRUE\n\nfile.remove(here(\"data\", \"x.Rds\"))\n\n[1] TRUE\n\nrm(x)\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat do you think this code will do?\nHint: change eval=TRUE to see result\n\nx <- 1:5\ny <- x^2\nsave(x,y, file=here(\"data\", \"x.Rda\"))\nnew_x2 <- load(here(\"data\", \"x.Rda\"))\n\nWhen you are done:\n\nfile.remove(here(\"data\", \"x.Rda\"))"
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#other-data-types",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#other-data-types",
    "title": "Reading and Writing data",
    "section": "Other data types",
    "text": "Other data types\nNow, there are of course, many R packages that have been developed to read in all kinds of other datasets, and you may need to resort to one of these packages if you are working in a specific area.\nFor example, check out\n\nDBI for relational databases\nhaven for SPSS, Stata, and SAS data\nhttr for web APIs\nreadxl for .xls and .xlsx sheets\ngooglesheets4 for Google Sheets\ngoogledrive for Google Drive files\nrvest for web scraping\njsonlite for JSON\nxml2 for XML."
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#reading-data-files-with-read.table",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#reading-data-files-with-read.table",
    "title": "Reading and Writing data",
    "section": "Reading data files with read.table()",
    "text": "Reading data files with read.table()\n\n\nFor details on reading data with read.table(), click here.\n\nThe read.table() function is one of the most commonly used functions for reading data. The help file for read.table() is worth reading in its entirety if only because the function gets used a lot (run ?read.table in R).\nI know, I know, everyone always says to read the help file, but this one is actually worth reading.\nThe read.table() function has a few important arguments:\n\nfile, the name of a file, or a connection\nheader, logical indicating if the file has a header line\nsep, a string indicating how the columns are separated\ncolClasses, a character vector indicating the class of each column in the dataset\nnrows, the number of rows in the dataset. By default read.table() reads an entire file.\ncomment.char, a character string indicating the comment character. This defaults to \"#\". If there are no commented lines in your file, it’s worth setting this to be the empty string \"\".\nskip, the number of lines to skip from the beginning\nstringsAsFactors, should character variables be coded as factors? This defaults to FALSE. However, back in the “old days”, it defaulted to TRUE. The reason for this was because, if you had data that were stored as strings, it was because those strings represented levels of a categorical variable. Now, we have lots of data that is text data and they do not always represent categorical variables. So you may want to set this to be FALSE in those cases. If you always want this to be FALSE, you can set a global option via options(stringsAsFactors = FALSE).\n\nI’ve never seen so much heat generated on discussion forums about an R function argument than the stringsAsFactors argument. Seriously.\nFor small to moderately sized datasets, you can usually call read.table() without specifying any other arguments\n\ndata <- read.table(\"foo.txt\")\n\n\n\n\n\n\n\nNote\n\n\n\nfoo.txt is not a real dataset here. It is only used as an example for how to use read.table()\n\n\nIn this case, R will automatically:\n\nskip lines that begin with a #\nfigure out how many rows there are (and how much memory needs to be allocated)\nfigure what type of variable is in each column of the table.\n\nTelling R all these things directly makes R run faster and more efficiently.\n\n\n\n\n\n\nNote\n\n\n\nThe read.csv() function is identical to read.table() except that some of the defaults are set differently (like the sep argument)."
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#reading-in-larger-datasets-with-read.table",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#reading-in-larger-datasets-with-read.table",
    "title": "Reading and Writing data",
    "section": "Reading in larger datasets with read.table()",
    "text": "Reading in larger datasets with read.table()\n\n\nFor details on reading larger datasets with read.table(), click here.\n\nWith much larger datasets, there are a few things that you can do that will make your life easier and will prevent R from choking.\n\nRead the help page for read.table(), which contains many hints\nMake a rough calculation of the memory required to store your dataset (see the next section for an example of how to do this). If the dataset is larger than the amount of RAM on your computer, you can probably stop right here.\nSet comment.char = \"\" if there are no commented lines in your file.\nUse the colClasses argument. Specifying this option instead of using the default can make read.table() run MUCH faster, often twice as fast. In order to use this option, you have to know the class of each column in your data frame. If all of the columns are “numeric”, for example, then you can just set colClasses = \"numeric\". A quick an dirty way to figure out the classes of each column is the following:\n\n\ninitial <- read.table(\"datatable.txt\", nrows = 100)\nclasses <- sapply(initial, class)\ntabAll <- read.table(\"datatable.txt\", colClasses = classes)\n\nNote: datatable.txt is not a real dataset here. It is only used as an example for how to use read.table().\n\nSet nrows. This does not make R run faster but it helps with memory usage. A mild overestimate is okay. You can use the Unix tool wc to calculate the number of lines in a file.\n\nIn general, when using R with larger datasets, it’s also useful to know a few things about your system.\n\nHow much memory is available on your system?\nWhat other applications are in use? Can you close any of them?\nAre there other users logged into the same system?\nWhat operating system ar you using? Some operating systems can limit the amount of memory a single process can access"
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#advantages",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#advantages",
    "title": "Reading and Writing data",
    "section": "Advantages",
    "text": "Advantages\nThe advantage of the read_csv() function is perhaps better understood from an historical perspective.\n\nR’s built in read.csv() function similarly reads CSV files, but the read_csv() function in readr builds on that by removing some of the quirks and “gotchas” of read.csv() as well as dramatically optimizing the speed with which it can read data into R.\nThe read_csv() function also adds some nice user-oriented features like a progress meter and a compact method for specifying column types."
  },
  {
    "objectID": "posts/2022-09-06-reading-and-writing-data/index.html#example-1",
    "href": "posts/2022-09-06-reading-and-writing-data/index.html#example-1",
    "title": "Reading and Writing data",
    "section": "Example",
    "text": "Example\nA typical call to read_csv() will look as follows.\n\nlibrary(readr)\nteams <- read_csv(here(\"data\", \"team_standings.csv\"))\n\nRows: 32 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Team\ndbl (1): Standing\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nteams\n\n# A tibble: 32 × 2\n   Standing Team       \n      <dbl> <chr>      \n 1        1 Spain      \n 2        2 Netherlands\n 3        3 Germany    \n 4        4 Uruguay    \n 5        5 Argentina  \n 6        6 Brazil     \n 7        7 Ghana      \n 8        8 Paraguay   \n 9        9 Japan      \n10       10 Chile      \n# … with 22 more rows\n\n\nBy default, read_csv() will open a CSV file and read it in line-by-line. Similar to read.table(), you can tell the function to skip lines or which lines are comments:\n\nread_csv(\"The first line of metadata\n  The second line of metadata\n  x,y,z\n  1,2,3\",\n  skip = 2)\n\nRows: 1 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): x, y, z\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 1 × 3\n      x     y     z\n  <dbl> <dbl> <dbl>\n1     1     2     3\n\n\nAlternatively, you can use the comment argument:\n\nread_csv(\"# A comment I want to skip\n  x,y,z\n  1,2,3\",\n  comment = \"#\")\n\nRows: 1 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): x, y, z\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 1 × 3\n      x     y     z\n  <dbl> <dbl> <dbl>\n1     1     2     3\n\n\nIt will also (by default), read in the first few rows of the table in order to figure out the type of each column (i.e. integer, character, etc.). From the read_csv() help page:\n\nIf ‘NULL’, all column types will be imputed from the first 1000 rows on the input. This is convenient (and fast), but not robust. If the imputation fails, you’ll need to supply the correct types yourself.\n\nYou can specify the type of each column with the col_types argument.\n\n\n\n\n\n\nNote\n\n\n\nIn general, it is a good idea to specify the column types explicitly.\nThis rules out any possible guessing errors on the part of read_csv().\nAlso, specifying the column types explicitly provides a useful safety check in case anything about the dataset should change without you knowing about it.\n\n\nHere is an example of how to specify the column types explicitly:\n\nteams <- read_csv(here(\"data\", \"team_standings.csv\"), \n                  col_types = \"cc\")\n\nNote that the col_types argument accepts a compact representation. Here \"cc\" indicates that the first column is character and the second column is character (there are only two columns). Using the col_types argument is useful because often it is not easy to automatically figure out the type of a column by looking at a few rows (especially if a column has many missing values).\n\n\n\n\n\n\nNote\n\n\n\nThe read_csv() function will also read compressed files automatically.\nThere is no need to decompress the file first or use the gzfile connection function.\n\n\nThe following call reads a gzip-compressed CSV file containing download logs from the RStudio CRAN mirror.\n\nlogs <- read_csv(here(\"data\", \"2016-07-19.csv.bz2\"), \n                 n_max = 10)\n\nRows: 10 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): r_version, r_arch, r_os, package, version, country\ndbl  (2): size, ip_id\ndate (1): date\ntime (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNote that the warnings indicate that read_csv() may have had some difficulty identifying the type of each column. This can be solved by using the col_types argument.\n\nlogs <- read_csv(here(\"data\", \"2016-07-19.csv.bz2\"), \n                 col_types = \"ccicccccci\", \n                 n_max = 10)\nlogs\n\n# A tibble: 10 × 10\n   date       time       size r_ver…¹ r_arch r_os  package version country ip_id\n   <chr>      <chr>     <int> <chr>   <chr>  <chr> <chr>   <chr>   <chr>   <int>\n 1 2016-07-19 22:00:00 1.89e6 3.3.0   x86_64 ming… data.t… 1.9.6   US          1\n 2 2016-07-19 22:00:05 4.54e4 3.3.1   x86_64 ming… assert… 0.1     US          2\n 3 2016-07-19 22:00:03 1.43e7 3.3.1   x86_64 ming… stringi 1.1.1   DE          3\n 4 2016-07-19 22:00:05 1.89e6 3.3.1   x86_64 ming… data.t… 1.9.6   US          4\n 5 2016-07-19 22:00:06 3.90e5 3.3.1   x86_64 ming… foreach 1.4.3   US          4\n 6 2016-07-19 22:00:08 4.88e4 3.3.1   x86_64 linu… tree    1.0-37  CO          5\n 7 2016-07-19 22:00:12 5.25e2 3.3.1   x86_64 darw… surviv… 2.39-5  US          6\n 8 2016-07-19 22:00:08 3.23e6 3.3.1   x86_64 ming… Rcpp    0.12.5  US          2\n 9 2016-07-19 22:00:09 5.56e5 3.3.1   x86_64 ming… tibble  1.1     US          2\n10 2016-07-19 22:00:10 1.52e5 3.3.1   x86_64 ming… magrit… 1.5     US          2\n# … with abbreviated variable name ¹​r_version\n\n\nYou can specify the column type in a more detailed fashion by using the various col_*() functions.\nFor example, in the log data above, the first column is actually a date, so it might make more sense to read it in as a Date object.\nIf we wanted to just read in that first column, we could do\n\nlogdates <- read_csv(here(\"data\", \"2016-07-19.csv.bz2\"), \n                     col_types = cols_only(date = col_date()),\n                     n_max = 10)\nlogdates\n\n# A tibble: 10 × 1\n   date      \n   <date>    \n 1 2016-07-19\n 2 2016-07-19\n 3 2016-07-19\n 4 2016-07-19\n 5 2016-07-19\n 6 2016-07-19\n 7 2016-07-19\n 8 2016-07-19\n 9 2016-07-19\n10 2016-07-19\n\n\nNow the date column is stored as a Date object which can be used for relevant date-related computations (for example, see the lubridate package).\n\n\n\n\n\n\nNote\n\n\n\nThe read_csv() function has a progress option that defaults to TRUE.\nThis options provides a nice progress meter while the CSV file is being read.\nHowever, if you are using read_csv() in a function, or perhaps embedding it in a loop, it is probably best to set progress = FALSE."
  },
  {
    "objectID": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html",
    "href": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html",
    "title": "Managing data frames with the Tidyverse",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://r4ds.had.co.nz/tibbles\nhttps://jhudatascience.org/tidyversecourse/wrangle-data.html#data-wrangling\ndplyr cheat sheet from RStudio\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-managing-data-frames-with-the-tidyverse\nhttps://jhudatascience.org/tidyversecourse/get-data.html#tibbles"
  },
  {
    "objectID": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html#tibbles",
    "href": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html#tibbles",
    "title": "Managing data frames with the Tidyverse",
    "section": "Tibbles",
    "text": "Tibbles\nAnother type of data structure that we need to discuss is called the tibble! It’s best to think of tibbles as an updated and stylish version of the data.frame.\nTibbles are what tidyverse packages work with most seamlessly. Now, that does not mean tidyverse packages require tibbles.\nIn fact, they still work with data.frames, but the more you work with tidyverse and tidyverse-adjacent packages, the more you will see the advantages of using tibbles.\nBefore we go any further, tibbles are data frames, but they have some new bells and whistles to make your life easier.\n\nHow tibbles differ from data.frame\nThere are a number of differences between tibbles and data.frames.\n\n\n\n\n\n\nNote\n\n\n\nTo see a full vignette about tibbles and how they differ from data.frame, you will want to execute vignette(\"tibble\") and read through that vignette.\n\n\nWe will summarize some of the most important points here:\n\nInput type remains unchanged - data.frame is notorious for treating strings as factors; this will not happen with tibbles\nVariable names remain unchanged - In base R, creating data.frames will remove spaces from names, converting them to periods or add “x” before numeric column names. Creating tibbles will not change variable (column) names.\nThere are no row.names() for a tibble - Tidy data requires that variables be stored in a consistent way, removing the need for row names.\nTibbles print first ten rows and columns that fit on one screen - Printing a tibble to screen will never print the entire huge data frame out. By default, it just shows what fits to your screen."
  },
  {
    "objectID": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html#creating-a-tibble",
    "href": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html#creating-a-tibble",
    "title": "Managing data frames with the Tidyverse",
    "section": "Creating a tibble",
    "text": "Creating a tibble\nThe tibble package is part of the tidyverse and can thus be loaded in (once installed) using:\n\nlibrary(tidyverse)\n\n\nas_tibble()\nSince many packages use the historical data.frame from base R, you will often find yourself in the situation that you have a data.frame and want to convert that data.frame to a tibble.\nTo do so, the as_tibble() function is exactly what you are looking for.\nFor the example, here we use a dataset (chicago.rds) containing air pollution and temperature data for the city of Chicago in the U.S.\nThe dataset is available in the /data repository. You can load the data into R using the readRDS() function.\n\nlibrary(here)\n\nhere() starts at /Users/stephaniehicks/Documents/github/teaching/jhustatcomputing2022\n\nchicago <- readRDS(here(\"data\", \"chicago.rds\"))\n\nYou can see some basic characteristics of the dataset with the dim() and str() functions.\n\ndim(chicago)\n\n[1] 6940    8\n\nstr(chicago)\n\n'data.frame':   6940 obs. of  8 variables:\n $ city      : chr  \"chic\" \"chic\" \"chic\" \"chic\" ...\n $ tmpd      : num  31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...\n $ dptp      : num  31.5 29.9 27.4 28.6 28.9 ...\n $ date      : Date, format: \"1987-01-01\" \"1987-01-02\" ...\n $ pm25tmean2: num  NA NA NA NA NA NA NA NA NA NA ...\n $ pm10tmean2: num  34 NA 34.2 47 NA ...\n $ o3tmean2  : num  4.25 3.3 3.33 4.38 4.75 ...\n $ no2tmean2 : num  20 23.2 23.8 30.4 30.3 ...\n\n\nWe see this data structure is a data.frame with 6940 observations and 8 variables.\nTo convert this data.frame to a tibble you would use the following:\n\nstr(as_tibble(chicago))\n\ntibble [6,940 × 8] (S3: tbl_df/tbl/data.frame)\n $ city      : chr [1:6940] \"chic\" \"chic\" \"chic\" \"chic\" ...\n $ tmpd      : num [1:6940] 31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...\n $ dptp      : num [1:6940] 31.5 29.9 27.4 28.6 28.9 ...\n $ date      : Date[1:6940], format: \"1987-01-01\" \"1987-01-02\" ...\n $ pm25tmean2: num [1:6940] NA NA NA NA NA NA NA NA NA NA ...\n $ pm10tmean2: num [1:6940] 34 NA 34.2 47 NA ...\n $ o3tmean2  : num [1:6940] 4.25 3.3 3.33 4.38 4.75 ...\n $ no2tmean2 : num [1:6940] 20 23.2 23.8 30.4 30.3 ...\n\n\n\n\n\n\n\n\nNote\n\n\n\nTibbles, by default, only print the first ten rows to screen.\nIf you were to print the data.frame chicago to screen, all 6940 rows would be displayed. When working with large data.frames, this default behavior can be incredibly frustrating.\nUsing tibbles removes this frustration because of the default settings for tibble printing.\n\n\nAdditionally, you will note that the type of the variable is printed for each variable in the tibble. This helpful feature is another added bonus of tibbles relative to data.frame.\n\nWant to see more of the tibble?\nIf you do want to see more rows from the tibble, there are a few options!\n\nThe View() function in RStudio is incredibly helpful. The input to this function is the data.frame or tibble you would like to see.\n\nSpecifically, View(chicago) would provide you, the viewer, with a scrollable view (in a new tab) of the complete dataset.\n\nUse the fact that print() enables you to specify how many rows and columns you would like to display.\n\nHere, we again display the chicago data.frame as a tibble but specify that we would only like to see 5 rows. The width = Inf argument specifies that we would like to see all the possible columns. Here, there are only 8, but for larger datasets, this can be helpful to specify.\n\nas_tibble(chicago) %>% \n  print(n = 5, width = Inf)\n\n# A tibble: 6,940 × 8\n  city   tmpd  dptp date       pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n  <chr> <dbl> <dbl> <date>          <dbl>      <dbl>    <dbl>     <dbl>\n1 chic   31.5  31.5 1987-01-01         NA       34       4.25      20.0\n2 chic   33    29.9 1987-01-02         NA       NA       3.30      23.2\n3 chic   33    27.4 1987-01-03         NA       34.2     3.33      23.8\n4 chic   29    28.6 1987-01-04         NA       47       4.38      30.4\n5 chic   32    28.9 1987-01-05         NA       NA       4.75      30.3\n# … with 6,935 more rows\n\n\n\n\n\ntibble()\nAlternatively, you can create a tibble on the fly by using tibble() and specifying the information you would like stored in each column.\n\n\n\n\n\n\nNote\n\n\n\nIf you provide a single value, this value will be repeated across all rows of the tibble. This is referred to as “recycling inputs of length 1.”\nIn the example here, we see that the column c will contain the value ‘1’ across all rows.\n\ntibble(\n  a = 1:5,\n  b = 6:10,\n  c = 1,\n  z = (a + b)^2 + c\n)\n\n# A tibble: 5 × 4\n      a     b     c     z\n  <int> <int> <dbl> <dbl>\n1     1     6     1    50\n2     2     7     1    82\n3     3     8     1   122\n4     4     9     1   170\n5     5    10     1   226\n\n\n\n\nThe tibble() function allows you to quickly generate tibbles and even allows you to reference columns within the tibble you are creating, as seen in column z of the example above.\n\n\n\n\n\n\nNote\n\n\n\nTibbles can have column names that are not allowed in data.frame.\nIn the example below, we see that to utilize a nontraditional variable name, you surround the column name with backticks.\nNote that to refer to such columns in other tidyverse packages, you willl continue to use backticks surrounding the variable name.\n\ntibble(\n  `two words` = 1:5,\n  `12` = \"numeric\",\n  `:)` = \"smile\",\n)\n\n# A tibble: 5 × 3\n  `two words` `12`    `:)` \n        <int> <chr>   <chr>\n1           1 numeric smile\n2           2 numeric smile\n3           3 numeric smile\n4           4 numeric smile\n5           5 numeric smile"
  },
  {
    "objectID": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html#subsetting-tibbles",
    "href": "posts/2022-09-06-managing-data-frames-with-tidyverse/index.html#subsetting-tibbles",
    "title": "Managing data frames with the Tidyverse",
    "section": "Subsetting tibbles",
    "text": "Subsetting tibbles\nSubsetting tibbles also differs slightly from how subsetting occurs with data.frame.\nWhen it comes to tibbles,\n\n[[ can subset by name or position\n$ only subsets by name\n\nFor example:\n\ndf <- tibble(\n  a = 1:5,\n  b = 6:10,\n  c = 1,\n  z = (a + b)^2 + c\n)\n\n# Extract by name using $ or [[]]\ndf$z\n\n[1]  50  82 122 170 226\n\ndf[[\"z\"]]\n\n[1]  50  82 122 170 226\n\n# Extract by position requires [[]]\ndf[[4]]\n\n[1]  50  82 122 170 226\n\n\nHaving now discussed tibbles, which are the type of object most tidyverse and tidyverse-adjacent packages work best with, we now know the goal.\nIn many cases, tibbles are ultimately what we want to work with in R.\nHowever, data are stored in many different formats outside of R. We will spend the rest of this lesson discussing wrangling functions that work either a data.frame or tibble."
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "",
    "text": "“The greatest value of a picture is when it forces us to notice what we never expected to see.” —John Tukey"
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#the-basics-qplot",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#the-basics-qplot",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "The Basics: qplot()",
    "text": "The Basics: qplot()\nThe qplot() function in ggplot2 is meant to get you going quickly.\nIt works much like the plot() function in base graphics system. It looks for variables to plot within a data frame, similar to lattice, or in the parent environment.\nIn general, it is good to get used to putting your data in a data frame and then passing it to qplot().\n\n\n\n\n\n\nPro tip\n\n\n\nThe qplot() function is somewhat discouraged in ggplot2 now and new users are encouraged to use the more general ggplot() function (more details in the next lesson).\nHowever, the qplot() function is still useful and may be easier to use if transitioning from the base plotting system or a different statistical package.\n\n\nPlots are made up of\n\naesthetics (e.g. size, shape, color)\ngeoms (e.g. points, lines)\n\nFactors play an important role for indicating subsets of the data (if they are to have different properties) so they should be labeled properly.\nThe qplot() hides much of what goes on underneath, which is okay for most operations, ggplot() is the core function and is very flexible for doing things qplot() cannot do."
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#before-you-start-label-your-data",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#before-you-start-label-your-data",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "Before you start: label your data",
    "text": "Before you start: label your data\nOne thing that is always true, but is particularly useful when using ggplot2, is that you should always use informative and descriptive labels on your data.\nMore generally, your data should have appropriate metadata so that you can quickly look at a dataset and know\n\nwhat are variables?\nwhat do the values of each variable mean?\n\n\n\n\n\n\n\nPro tip\n\n\n\n\nEach column of a data frame should have a meaningful (but concise) variable name that accurately reflects the data stored in that column\nNon-numeric or categorical variables should be coded as factor variables and have meaningful labels for each level of the factor.\n\nMight be common to code a binary variable as a “0” or a “1”, but the problem is that from quickly looking at the data, it’s impossible to know whether which level of that variable is represented by a “0” or a “1”.\nMuch better to simply label each observation as what they are.\nIf a variable represents temperature categories, it might be better to use “cold”, “mild”, and “hot” rather than “1”, “2”, and “3”.\n\n\n\n\nWhile it is sometimes a pain to make sure all of your data are properly labeled, this investment in time can pay dividends down the road when you’re trying to figure out what you were plotting.\nIn other words, including the proper metadata can make your exploratory plots essentially self-documenting."
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#ggplot2-hello-world",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#ggplot2-hello-world",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "ggplot2 “Hello, world!”",
    "text": "ggplot2 “Hello, world!”\nThis example dataset comes with the ggplot2 package and contains data on the fuel economy of 38 popular car models from 1999 to 2008.\n\nlibrary(tidyverse) # this loads the ggplot2 R package\n# library(ggplot2) # an alternative way to just load the ggplot2 R package\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer <chr> \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        <chr> \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        <dbl> 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         <int> 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          <int> 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        <chr> \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          <int> 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          <int> 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           <chr> \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        <chr> \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\nYou can see from the glimpse() (part of the dplyr package) output that all of the categorical variables (like “manufacturer” or “class”) are **appropriately coded with meaningful label*s**.\nThis will come in handy when qplot() has to label different aspects of a plot.\nAlso note that all of the columns/variables have meaningful names (if sometimes abbreviated), rather than names like “X1”, and “X2”, etc.\n\n\n\n\n\n\nExample\n\n\n\nWe can make a quick scatterplot using qplot() of the engine displacement (displ) and the highway miles per gallon (hwy).\n\nqplot(x = displ, y = hwy, data = mpg)\n\n\n\n\nPlot of engine displacement and highway mileage using the mtcars dataset\n\n\n\n\n\n\nIt has a very similar feeling to plot() in base R.\n\n\n\n\n\n\nNote\n\n\n\nIn the call to qplot() you must specify the data argument so that qplot() knows where to look up the variables.\nYou must also specify x and y, but hopefully that part is obvious."
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#modifying-aesthetics",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#modifying-aesthetics",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "Modifying aesthetics",
    "text": "Modifying aesthetics\nWe can introduce a third variable into the plot by modifying the color of the points based on the value of that third variable.\nColor (or colour) is one type of aesthetic and using the ggplot2 language:\n\n“the color of each point can be mapped to a variable”\n\nThis sounds technical, but let’s give an example.\n\n\n\n\n\n\nExample\n\n\n\nWe map the color argument to the drv variable, which indicates whether a car is front wheel drive, rear wheel drive, or 4-wheel drive.\n\nqplot(displ, hwy, data = mpg, color = drv)\n\n\n\n\nEngine displacement and highway mileage by drive class\n\n\n\n\n\n\nNow we can see that the front wheel drive cars tend to have lower displacement relative to the 4-wheel or rear wheel drive cars.\nAlso, it’s clear that the 4-wheel drive cars have the lowest highway gas mileage.\n\n\n\n\n\n\nNote\n\n\n\nThe x argument and y argument are aesthetics too, and they got mapped to the displ and hwy variables, respectively.\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nIn the above plot, I did not specify the x and y variable. What happens when you run these two code chunks. What’s the difference?\n\nqplot(displ, hwy, data = mpg, color = drv)\n\n\nqplot(x = displ, y = hwy, data = mpg, color = drv)\n\n\nqplot(hwy, displ, data = mpg, color = drv)\n\n\nqplot(y = hwy, x = displ, data = mpg, color = drv)\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nLet’s try mapping colors in another dataset, namely the palmerpenguins dataset. These data contain observations for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica.\n\n\n\n\n\nPalmer penguins\n\n\n\n\n[Source: Artwork by Allison Horst]\n\nlibrary(palmerpenguins)\n\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nIf we wanted to count the number of penguins for each of the three species, we can use the count() function in dplyr:\n\npenguins %>% \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\nFor example, we see there are a total of 152 Adelie penguins in the palmerpenguins dataset.\n\n\n\n\n\n\nQuestion\n\n\n\nIf we wanted to use qplot() to map flipper_length_mm and bill_length_mm to the x and y coordinates, what would we do?\n\n# try it yourself\n\nNow try mapping color to the species variable on top of the code you just wrote:\n\n# try it yourself"
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#adding-a-geom",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#adding-a-geom",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "Adding a geom",
    "text": "Adding a geom\nSometimes it is nice to add a smoother to a scatterplot to highlight any trends.\nTrends can be difficult to see if the data are very noisy or there are many data points obscuring the view.\nA smoother is a type of “geom” that you can add along with your data points.\n\n\n\n\n\n\nExample\n\n\n\n\nqplot(displ, hwy, data = mpg, geom = c(\"point\", \"smooth\"))\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n\n\n\n\n\nEngine displacement and highway mileage w/smoother\n\n\n\n\n\n\nHere it seems that engine displacement and highway mileage have a nonlinear U-shaped relationship, but from the previous plot we know that this is largely due to confounding by the drive class of the car.\n\n\n\n\n\n\nNote\n\n\n\nPreviously, we did not have to specify geom = \"point\" because that was done automatically.\nBut if you want the smoother overlaid with the points, then you need to specify both explicitly.\n\n\nLook at what happens if we do not include the point geom.\n\nqplot(displ, hwy, data = mpg, geom = c(\"smooth\"))\n\n`geom_smooth()` using method = 'loess' and formula 'y ~ x'\n\n\n\n\n\nEngine displacement and highway mileage w/smoother\n\n\n\n\nSometimes that is the plot you want to show, but in this case it might make more sense to show the data along with the smoother.\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s add a smoother to our palmerpenguins dataset example.\nUsing the code we previously wrote mapping variables to points and color, add a “point” and “smooth” geom:\n\n# try it yourself"
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#histograms-and-boxplots",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#histograms-and-boxplots",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "Histograms and boxplots",
    "text": "Histograms and boxplots\nThe qplot() function can be used to be used to plot 1-dimensional data too.\nBy specifying a single variable, qplot() will by default make a histogram.\n\n\n\n\n\n\nExample\n\n\n\nWe can make a histogram of the highway mileage data and stratify on the drive class. So technically this is three histograms on top of each other.\n\nqplot(hwy, data = mpg, fill = drv, binwidth = 2)\n\n\n\n\nHistogram of highway mileage by drive class\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nNotice, I used fill here to map color to the drv variable. Why is this? What happens when you use color instead?\n\n# try it yourself\n\n\n\nHaving the different colors for each drive class is nice, but the three histograms can be a bit difficult to separate out.\nSide-by-side boxplots are one solution to this problem.\n\nqplot(drv, hwy, data = mpg, geom = \"boxplot\")\n\n\n\n\nBoxplots of highway mileage by drive class\n\n\n\n\nAnother solution is to plot the histograms in separate panels using facets."
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#facets",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#facets",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "Facets",
    "text": "Facets\nFacets are a way to create multiple panels of plots based on the levels of categorical variable.\nHere, we want to see a histogram of the highway mileages and the categorical variable is the drive class variable. We can do that using the facets argument to qplot().\n\n\n\n\n\n\nNote\n\n\n\nThe facets argument expects a formula type of input, with a ~ separating the left hand side variable and the right hand side variable.\n\nThe left hand side variable indicates how the rows of the panels should be divided\nThe right hand side variable indicates how the columns of the panels should be divided\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nHere, we just want three rows of histograms (and just one column), one for each drive class, so we specify drv on the left hand side and . on the right hand side indicating that there’s no variable there (it’s empty).\n\nqplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)\n\n\n\n\nHistogram of highway mileage by drive class\n\n\n\n\n\n\nWe could also look at more data using facets, so instead of histograms we could look at scatter plots of engine displacement and highway mileage by drive class.\nHere, we put the drv variable on the right hand side to indicate that we want a column for each drive class (as opposed to splitting by rows like we did above).\n\nqplot(displ, hwy, data = mpg, facets = . ~ drv)\n\n\n\n\nEngine displacement and highway mileage by drive class\n\n\n\n\nWhat if you wanted to add a smoother to each one of those panels? Simple, you literally just add the smoother as another geom.\n\nqplot(displ, hwy, data = mpg, facets = . ~ drv) + \n  geom_smooth(method = \"lm\")\n\n\n\n\nEngine displacement and highway mileage by drive class w/smoother\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe used a different type of smoother above.\nHere, we add a linear regression line (a type of smoother) to each group to see if there’s any difference.\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s facet our palmerpenguins dataset example and explore different types of plots.\nBuilding off the code we previously wrote, perform the following tasks:\n\nFacet the plot based on species with the the three species along rows.\nAdd a linear regression line to each the types of species\n\n\n# try it yourself\n\nNext, make a histogram of the body_mass_g for each of the species colored by the three species.\n\n# try it yourself"
  },
  {
    "objectID": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#summary",
    "href": "posts/2022-09-13-ggplot2-plotting-system-part-1/index.html#summary",
    "title": "The ggplot2 plotting system: qplot()",
    "section": "Summary",
    "text": "Summary\nThe qplot() function in ggplot2 is the analog of plot() in base graphics but with many built-in features that the traditionaly plot() does not provide. The syntax is somewhere in between the base and lattice graphics system. The qplot() function is useful for quickly putting data on the page/screen, but for ultimate customization, it may make more sense to use some of the lower level functions that we discuss later in the next lesson."
  },
  {
    "objectID": "posts/2022-09-01-reference-management/index.html",
    "href": "posts/2022-09-01-reference-management/index.html",
    "title": "Reference management",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nAuthoring in R Markdown from RStudio\nCitations from Reproducible Research in R from the Monash Data Fluency initiative\nBibliography from R Markdown Cookbook\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://andreashandel.github.io/MADAcourse\nhttps://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html\nhttps://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html\nhttps://monashdatafluency.github.io/r-rep-res/citations.html"
  },
  {
    "objectID": "posts/2022-09-01-reference-management/index.html#rtistry",
    "href": "posts/2022-09-01-reference-management/index.html#rtistry",
    "title": "Reference management",
    "section": "rtistry",
    "text": "rtistry\n\n\n\n[Add here.]"
  },
  {
    "objectID": "posts/2022-09-29-debugging-r-code/index.html",
    "href": "posts/2022-09-29-debugging-r-code/index.html",
    "title": "Debugging R Code",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://adv-r.hadley.nz/debugging\nhttps://rstats.wtf/debugging-r-code\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-debugging-r-code\nhttps://adv-r.hadley.nz/debugging"
  },
  {
    "objectID": "posts/2022-09-29-debugging-r-code/index.html#overall-approach",
    "href": "posts/2022-09-29-debugging-r-code/index.html#overall-approach",
    "title": "Debugging R Code",
    "section": "Overall approach",
    "text": "Overall approach\nFinding the root cause of a problem is always challenging.\nMost bugs are subtle and hard to find because if they were obvious, you would have avoided them in the first place.\nA good strategy helps. Below I outline a four step process that I have found useful:\n\n1. Google!\nWhenever you see an error message, start by googling it.\nIf you are lucky, you will discover that it’s a common error with a known solution.\n\n\n\n\n\n\nPro-tip\n\n\n\nWhen googling, improve your chances of a good match by removing any variable names or values that are specific to your problem.\n\n\n\n\n2. Make it repeatable\nTo find the root cause of an error, you are going to need to execute the code many times as you consider and reject hypotheses.\nTo make that iteration as quick possible, it’s worth some upfront investment to make the problem both easy and fast to reproduce.\nStart by creating a reproducible example (reprex).\n\nThis will help others help you, and often leads to a solution without asking others, because in the course of making the problem reproducible you often figure out the root cause.\n\nMake the example minimal by removing code and simplifying data.\n\nAs you do this, you may discover inputs that do not trigger the error. - Make note of them: they will be helpful when diagnosing the root cause.\n\n\n\n\n\n\n\nExample\n\n\n\nLet’s try making a reprex using the reprex package (installed with the tidyverse)\n\nlibrary(reprex)\n\nWrite a bit of code and copy it to the clipboard:\n\n(y <- 1:4)\nmean(y)\n\nEnter reprex() in the R Console. In RStudio, you’ll see a preview of your rendered reprex.\nIt is now ready and waiting on your clipboard, so you can paste it into, say, a GitHub issue.\nOne last step. Let’s go here and open up an issue on the course website:\n\nhttps://github.com/stephaniehicks/jhustatcomputing2022/issues\n\nWe will paste in the code from our reprex.\n\n\nIn RStudio, you can access reprex from the addins menu, which makes it even easier to point out your code and select the output format.\n\n\n3. Figure out where it is\nIt’s a great idea to adopt the scientific method here.\n\nGenerate hypotheses\nDesign experiments to test them\nRecord your results\n\nThis may seem like a lot of work, but a systematic approach will end up saving you time.\nOften a lot of time can be wasted relying on my intuition to solve a bug (“oh, it must be an off-by-one error, so I’ll just subtract 1 here”), when I would have been better off taking a systematic approach.\nIf this fails, you might need to ask help from someone else.\nIf you have followed the previous step, you will have a small example that is easy to share with others. That makes it much easier for other people to look at the problem, and more likely to help you find a solution.\n\n\n4. Fix it and test it\nOnce you have found the bug, you need to figure out how to fix it and to check that the fix actually worked.\nAgain, it is very useful to have automated tests in place.\n\nNot only does this help to ensure that you have actually fixed the bug, it also helps to ensure you have not introduced any new bugs in the process.\nIn the absence of automated tests, make sure to carefully record the correct output, and check against the inputs that previously failed."
  },
  {
    "objectID": "posts/2022-09-29-debugging-r-code/index.html#somethings-wrong",
    "href": "posts/2022-09-29-debugging-r-code/index.html#somethings-wrong",
    "title": "Debugging R Code",
    "section": "Something’s Wrong!",
    "text": "Something’s Wrong!\nOnce you have made the error repeatable, the next step is to figure out where it comes from.\nR has a number of ways to indicate to you that something is not right.\nThere are different levels of indication that can be used, ranging from mere notification to fatal error. Executing any function in R may result in the following conditions.\n\nmessage: A generic notification/diagnostic message produced by the message() function; execution of the function continues\nwarning: An indication that something is wrong but not necessarily fatal; execution of the function continues. Warnings are generated by the warning() function\nerror: An indication that a fatal problem has occurred and execution of the function stops. Errors are produced by the stop() function.\ncondition: A generic concept for indicating that something unexpected has occurred; programmers can create their own custom conditions if they want.\n\n\n\n\n\n\n\nExample\n\n\n\nHere is an example of a warning that you might receive in the course of using R.\n\nlog(-1)\n\nWarning in log(-1): NaNs produced\n\n\n[1] NaN\n\n\nThis warning lets you know that taking the log of a negative number results in a NaN value because you can’t take the log of negative numbers.\n\n\nNevertheless, R doesn’t give an error, because it has a useful value that it can return, the NaN value.\nThe warning is just there to let you know that something unexpected happen.\nDepending on what you are programming, you may have intentionally taken the log of a negative number in order to move on to another section of code.\n\n\n\n\n\n\nExample\n\n\n\nHere is another function that is designed to print a message to the console depending on the nature of its input.\n\nprint_message <- function(x) {\n        if(x > 0) {\n                print(\"x is greater than zero\")\n        } else {\n                print(\"x is less than or equal to zero\")\n        }  \n        invisible(x)        \n}\n\nThis function is simple:\n\nIt prints a message telling you whether x is greater than zero or less than or equal to zero.\nIt also returns its input invisibly, which is a common practice with “print” functions.\n\nReturning an object invisibly means that the return value does not get auto-printed when the function is called.\nTake a hard look at the function above and see if you can identify any bugs or problems.\nWe can execute the function as follows.\n\nprint_message(1)\n\n[1] \"x is greater than zero\"\n\n\nThe function seems to work fine at this point. No errors, warnings, or messages.\n\nprint_message(NA)\n\nError in if (x > 0) {: missing value where TRUE/FALSE needed\n\n\n\n\nWhat happened?\n\nWell, the first thing the function does is test if x > 0.\nBut you can’t do that test if x is a NA or NaN value.\nR doesn’t know what to do in this case so it stops with a fatal error.\n\nWe can fix this problem by anticipating the possibility of NA values and checking to see if the input is NA with the is.na() function.\n\nprint_message2 <- function(x) {\n        if(is.na(x))\n                print(\"x is a missing value!\")\n        else if(x > 0)\n                print(\"x is greater than zero\")\n        else\n                print(\"x is less than or equal to zero\")\n        invisible(x)\n}\n\nNow we can run the following.\n\nprint_message2(NA)\n\n[1] \"x is a missing value!\"\n\n\nAnd all is fine.\nNow what about the following situation.\n\nx <- log(c(-1, 2))\n\nWarning in log(c(-1, 2)): NaNs produced\n\nprint_message2(x)\n\nError in if (is.na(x)) print(\"x is a missing value!\") else if (x > 0) print(\"x is greater than zero\") else print(\"x is less than or equal to zero\"): the condition has length > 1\n\n\nNow what?? Why are we getting this warning?\nThe warning says “the condition has length > 1 and only the first element will be used”.\nThe problem here is that I passed print_message2() a vector x that was of length 2 rather then length 1.\nInside the body of print_message2() the expression is.na(x) returns a vector that is tested in the if statement.\nHowever, if cannot take vector arguments, so you get a warning.\nThe fundamental problem here is that print_message2() is not vectorized.\nWe can solve this problem two ways.\n\nSimply not allow vector arguments.\nThe other way is to vectorize the print_message2() function to allow it to take vector arguments.\n\nFor the first way, we simply need to check the length of the input.\n\nprint_message3 <- function(x) {\n        if(length(x) > 1L)\n                stop(\"'x' has length > 1\")\n        if(is.na(x))\n                print(\"x is a missing value!\")\n        else if(x > 0)\n                print(\"x is greater than zero\")\n        else\n                print(\"x is less than or equal to zero\")\n        invisible(x)\n}\n\nNow when we pass print_message3() a vector, we should get an error.\n\nprint_message3(1:2)\n\nError in print_message3(1:2): 'x' has length > 1\n\n\nVectorizing the function can be accomplished easily with the Vectorize() function.\n\nprint_message4 <- Vectorize(print_message2)\nout <- print_message4(c(-1, 2))\n\n[1] \"x is less than or equal to zero\"\n[1] \"x is greater than zero\"\n\n\nYou can see now that the correct messages are printed without any warning or error.\n\n\n\n\n\n\nNote\n\n\n\nI stored the return value of print_message4() in a separate R object called out.\nThis is because when I use the Vectorize() function it no longer preserves the invisibility of the return value.\n\n\n\n\n\n\n\n\nHelpful tips\n\n\n\nThe primary task of debugging any R code is correctly diagnosing what the problem is.\nWhen diagnosing a problem with your code (or somebody else’s), it’s important first understand what you were expecting to occur.\nThen you need to idenfity what did occur and how did it deviate from your expectations.\nSome basic questions you need to ask are\n\nWhat was your input? How did you call the function?\nWhat were you expecting? Output, messages, other results?\nWhat did you get?\nHow does what you get differ from what you were expecting?\nWere your expectations correct in the first place?\nCan you reproduce the problem (exactly)?\n\n\n\nBeing able to answer these questions is important not just for your own sake, but in situations where you may need to ask someone else for help with debugging the problem.\nSeasoned programmers will be asking you these exact questions."
  },
  {
    "objectID": "posts/2022-09-29-debugging-r-code/index.html#using-traceback",
    "href": "posts/2022-09-29-debugging-r-code/index.html#using-traceback",
    "title": "Debugging R Code",
    "section": "Using traceback()",
    "text": "Using traceback()\nThe traceback() function prints out the function call stack after an error has occurred.\nThe function call stack is the sequence of functions that was called before the error occurred.\nFor example, you may have a function a() which subsequently calls function b() which calls c() and then d().\nIf an error occurs, it may not be immediately clear in which function the error occurred.\nThe traceback() function shows you how many levels deep you were when the error occurred.\n\n\n\n\n\n\nExample\n\n\n\nLet’s use the mean() function on a vector z that does not exist in our R environment\n> mean(z)\nError in mean(z) : object 'z' not found\n> traceback()\n1: mean(z)\nHere, it’s clear that the error occurred inside the mean() function because the object z does not exist.\n\n\nThe traceback() function must be called immediately after an error occurs. Once another function is called, you lose the traceback.\n\n\n\n\n\n\nExample\n\n\n\nHere is a slightly more complicated example using the lm() function for linear modeling.\n> lm(y ~ x)\nError in eval(expr, envir, enclos) : object ’y’ not found\n> traceback()\n7: eval(expr, envir, enclos)\n6: eval(predvars, data, env)\n5: model.frame.default(formula = y ~ x, drop.unused.levels = TRUE)\n4: model.frame(formula = y ~ x, drop.unused.levels = TRUE)\n3: eval(expr, envir, enclos)\n2: eval(mf, parent.frame())\n1: lm(y ~ x)\nYou can see now that the error did not get thrown until the 7th level of the function call stack, in which case the eval() function tried to evaluate the formula y ~ x and realized the object y did not exist.\n\n\nLooking at the traceback is useful for figuring out roughly where an error occurred but it’s not useful for more detailed debugging. For that you might turn to the debug() function."
  },
  {
    "objectID": "posts/2022-09-29-debugging-r-code/index.html#using-debug",
    "href": "posts/2022-09-29-debugging-r-code/index.html#using-debug",
    "title": "Debugging R Code",
    "section": "Using debug()",
    "text": "Using debug()\n\n\nClick here for how to use debug() with an interactive browser.\n\nThe debug() function initiates an interactive debugger (also known as the “browser” in R) for a function. With the debugger, you can step through an R function one expression at a time to pinpoint exactly where an error occurs.\nThe debug() function takes a function as its first argument. Here is an example of debugging the lm() function.\n> debug(lm)      ## Flag the 'lm()' function for interactive debugging\n> lm(y ~ x)\ndebugging in: lm(y ~ x)\ndebug: {\n    ret.x <- x\n    ret.y <- y\n    cl <- match.call()\n    ...\n    if (!qr)\n        z$qr <- NULL \n    z\n} \nBrowse[2]>\nNow, every time you call the lm() function it will launch the interactive debugger. To turn this behavior off you need to call the undebug() function.\nThe debugger calls the browser at the very top level of the function body. From there you can step through each expression in the body. There are a few special commands you can call in the browser:\n\nn executes the current expression and moves to the next expression\nc continues execution of the function and does not stop until either an error or the function exits\nQ quits the browser\n\nHere’s an example of a browser session with the lm() function.\nBrowse[2]> n   ## Evalute this expression and move to the next one\ndebug: ret.x <- x\nBrowse[2]> n\ndebug: ret.y <- y\nBrowse[2]> n\ndebug: cl <- match.call()\nBrowse[2]> n\ndebug: mf <- match.call(expand.dots = FALSE)\nBrowse[2]> n\ndebug: m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\",\n    \"offset\"), names(mf), 0L)\nWhile you are in the browser you can execute any other R function that might be available to you in a regular session. In particular, you can use ls() to see what is in your current environment (the function environment) and print() to print out the values of R objects in the function environment.\nYou can turn off interactive debugging with the undebug() function.\nundebug(lm)    ## Unflag the 'lm()' function for debugging"
  },
  {
    "objectID": "posts/2022-09-29-debugging-r-code/index.html#using-recover",
    "href": "posts/2022-09-29-debugging-r-code/index.html#using-recover",
    "title": "Debugging R Code",
    "section": "Using recover()",
    "text": "Using recover()\n\n\nClick here for how to use recover() with an interactive browser.\n\nThe recover() function can be used to modify the error behavior of R when an error occurs. Normally, when an error occurs in a function, R will print out an error message, exit out of the function, and return you to your workspace to await further commands.\nWith recover() you can tell R that when an error occurs, it should halt execution at the exact point at which the error occurred. That can give you the opportunity to poke around in the environment in which the error occurred. This can be useful to see if there are any R objects or data that have been corrupted or mistakenly modified.\n> options(error = recover)    ## Change default R error behavior\n> read.csv(\"nosuchfile\")      ## This code doesn't work\nError in file(file, \"rt\") : cannot open the connection\nIn addition: Warning message:\nIn file(file, \"rt\") :\n  cannot open file ’nosuchfile’: No such file or directory\n  \nEnter a frame number, or 0 to exit\n\n1: read.csv(\"nosuchfile\")\n2: read.table(file = file, header = header, sep = sep, quote = quote, dec =\n3: file(file, \"rt\")\n\nSelection:\nThe recover() function will first print out the function call stack when an error occurrs. Then, you can choose to jump around the call stack and investigate the problem. When you choose a frame number, you will be put in the browser (just like the interactive debugger triggered with debug()) and will have the ability to poke around."
  },
  {
    "objectID": "posts/2022-09-08-joining-data-in-r/index.html",
    "href": "posts/2022-09-08-joining-data-in-r/index.html",
    "title": "Joining data in R",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://r4ds.had.co.nz/relational-data\nhttps://rafalab.github.io/dsbook/joining-tables\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-joining-data-in-r-basics\nhttps://r4ds.had.co.nz/relational-data\nhttps://rafalab.github.io/dsbook/joining-tables"
  },
  {
    "objectID": "posts/2022-09-08-joining-data-in-r/index.html#keys",
    "href": "posts/2022-09-08-joining-data-in-r/index.html#keys",
    "title": "Joining data in R",
    "section": "Keys",
    "text": "Keys\nThe variables used to connect each pair of tables are called keys. A key is a variable (or set of variables) that uniquely identifies an observation. In simple cases, a single variable is sufficient to identify an observation.\n\n\n\n\n\n\nNote\n\n\n\nThere are two types of keys:\n\nA primary key uniquely identifies an observation in its own table.\nA foreign key uniquely identifies an observation in another table.\n\n\n\nLet’s consider an example to help us understand the difference between a primary key and foreign key."
  },
  {
    "objectID": "posts/2022-09-08-joining-data-in-r/index.html#example-of-keys",
    "href": "posts/2022-09-08-joining-data-in-r/index.html#example-of-keys",
    "title": "Joining data in R",
    "section": "Example of keys",
    "text": "Example of keys\nImagine you are conduct a study and collecting data on subjects and a health outcome.\nOften, subjects will make multiple visits (a so-called longitudinal study) and so we will record the outcome for each visit. Similarly, we may record other information about them, such as the kind of housing they live in.\n\nThe first table\nThis code creates a simple table with some made up data about some hypothetical subjects’ outcomes.\n\nlibrary(tidyverse)\n\noutcomes <- tibble(\n        id = rep(c(\"a\", \"b\", \"c\"), each = 3),\n        visit = rep(0:2, 3),\n        outcome = rnorm(3 * 3, 3)\n)\n\nprint(outcomes)\n\n# A tibble: 9 × 3\n  id    visit outcome\n  <chr> <int>   <dbl>\n1 a         0   3.74 \n2 a         1   4.36 \n3 a         2   3.23 \n4 b         0   3.22 \n5 b         1   0.290\n6 b         2   1.33 \n7 c         0   3.14 \n8 c         1   3.29 \n9 c         2   3.39 \n\n\nNote that subjects are labeled by a unique identifer in the id column.\n\n\nA second table\nHere is some code to create a second table (we will be joining the first and second tables shortly). This table contains some data about the hypothetical subjects’ housing situation by recording the type of house they live in.\n\nsubjects <- tibble(\n        id = c(\"a\", \"b\", \"c\"),\n        house = c(\"detached\", \"rowhouse\", \"rowhouse\")\n)\n\nprint(subjects)\n\n# A tibble: 3 × 2\n  id    house   \n  <chr> <chr>   \n1 a     detached\n2 b     rowhouse\n3 c     rowhouse\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nWhat is the primary key and foreign key?\n\nThe outcomes$id is a primary key because it uniquely identifies each subject in the outcomes table.\nThe subjects$id is a foreign key because it appears in the subjects table where it matches each subject to a unique id."
  },
  {
    "objectID": "posts/2022-09-08-joining-data-in-r/index.html#left-join",
    "href": "posts/2022-09-08-joining-data-in-r/index.html#left-join",
    "title": "Joining data in R",
    "section": "Left Join",
    "text": "Left Join\nRecall the outcomes and subjects datasets above.\n\noutcomes\n\n# A tibble: 9 × 3\n  id    visit outcome\n  <chr> <int>   <dbl>\n1 a         0   3.74 \n2 a         1   4.36 \n3 a         2   3.23 \n4 b         0   3.22 \n5 b         1   0.290\n6 b         2   1.33 \n7 c         0   3.14 \n8 c         1   3.29 \n9 c         2   3.39 \n\nsubjects\n\n# A tibble: 3 × 2\n  id    house   \n  <chr> <chr>   \n1 a     detached\n2 b     rowhouse\n3 c     rowhouse\n\n\nSuppose we want to create a table that combines the information about houses (subjects) with the information about the outcomes (outcomes).\nWe can use the left_join() function to merge the outcomes and subjects tables and produce the output above.\n\nleft_join(x = outcomes, y = subjects, by = \"id\")\n\n# A tibble: 9 × 4\n  id    visit outcome house   \n  <chr> <int>   <dbl> <chr>   \n1 a         0   3.74  detached\n2 a         1   4.36  detached\n3 a         2   3.23  detached\n4 b         0   3.22  rowhouse\n5 b         1   0.290 rowhouse\n6 b         2   1.33  rowhouse\n7 c         0   3.14  rowhouse\n8 c         1   3.29  rowhouse\n9 c         2   3.39  rowhouse\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe by argument indicates the column (or columns) that the two tables have in common.\n\n\n\nLeft Join with Incomplete Data\nIn the previous examples, the subjects table didn’t have a visit column. But suppose it did? Maybe people move around during the study. We could image a table like this one.\n\nsubjects <- tibble(\n        id = c(\"a\", \"b\", \"c\"),\n        visit = c(0, 1, 0),\n        house = c(\"detached\", \"rowhouse\", \"rowhouse\"),\n)\n\nprint(subjects)\n\n# A tibble: 3 × 3\n  id    visit house   \n  <chr> <dbl> <chr>   \n1 a         0 detached\n2 b         1 rowhouse\n3 c         0 rowhouse\n\n\nWhen we left joint the tables now we get:\n\nleft_join(outcomes, subjects, by = c(\"id\", \"visit\"))\n\n# A tibble: 9 × 4\n  id    visit outcome house   \n  <chr> <dbl>   <dbl> <chr>   \n1 a         0   3.74  detached\n2 a         1   4.36  <NA>    \n3 a         2   3.23  <NA>    \n4 b         0   3.22  <NA>    \n5 b         1   0.290 rowhouse\n6 b         2   1.33  <NA>    \n7 c         0   3.14  rowhouse\n8 c         1   3.29  <NA>    \n9 c         2   3.39  <NA>    \n\n\n\n\n\n\n\n\nNote\n\n\n\nTwo things to point out here:\n\nIf we do not have information about a subject’s housing in a given visit, the left_join() function automatically inserts an NA value to indicate that it is missing.\nWe can “join” on multiple variable (e.g. here we joined on the id and the visit columns).\n\n\n\nWe may even have a situation where we are missing housing data for a subject completely. The following table has no information about subject a.\n\nsubjects <- tibble(\n        id = c(\"b\", \"c\"),\n        visit = c(1, 0),\n        house = c(\"rowhouse\", \"rowhouse\"),\n)\n\nsubjects\n\n# A tibble: 2 × 3\n  id    visit house   \n  <chr> <dbl> <chr>   \n1 b         1 rowhouse\n2 c         0 rowhouse\n\n\nBut we can still join the tables together and the house values for subject a will all be NA.\n\nleft_join(x = outcomes, y = subjects, by = c(\"id\", \"visit\"))\n\n# A tibble: 9 × 4\n  id    visit outcome house   \n  <chr> <dbl>   <dbl> <chr>   \n1 a         0   3.74  <NA>    \n2 a         1   4.36  <NA>    \n3 a         2   3.23  <NA>    \n4 b         0   3.22  <NA>    \n5 b         1   0.290 rowhouse\n6 b         2   1.33  <NA>    \n7 c         0   3.14  rowhouse\n8 c         1   3.29  <NA>    \n9 c         2   3.39  <NA>    \n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe bottom line for left_join() is that it always retains the values in the “left” argument (in this case the outcomes table).\n\nIf there are no corresponding values in the “right” argument, NA values will be filled in."
  },
  {
    "objectID": "posts/2022-09-08-joining-data-in-r/index.html#inner-join",
    "href": "posts/2022-09-08-joining-data-in-r/index.html#inner-join",
    "title": "Joining data in R",
    "section": "Inner Join",
    "text": "Inner Join\nThe inner_join() function only retains the rows of both tables that have corresponding values. Here we can see the difference.\n\ninner_join(x = outcomes, y = subjects, by = c(\"id\", \"visit\"))\n\n# A tibble: 2 × 4\n  id    visit outcome house   \n  <chr> <dbl>   <dbl> <chr>   \n1 b         1   0.290 rowhouse\n2 c         0   3.14  rowhouse"
  },
  {
    "objectID": "posts/2022-09-08-joining-data-in-r/index.html#right-join",
    "href": "posts/2022-09-08-joining-data-in-r/index.html#right-join",
    "title": "Joining data in R",
    "section": "Right Join",
    "text": "Right Join\nThe right_join() function is like the left_join() function except that it gives priority to the “right” hand argument.\n\nright_join(x = outcomes, y = subjects, by = c(\"id\", \"visit\"))\n\n# A tibble: 2 × 4\n  id    visit outcome house   \n  <chr> <dbl>   <dbl> <chr>   \n1 b         1   0.290 rowhouse\n2 c         0   3.14  rowhouse"
  },
  {
    "objectID": "posts/2022-10-13-working-with-text-sentiment-analysis/index.html",
    "href": "posts/2022-10-13-working-with-text-sentiment-analysis/index.html",
    "title": "Tidytext and sentiment analysis",
    "section": "",
    "text": "Material for this lecture was borrowed and adopted from\n\nText mining with R: A Tidy Approach from Julia Silge and David Robinson which uses the tidytext R package\nSupervised Machine Learning for Text Analsyis in R from Emil Hvitfeldt, Julia Sigle"
  },
  {
    "objectID": "posts/2022-10-13-working-with-text-sentiment-analysis/index.html#the-sentiments-dataset",
    "href": "posts/2022-10-13-working-with-text-sentiment-analysis/index.html#the-sentiments-dataset",
    "title": "Tidytext and sentiment analysis",
    "section": "The sentiments dataset",
    "text": "The sentiments dataset\nInside the tidytext package are several sentiment lexicons. A few things to note:\n\nThe lexicons are based on unigrams (single words)\nThe lexicons contain many English words and the words are assigned scores for positive/negative sentiment, and also possibly emotions like joy, anger, sadness, and so forth\n\nYou can use the get_sentiments() function to extract a specific lexicon.\nThe nrc lexicon categorizes words into multiple categories of positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust\n\nget_sentiments(\"nrc\")\n\n# A tibble: 13,872 × 2\n   word        sentiment\n   <chr>       <chr>    \n 1 abacus      trust    \n 2 abandon     fear     \n 3 abandon     negative \n 4 abandon     sadness  \n 5 abandoned   anger    \n 6 abandoned   fear     \n 7 abandoned   negative \n 8 abandoned   sadness  \n 9 abandonment anger    \n10 abandonment fear     \n# … with 13,862 more rows\n\n\nThe bing lexicon categorizes words in a binary fashion into positive and negative categories\n\nget_sentiments(\"bing\")\n\n# A tibble: 6,786 × 2\n   word        sentiment\n   <chr>       <chr>    \n 1 2-faces     negative \n 2 abnormal    negative \n 3 abolish     negative \n 4 abominable  negative \n 5 abominably  negative \n 6 abominate   negative \n 7 abomination negative \n 8 abort       negative \n 9 aborted     negative \n10 aborts      negative \n# … with 6,776 more rows\n\n\nThe AFINN lexicon assigns words with a score that runs between -5 and 5, with negative scores indicating negative sentiment and positive scores indicating positive sentiment\n\nget_sentiments(\"afinn\")\n\n# A tibble: 2,477 × 2\n   word       value\n   <chr>      <dbl>\n 1 abandon       -2\n 2 abandoned     -2\n 3 abandons      -2\n 4 abducted      -2\n 5 abduction     -2\n 6 abductions    -2\n 7 abhor         -3\n 8 abhorred      -3\n 9 abhorrent     -3\n10 abhors        -3\n# … with 2,467 more rows\n\n\nThe authors of the tidytext package note:\n\n“How were these sentiment lexicons put together and validated? They were constructed via either crowdsourcing (using, for example, Amazon Mechanical Turk) or by the labor of one of the authors, and were validated using some combination of crowdsourcing again, restaurant or movie reviews, or Twitter data. Given this information, we may hesitate to apply these sentiment lexicons to styles of text dramatically different from what they were validated on, such as narrative fiction from 200 years ago. While it is true that using these sentiment lexicons with, for example, Jane Austen’s novels may give us less accurate results than with tweets sent by a contemporary writer, we still can measure the sentiment content for words that are shared across the lexicon and the text.”\n\nTwo other caveats:\n\n“Not every English word is in the lexicons because many English words are pretty neutral. It is important to keep in mind that these methods do not take into account qualifiers before a word, such as in”no good” or “not true”; a lexicon-based method like this is based on unigrams only. For many kinds of text (like the narrative examples below), there are not sustained sections of sarcasm or negated text, so this is not an important effect.”\n\nand\n\n“One last caveat is that the size of the chunk of text that we use to add up unigram sentiment scores can have an effect on an analysis. A text the size of many paragraphs can often have positive and negative sentiment averaged out to about zero, while sentence-sized or paragraph-sized text often works better.”\n\n\nJoining together tidy text data with lexicons\nNow that we have our data in a tidy text format and we have learned about different types of lexicons in application for sentiment analysis, we can join the words together using a join function.\nFor example, what are the most common joy words in the book Emma? Here we will use the nrc lexicon and join the tidy_books dataset with the nrc_joy lexicon using the inner_join() function in dplyr.\n\nnrc_joy <- get_sentiments(\"nrc\") %>% \n  filter(sentiment == \"joy\")\n\ntidy_books %>%\n  filter(book == \"Emma\") %>%\n  inner_join(nrc_joy) %>%\n  count(word, sort = TRUE)\n\nJoining, by = \"word\"\n\n\n# A tibble: 297 × 2\n   word          n\n   <chr>     <int>\n 1 friend      166\n 2 hope        143\n 3 happy       125\n 4 love        117\n 5 deal         92\n 6 found        92\n 7 happiness    76\n 8 pretty       68\n 9 true         66\n10 comfort      65\n# … with 287 more rows\n\n\nWe can do things like investigate how the sentiment of the text changes throughout each of Jane’s novels.\nHere we will use the bing lexicon, find a sentiment score for each word, and then use inner_join().\n\ntidy_books %>%\n  inner_join(get_sentiments(\"bing\")) %>% \n  head()\n\nJoining, by = \"word\"\n\n\n# A tibble: 6 × 5\n  book                linenumber chapter word        sentiment\n  <fct>                    <int>   <int> <chr>       <chr>    \n1 Sense & Sensibility         16       1 respectable positive \n2 Sense & Sensibility         18       1 advanced    positive \n3 Sense & Sensibility         20       1 death       negative \n4 Sense & Sensibility         21       1 loss        negative \n5 Sense & Sensibility         25       1 comfortably positive \n6 Sense & Sensibility         28       1 goodness    positive \n\n\nThen we can count how many positive and negative words there are in each section of the books. We create an index to help us keep track of where we are in the narrative, which uses integer division, and counts up sections of 80 lines of text.\n\ntidy_books %>%\n  inner_join(get_sentiments(\"bing\")) %>%\n  count(book, index = linenumber %/% 80, sentiment) \n\nJoining, by = \"word\"\n\n\n# A tibble: 1,840 × 4\n   book                index sentiment     n\n   <fct>               <dbl> <chr>     <int>\n 1 Sense & Sensibility     0 negative     16\n 2 Sense & Sensibility     0 positive     26\n 3 Sense & Sensibility     1 negative     19\n 4 Sense & Sensibility     1 positive     44\n 5 Sense & Sensibility     2 negative     12\n 6 Sense & Sensibility     2 positive     23\n 7 Sense & Sensibility     3 negative     15\n 8 Sense & Sensibility     3 positive     22\n 9 Sense & Sensibility     4 negative     16\n10 Sense & Sensibility     4 positive     29\n# … with 1,830 more rows\n\n\nNote: The %/% operator does integer division (x %/% y is equivalent to floor(x/y)) so the index keeps track of which 80-line section of text we are counting up negative and positive sentiment in.\nFinally, we use spread() to have positive and negative counts in different columns, and then use mutate() to calculate a net sentiment (positive - negative).\n\njane_austen_sentiment <- \n  tidy_books %>%\n  inner_join(get_sentiments(\"bing\")) %>%\n  count(book, index = linenumber %/% 80, sentiment) %>%\n  spread(sentiment, n, fill = 0) %>%\n  mutate(sentiment = positive - negative)\n\nJoining, by = \"word\"\n\njane_austen_sentiment\n\n# A tibble: 920 × 5\n   book                index negative positive sentiment\n   <fct>               <dbl>    <dbl>    <dbl>     <dbl>\n 1 Sense & Sensibility     0       16       26        10\n 2 Sense & Sensibility     1       19       44        25\n 3 Sense & Sensibility     2       12       23        11\n 4 Sense & Sensibility     3       15       22         7\n 5 Sense & Sensibility     4       16       29        13\n 6 Sense & Sensibility     5       16       39        23\n 7 Sense & Sensibility     6       24       37        13\n 8 Sense & Sensibility     7       22       39        17\n 9 Sense & Sensibility     8       30       35         5\n10 Sense & Sensibility     9       14       18         4\n# … with 910 more rows\n\n\nThen we can plot the sentiment scores across the sections of each novel:\n\nggplot(jane_austen_sentiment, aes(index, sentiment, fill = book)) +\n  geom_col(show.legend = FALSE) +\n  facet_wrap(~book, ncol = 2, scales = \"free_x\")\n\n\n\n\nWe can see how the sentiment trajectory of the novel changes over time.\n\n\nWord clouds\nYou can also do things like create word clouds using the wordcloud package.\n\nlibrary(wordcloud)\n\nLoading required package: RColorBrewer\n\ntidy_books %>%\n  anti_join(stop_words) %>%\n  count(word) %>%\n  with(wordcloud(word, n, max.words = 100))\n\nJoining, by = \"word\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html",
    "href": "posts/2022-10-06-regular-expressions/index.html",
    "title": "Regular expressions",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://r4ds.had.co.nz/strings\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-regular-expressions\nhttps://r4ds.had.co.nz/strings"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#regex-basics",
    "href": "posts/2022-10-06-regular-expressions/index.html#regex-basics",
    "title": "Regular expressions",
    "section": "regex basics",
    "text": "regex basics\nA regular expression (also known as a “regex” or “regexp”) is a concise language for describing patterns in character strings.\nRegex could be patterns that could be contained within another string.\n\n\n\n\n\n\nExample\n\n\n\nFor example, if we wanted to search for the pattern “ai” in the character string “The rain in Spain”, we see it appears twice!\n“The rain in Spain”\n\n\nGenerally, a regular expression can be used for e.g.\n\nsearching for a pattern or string within another string (e.g searching for the string “a” in the string “Maryland”)\nreplacing one part of a string with another string (e.g replacing the string “t” with “p” in the string “hot” where you are changing the string “hot” to “hop”)\n\nIf you have never worked with regular expressions, it can seem like maybe a baby hit the keys on your keyboard (complete gibberish), but it will slowly make sense once you learn the syntax.\nSoon you will be able create incredibly powerful regular expressions in your day-to-day work."
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#string-basics",
    "href": "posts/2022-10-06-regular-expressions/index.html#string-basics",
    "title": "Regular expressions",
    "section": "string basics",
    "text": "string basics\nIn R, you can create (character) strings with either single quotes ('hello!') or double quotes (\"hello!\") – no difference (not true for other languages!).\nI recommend using the double quotes, unless you want to create a string with multiple \".\n\nstring1 <- \"This is a string\"\nstring2 <- 'If I want to include a \"quote\" inside a string, I use single quotes'\n\n\n\n\n\n\n\nPro-tip\n\n\n\nStrings can be tricky when executing them. If you forget to close a quote, you’ll see +\n> \"This is a string without a closing quote\n+ \n+ \n+ HELP I'M STUCK\nIf this happen to you, take a deep breath, press Escape and try again.\n\n\nMultiple strings are often stored in a character vector, which you can create with c():\n\nc(\"one\", \"two\", \"three\")\n\n[1] \"one\"   \"two\"   \"three\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#metacharacters",
    "href": "posts/2022-10-06-regular-expressions/index.html#metacharacters",
    "title": "Regular expressions",
    "section": "metacharacters",
    "text": "metacharacters\nThe first metacharacter that we will discuss is \".\".\nThe metacharacter that only consists of a period represents any character other than a new line (we will discuss new lines soon).\n\n\n\n\n\n\nExample\n\n\n\nLet’s take a look at some examples using the period regex:\n\ngrepl(\".\", \"Maryland\")\n\n[1] TRUE\n\ngrepl(\".\", \"*&2[0+,%<@#~|}\")\n\n[1] TRUE\n\ngrepl(\".\", \"\")\n\n[1] FALSE\n\n\n\n\nAs you can see the period metacharacter is very liberal.\nThis metacharacter is most useful when you do not care about a set of characters in a regular expression.\n\n\n\n\n\n\nExample\n\n\n\nHere is another example\n\ngrepl(\"a.b\", c(\"aaa\", \"aab\", \"abb\", \"acadb\"))\n\n[1] FALSE  TRUE  TRUE  TRUE\n\n\nIn the case above, grepl() returns TRUE for all strings that contain an a followed by any other character followed by a b."
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#repetition",
    "href": "posts/2022-10-06-regular-expressions/index.html#repetition",
    "title": "Regular expressions",
    "section": "repetition",
    "text": "repetition\nYou can specify a regular expression that contains a certain number of characters or metacharacters using the enumeration metacharacters (or sometimes called quantifiers).\n\n+: indicates that one or more of the preceding expression should be present (or matches at least 1 time)\n*: indicates that zero or more of the preceding expression is present (or matches at least 0 times)\n?: indicates that zero or 1 of the preceding expression is not present or present at most 1 time (or matches between 0 and 1 times)\n\n\n\n\n\n\n\nExample\n\n\n\nLet’s take a look at some examples using these metacharacters:\n\n# Does \"Maryland\" contain one or more of \"a\" ?\ngrepl(\"a+\", \"Maryland\")\n\n[1] TRUE\n\n# Does \"Maryland\" contain one or more of \"x\" ?\ngrepl(\"x+\", \"Maryland\")\n\n[1] FALSE\n\n# Does \"Maryland\" contain zero or more of \"x\" ?\ngrepl(\"x*\", \"Maryland\")\n\n[1] TRUE\n\n\n\n\nIf you want to do more than one character, you need to wrap it in ().\n\n# Does \"Maryland\" contain zero or more of \"x\" ?\ngrepl(\"(xx)*\", \"Maryland\")\n\n[1] TRUE\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s practice a few out together. Make the following regular expressions for the character string “spookyhalloween”:\n\nDoes “zz” appear 1 or more times?\nDoes “ee” appear 1 or more times?\nDoes “oo” appear 0 or more times?\nDoes “ii” appear 0 or more times?\n\n\n## try it out\n\n\n\nYou can also specify exact numbers of expressions using curly brackets {}.\n\n{n}: exactly n\n{n,}: n or more\n{,m}: at most m\n{n,m}: between n and m\n\nFor example \"a{5}\" specifies “a exactly five times”, \"a{2,5}\" specifies “a between 2 and 5 times,” and \"a{2,}\" specifies “a at least 2 times.” Let’s take a look at some examples:\n\n# Does \"Mississippi\" contain exactly 2 adjacent \"s\" ?\ngrepl(\"s{2}\", \"Mississippi\")\n\n[1] TRUE\n\n# This is equivalent to the expression above:\ngrepl(\"ss\", \"Mississippi\")\n\n[1] TRUE\n\n# Does \"Mississippi\" contain between 1 and 3 adjacent \"s\" ?\ngrepl(\"s{1,3}\", \"Mississippi\")\n\n[1] TRUE\n\n# Does \"Mississippi\" contain between 2 and 3 adjacent \"i\" ?\ngrepl(\"i{2,3}\", \"Mississippi\")\n\n[1] FALSE\n\n# Does \"Mississippi\" contain between 2 adjacent \"iss\" ?\ngrepl(\"(iss){2}\", \"Mississippi\")\n\n[1] TRUE\n\n# Does \"Mississippi\" contain between 2 adjacent \"ss\" ?\ngrepl(\"(ss){2}\", \"Mississippi\")\n\n[1] FALSE\n\n# Does \"Mississippi\" contain the pattern of an \"i\" followed by \n# 2 of any character, with that pattern repeated three times adjacently?\ngrepl(\"(i.{2}){3}\", \"Mississippi\")\n\n[1] TRUE\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s practice a few out together. Make the following regular expressions for the character string “spookyspookyhalloweenspookyspookyhalloween”:\n\nSearch for “spooky” exactly 2 times. What about 3 times?\nSearch for “spooky” exactly 2 times followed by any character of length 9 (i.e. “halloween”).\nSame search as above, but search for that twice in a row.\nSame search as above, but search for that three times in a row.\n\n\n## try it out"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#capture-group",
    "href": "posts/2022-10-06-regular-expressions/index.html#capture-group",
    "title": "Regular expressions",
    "section": "capture group",
    "text": "capture group\nIn the examples above, I used parentheses () to create a capturing group. A capturing group allows you to use quantifiers on other regular expressions.\nIn the “Mississippi” example, I first created the regex \"i.{2}\" which matches i followed by any two characters (“iss” or “ipp”). Then, I used a capture group to wrap that regex, and to specify exactly three adjacent occurrences of that regex.\nYou can specify sets of characters (or character sets or character classes) with regular expressions, some of which come built in, but you can build your own character sets too.\nMore on character sets next."
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#character-sets",
    "href": "posts/2022-10-06-regular-expressions/index.html#character-sets",
    "title": "Regular expressions",
    "section": "character sets",
    "text": "character sets\nFirst, we will discuss the built in character sets:\n\nwords (\"\\\\w\") = Words specify any letter, digit, or a underscore\ndigits (\"\\\\d\") = Digits specify the digits 0 through 9\nwhitespace characters (\"\\\\s\") = Whitespace specifies line breaks, tabs, or spaces\n\nEach of these character sets have their own compliments:\n\nnot words (\"\\\\W\")\nnot digits (\"\\\\D\")\nnot whitespace characters (\"\\\\S\")\n\nEach specifies all of the characters not included in their corresponding character sets.\n\n\n\n\n\n\nInteresting fact\n\n\n\nTechnically, you are using the a character set \"\\d\" or \"\\s\" (with only one black slash), but because you are using this character set in a string, you need the second \\ to escape the string. So you will type \"\\\\d\" or \"\\\\s\".\n\n\"\\\\d\"\n\n[1] \"\\\\d\"\n\n\nSo for example, to include a literal single or double quote in a string you can use \\ to “escape” the string and being able to include a single or double quote:\n\ndouble_quote <- \"\\\"\" \ndouble_quote\n\n[1] \"\\\"\"\n\nsingle_quote <- '\\''\nsingle_quote\n\n[1] \"'\"\n\n\nThat means if you want to include a literal backslash, you will need to double it up: \"\\\\\".\n\n\nIn fact, putting two backslashes before any punctuation mark that is also a metacharacter indicates that you are looking for the symbol and not the metacharacter meaning.\nFor example \"\\\\.\" indicates you are trying to match a period in a string. Let’s take a look at a few examples:\n\ngrepl(\"\\\\+\", \"tragedy + time = humor\")\n\n[1] TRUE\n\ngrepl(\"\\\\.\", \"https://publichealth.jhu.edu\")\n\n[1] TRUE\n\n\n\n\n\n\n\n\nBeware\n\n\n\nThe printed representation of a string is not the same as string itself, because the printed representation shows the escapes. To see the raw contents of the string, use writeLines():\n\nx <- c(\"\\'\", \"\\\"\", \"\\\\\")\nx\n\n[1] \"'\"  \"\\\"\" \"\\\\\"\n\nwriteLines(x)\n\n'\n\"\n\\\n\n\n\n\nThere are a handful of other special characters. The most common are\n\n\"\\n\": newline\n\"\\t\": tab,\n\nbut you can see the complete list by requesting help (run the following in the console and a help file will appear:\n\n?\"'\"\n\nYou will also sometimes see strings like “0b5”, this is a way of writing non-English characters that works on all platforms:\n\nx <- c(\"\\\\t\", \"\\\\n\", \"\\u00b5\")\nx\n\n[1] \"\\\\t\" \"\\\\n\" \"µ\"  \n\nwriteLines(x)\n\n\\t\n\\n\nµ\n\n\n\n\n\n\n\n\nExample\n\n\n\nLet’s take a look at a few examples of built in character sets: \"\\w\", \"\\d\", \"\\s\".\n\ngrepl(\"\\\\w\", \"abcdefghijklmnopqrstuvwxyz0123456789\")\n\n[1] TRUE\n\ngrepl(\"\\\\d\", \"0123456789\")\n\n[1] TRUE\n\n# \"\\n\" is the metacharacter for a new line\n# \"\\t\" is the metacharacter for a tab\ngrepl(\"\\\\s\", \"\\n\\t   \")\n\n[1] TRUE\n\ngrepl(\"\\\\d\", \"abcdefghijklmnopqrstuvwxyz\")\n\n[1] FALSE\n\ngrepl(\"\\\\D\", \"abcdefghijklmnopqrstuvwxyz\")\n\n[1] TRUE\n\ngrepl(\"\\\\w\", \"\\n\\t   \")\n\n[1] FALSE"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#brackets",
    "href": "posts/2022-10-06-regular-expressions/index.html#brackets",
    "title": "Regular expressions",
    "section": "brackets",
    "text": "brackets\nYou can also specify specific character sets using straight brackets [].\nFor example a character set of just the vowels would look like: \"[aeiou]\".\n\ngrepl(\"[aeiou]\", \"rhythms\")\n\n[1] FALSE\n\n\nYou can find the complement to a specific character by putting a carrot ^ after the first bracket. For example \"[^aeiou]\" matches all characters except the lowercase vowels.\n\ngrepl(\"[^aeiou]\", \"rhythms\")\n\n[1] TRUE"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#ranges",
    "href": "posts/2022-10-06-regular-expressions/index.html#ranges",
    "title": "Regular expressions",
    "section": "ranges",
    "text": "ranges\nYou can also specify ranges of characters using a hyphen - inside of the brackets.\nFor example:\n\n\"[a-m]\" matches all of the lowercase characters between a and m\n\"[5-8]\" matches any digit between 5 and 8 inclusive\n\n\n\n\n\n\n\nExample\n\n\n\nLet’s take a look at some examples using custom character sets:\n\ngrepl(\"[a-m]\", \"xyz\")\n\n[1] FALSE\n\ngrepl(\"[a-m]\", \"ABC\")\n\n[1] FALSE\n\ngrepl(\"[a-mA-M]\", \"ABC\")\n\n[1] TRUE"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#beginning-and-end",
    "href": "posts/2022-10-06-regular-expressions/index.html#beginning-and-end",
    "title": "Regular expressions",
    "section": "beginning and end",
    "text": "beginning and end\nThere are also metacharacters for matching the beginning and the end of a string which are \"^\" and \"$\" respectively.\nLet’s take a look at a few examples:\n\ngrepl(\"^a\", c(\"bab\", \"aab\"))\n\n[1] FALSE  TRUE\n\ngrepl(\"b$\", c(\"bab\", \"aab\"))\n\n[1] TRUE TRUE\n\ngrepl(\"^[ab]*$\", c(\"bab\", \"aab\", \"abc\"))\n\n[1]  TRUE  TRUE FALSE"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#or-metacharacter",
    "href": "posts/2022-10-06-regular-expressions/index.html#or-metacharacter",
    "title": "Regular expressions",
    "section": "OR metacharacter",
    "text": "OR metacharacter\nThe last metacharacter we will discuss is the OR metacharacter (\"|\").\nThe OR metacharacter matches either the regex on the left or the regex on the right side of this character. A few examples:\n\ngrepl(\"a|b\", c(\"abc\", \"bcd\", \"cde\"))\n\n[1]  TRUE  TRUE FALSE\n\ngrepl(\"North|South\", c(\"South Dakota\", \"North Carolina\", \"West Virginia\"))\n\n[1]  TRUE  TRUE FALSE"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#state.name-example",
    "href": "posts/2022-10-06-regular-expressions/index.html#state.name-example",
    "title": "Regular expressions",
    "section": "state.name example",
    "text": "state.name example\n\n\n\n\n\n\nExample\n\n\n\nFinally, we have learned enough to create a regular expression that matches all state names that both begin and end with a vowel:\n\nWe match the beginning of a string.\nWe create a character set of just capitalized vowels.\nWe specify one instance of that set.\nThen any number of characters until:\nA character set of just lowercase vowels.\nWe specify one instance of that set.\nWe match the end of a string.\n\n\nstart_end_vowel <- \"^[AEIOU]{1}.+[aeiou]{1}$\"\nvowel_state_lgl <- grepl(start_end_vowel, state.name)\nhead(vowel_state_lgl)\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE\n\nstate.name[vowel_state_lgl]\n\n[1] \"Alabama\"  \"Alaska\"   \"Arizona\"  \"Idaho\"    \"Indiana\"  \"Iowa\"     \"Ohio\"    \n[8] \"Oklahoma\"\n\n\n\n\nBelow is a table of several important metacharacters:\n\n\n\n\n\nMetacharacter\nMeaning\n\n\n\n\n.\nAny Character\n\n\n\\w\nA Word\n\n\n\\W\nNot a Word\n\n\n\\d\nA Digit\n\n\n\\D\nNot a Digit\n\n\n\\s\nWhitespace\n\n\n\\S\nNot Whitespace\n\n\n[xyz]\nA Set of Characters\n\n\n[^xyz]\nNegation of Set\n\n\n[a-z]\nA Range of Characters\n\n\n^\nBeginning of String\n\n\n$\nEnd of String\n\n\n\\n\nNewline\n\n\n+\nOne or More of Previous\n\n\n*\nZero or More of Previous\n\n\n?\nZero or One of Previous\n\n\n|\nEither the Previous or the Following\n\n\n{5}\nExactly 5 of Previous\n\n\n{2, 5}\nBetween 2 and 5 or Previous\n\n\n{2, }\nMore than 2 of Previous"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#grep",
    "href": "posts/2022-10-06-regular-expressions/index.html#grep",
    "title": "Regular expressions",
    "section": "grep()",
    "text": "grep()\nThen, there is old fashioned grep(pattern, x), which returns the indices of the vector that match the regex:\n\ngrep(pattern = \"[Ii]\", x = c(\"Hawaii\", \"Illinois\", \"Kentucky\"))\n\n[1] 1 2"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#sub",
    "href": "posts/2022-10-06-regular-expressions/index.html#sub",
    "title": "Regular expressions",
    "section": "sub()",
    "text": "sub()\nThe sub(pattern, replacement, x) function takes as arguments a regex, a “replacement,” and a vector of strings. This function will replace the first instance of that regex found in each string.\n\nsub(pattern = \"[Ii]\", replacement = \"1\", x= c(\"Hawaii\", \"Illinois\", \"Kentucky\"))\n\n[1] \"Hawa1i\"   \"1llinois\" \"Kentucky\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#gsub",
    "href": "posts/2022-10-06-regular-expressions/index.html#gsub",
    "title": "Regular expressions",
    "section": "gsub()",
    "text": "gsub()\nThe gsub(pattern, replacement, x) function is nearly the same as sub() except it will replace every instance of the regex that is matched in each string.\n\ngsub(\"[Ii]\", \"1\", c(\"Hawaii\", \"Illinois\", \"Kentucky\"))\n\n[1] \"Hawa11\"   \"1ll1no1s\" \"Kentucky\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#strsplit",
    "href": "posts/2022-10-06-regular-expressions/index.html#strsplit",
    "title": "Regular expressions",
    "section": "strsplit()",
    "text": "strsplit()\nThe strsplit(x, split) function will split up strings (split) according to the provided regex (x) .\nIf strsplit() is provided with a vector of strings it will return a list of string vectors.\n\ntwo_s <- state.name[grep(\"ss\", state.name)]\ntwo_s\n\n[1] \"Massachusetts\" \"Mississippi\"   \"Missouri\"      \"Tennessee\"    \n\nstrsplit(x = two_s, split = \"ss\")\n\n[[1]]\n[1] \"Ma\"        \"achusetts\"\n\n[[2]]\n[1] \"Mi\"   \"i\"    \"ippi\"\n\n[[3]]\n[1] \"Mi\"   \"ouri\"\n\n[[4]]\n[1] \"Tenne\" \"ee\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#str_extract",
    "href": "posts/2022-10-06-regular-expressions/index.html#str_extract",
    "title": "Regular expressions",
    "section": "str_extract",
    "text": "str_extract\nThe str_extract(string, pattern) function returns the sub-string of a string (string) that matches the provided regular expression (pattern).\n\nlibrary(stringr)\nstate_tbl <- paste(state.name, state.area, state.abb)\nhead(state_tbl)\n\n[1] \"Alabama 51609 AL\"     \"Alaska 589757 AK\"     \"Arizona 113909 AZ\"   \n[4] \"Arkansas 53104 AR\"    \"California 158693 CA\" \"Colorado 104247 CO\"  \n\nstr_extract(state_tbl, \"[0-9]+\")\n\n [1] \"51609\"  \"589757\" \"113909\" \"53104\"  \"158693\" \"104247\" \"5009\"   \"2057\"  \n [9] \"58560\"  \"58876\"  \"6450\"   \"83557\"  \"56400\"  \"36291\"  \"56290\"  \"82264\" \n[17] \"40395\"  \"48523\"  \"33215\"  \"10577\"  \"8257\"   \"58216\"  \"84068\"  \"47716\" \n[25] \"69686\"  \"147138\" \"77227\"  \"110540\" \"9304\"   \"7836\"   \"121666\" \"49576\" \n[33] \"52586\"  \"70665\"  \"41222\"  \"69919\"  \"96981\"  \"45333\"  \"1214\"   \"31055\" \n[41] \"77047\"  \"42244\"  \"267339\" \"84916\"  \"9609\"   \"40815\"  \"68192\"  \"24181\" \n[49] \"56154\"  \"97914\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#str_detect",
    "href": "posts/2022-10-06-regular-expressions/index.html#str_detect",
    "title": "Regular expressions",
    "section": "str_detect",
    "text": "str_detect\nThe str_detect(string, pattern) is equivalent to grepl(pattern,x):\n\nstr_detect(state_tbl, \"[0-9]+\")\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[46] TRUE TRUE TRUE TRUE TRUE\n\ngrepl(\"[0-9]+\", state_tbl)\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[46] TRUE TRUE TRUE TRUE TRUE\n\n\nIt detects the presence or absence of a pattern in a string."
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#str_order",
    "href": "posts/2022-10-06-regular-expressions/index.html#str_order",
    "title": "Regular expressions",
    "section": "str_order",
    "text": "str_order\nThe str_order(x) function returns a numeric vector that corresponds to the alphabetical order of the strings in the provided vector (x).\n\nhead(state.name)\n\n[1] \"Alabama\"    \"Alaska\"     \"Arizona\"    \"Arkansas\"   \"California\"\n[6] \"Colorado\"  \n\nstr_order(state.name)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\nhead(state.abb)\n\n[1] \"AL\" \"AK\" \"AZ\" \"AR\" \"CA\" \"CO\"\n\nstr_order(state.abb)\n\n [1]  2  1  4  3  5  6  7  8  9 10 11 15 12 13 14 16 17 18 21 20 19 22 23 25 24\n[26] 26 33 34 27 29 30 31 28 32 35 36 37 38 39 40 41 42 43 44 46 45 47 49 48 50"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#str_replace",
    "href": "posts/2022-10-06-regular-expressions/index.html#str_replace",
    "title": "Regular expressions",
    "section": "str_replace",
    "text": "str_replace\nThe str_replace(string, pattern, replace) is equivalent to sub(pattern, replacement, x):\n\nstr_replace(string = state.name, pattern = \"[Aa]\", replace = \"B\")\n\n [1] \"Blabama\"        \"Blaska\"         \"Brizona\"        \"Brkansas\"      \n [5] \"CBlifornia\"     \"ColorBdo\"       \"Connecticut\"    \"DelBware\"      \n [9] \"FloridB\"        \"GeorgiB\"        \"HBwaii\"         \"IdBho\"         \n[13] \"Illinois\"       \"IndiBna\"        \"IowB\"           \"KBnsas\"        \n[17] \"Kentucky\"       \"LouisiBna\"      \"MBine\"          \"MBryland\"      \n[21] \"MBssachusetts\"  \"MichigBn\"       \"MinnesotB\"      \"Mississippi\"   \n[25] \"Missouri\"       \"MontBna\"        \"NebrBska\"       \"NevBda\"        \n[29] \"New HBmpshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North CBrolina\" \"North DBkota\"   \"Ohio\"           \"OklBhoma\"      \n[37] \"Oregon\"         \"PennsylvBnia\"   \"Rhode IslBnd\"   \"South CBrolina\"\n[41] \"South DBkota\"   \"Tennessee\"      \"TexBs\"          \"UtBh\"          \n[45] \"Vermont\"        \"VirginiB\"       \"WBshington\"     \"West VirginiB\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\nsub(pattern = \"[Aa]\", replacement = \"B\", x= state.name)\n\n [1] \"Blabama\"        \"Blaska\"         \"Brizona\"        \"Brkansas\"      \n [5] \"CBlifornia\"     \"ColorBdo\"       \"Connecticut\"    \"DelBware\"      \n [9] \"FloridB\"        \"GeorgiB\"        \"HBwaii\"         \"IdBho\"         \n[13] \"Illinois\"       \"IndiBna\"        \"IowB\"           \"KBnsas\"        \n[17] \"Kentucky\"       \"LouisiBna\"      \"MBine\"          \"MBryland\"      \n[21] \"MBssachusetts\"  \"MichigBn\"       \"MinnesotB\"      \"Mississippi\"   \n[25] \"Missouri\"       \"MontBna\"        \"NebrBska\"       \"NevBda\"        \n[29] \"New HBmpshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North CBrolina\" \"North DBkota\"   \"Ohio\"           \"OklBhoma\"      \n[37] \"Oregon\"         \"PennsylvBnia\"   \"Rhode IslBnd\"   \"South CBrolina\"\n[41] \"South DBkota\"   \"Tennessee\"      \"TexBs\"          \"UtBh\"          \n[45] \"Vermont\"        \"VirginiB\"       \"WBshington\"     \"West VirginiB\" \n[49] \"Wisconsin\"      \"Wyoming\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#str_pad",
    "href": "posts/2022-10-06-regular-expressions/index.html#str_pad",
    "title": "Regular expressions",
    "section": "str_pad",
    "text": "str_pad\nThe str_pad(string, width, side, pad) function pads strings (string) with other characters, which is often useful when the string is going to be eventually printed for a person to read.\n\nstr_pad(\"Thai\", width = 8, side = \"left\", pad = \"-\")\n\n[1] \"----Thai\"\n\nstr_pad(\"Thai\", width = 8, side = \"right\", pad = \"-\")\n\n[1] \"Thai----\"\n\nstr_pad(\"Thai\", width = 8, side = \"both\", pad = \"-\")\n\n[1] \"--Thai--\"\n\n\nThe str_to_title(string) function acts just like tolower() and toupper() except it puts strings into Title Case.\n\ncases <- c(\"CAPS\", \"low\", \"Title\")\nstr_to_title(cases)\n\n[1] \"Caps\"  \"Low\"   \"Title\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#str_trim",
    "href": "posts/2022-10-06-regular-expressions/index.html#str_trim",
    "title": "Regular expressions",
    "section": "str_trim",
    "text": "str_trim\nThe str_trim(string) function deletes white space from both sides of a string.\n\nto_trim <- c(\"   space\", \"the    \", \"    final frontier  \")\nstr_trim(to_trim)\n\n[1] \"space\"          \"the\"            \"final frontier\""
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#str_wrap",
    "href": "posts/2022-10-06-regular-expressions/index.html#str_wrap",
    "title": "Regular expressions",
    "section": "str_wrap",
    "text": "str_wrap\nThe str_wrap(string) function inserts newlines in strings so that when the string is printed each line’s length is limited.\n\npasted_states <- paste(state.name[1:20], collapse = \" \")\n\ncat(str_wrap(pasted_states, width = 80))\n\nAlabama Alaska Arizona Arkansas California Colorado Connecticut Delaware Florida\nGeorgia Hawaii Idaho Illinois Indiana Iowa Kansas Kentucky Louisiana Maine\nMaryland\n\ncat(str_wrap(pasted_states, width = 30))\n\nAlabama Alaska Arizona\nArkansas California Colorado\nConnecticut Delaware Florida\nGeorgia Hawaii Idaho Illinois\nIndiana Iowa Kansas Kentucky\nLouisiana Maine Maryland"
  },
  {
    "objectID": "posts/2022-10-06-regular-expressions/index.html#word",
    "href": "posts/2022-10-06-regular-expressions/index.html#word",
    "title": "Regular expressions",
    "section": "word",
    "text": "word\nThe word() function allows you to index each word in a string as if it were a vector.\n\na_tale <- \"It was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness\"\n\nword(a_tale, 2)\n\n[1] \"was\"\n\nword(a_tale, end = 3) # end = last word to extract\n\n[1] \"It was the\"\n\nword(a_tale, start = 11, end = 15) # start = first word to extract\n\n[1] \"of times it was the\""
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome! I am very excited to have you in our one-term (i.e. half a semester) course on Statistical Computing course number (140.776) offered by the Department of Biostatistics at the Johns Hopkins Bloomberg School of Public Health.\nThis course is designed for ScM and PhD students at Johns Hopkins Bloomberg School of Public Health. I am pretty flexible about permitting outside students, but I want everyone to be aware of the goals and assumptions so no one feels like they are surprised by how the class works.\nThis class is not designed to teach the theoretical aspects of statistical or computational methods, but rather the goal is to help with the practical issues related to setting up a statistical computing environment for data analyses, developing high-quality R packages, conducting reproducible data analyses, best practices for data visualization and writing code, and creating websites for personal or project use."
  },
  {
    "objectID": "posts/welcome/index.html#disability-support-service",
    "href": "posts/welcome/index.html#disability-support-service",
    "title": "Welcome!",
    "section": "Disability Support Service",
    "text": "Disability Support Service\nStudents requiring accommodations for disabilities should register with Student Disability Service (SDS). It is the responsibility of the student to register for accommodations with SDS. Accommodations take effect upon approval and apply to the remainder of the time for which a student is registered and enrolled at the Bloomberg School of Public Health. Once you are f a student in your class has approved accommodations you will receive formal notification and the student will be encouraged to reach out. If you have questions about requesting accommodations, please contact BSPH.dss@jhu.edu."
  },
  {
    "objectID": "posts/welcome/index.html#previous-versions-of-the-class",
    "href": "posts/welcome/index.html#previous-versions-of-the-class",
    "title": "Welcome!",
    "section": "Previous versions of the class",
    "text": "Previous versions of the class\n\nhttps://www.stephaniehicks.com/jhustatcomputing2021\nhttps://rdpeng.github.io/Biostat776"
  },
  {
    "objectID": "posts/welcome/index.html#typos-and-corrections",
    "href": "posts/welcome/index.html#typos-and-corrections",
    "title": "Welcome!",
    "section": "Typos and corrections",
    "text": "Typos and corrections\nFeel free to submit typos/errors/etc via the github repository associated with the class: https://github.com/stephaniehicks/jhustatcomputing2022. You will have the thanks of your grateful instructor!"
  },
  {
    "objectID": "posts/welcome/index.html#rtistry",
    "href": "posts/welcome/index.html#rtistry",
    "title": "Welcome!",
    "section": "rtistry",
    "text": "rtistry\n\n\n\n\n\n[‘Unboxing’ from Danielle Navarro https://art.djnavarro.net]"
  },
  {
    "objectID": "posts/2022-09-01-literate-programming/index.html",
    "href": "posts/2022-09-01-literate-programming/index.html",
    "title": "Literate Statistical Programming",
    "section": "",
    "text": "Learning objectives\n\n\n\n\n\n\nLearning objectives\n\n\n\nAt the end of this lesson you will:\n\nBe able to define literate programming\nRecognize differences between available tools to for literate programming\nKnow how to efficiently work within RStudio for efficient literate programming\nCreate a R Markdown document\n\n\n\n\n\nIntroduction\nOne basic idea to make writing reproducible reports easier is what’s known as literate statistical programming (or sometimes called literate statistical practice). This comes from the idea of literate programming in the area of writing computer programs.\nThe idea is to think of a report or a publication as a stream of text and code.\n\nThe text is readable by people and the code is readable by computers.\nThe analysis is described in a series of text and code chunks.\nEach kind of code chunk will do something like load some data or compute some results.\nEach text chunk will relay something in a human readable language.\n\nThere might also be presentation code that formats tables and figures and there’s article text that explains what’s going on around all this code. This stream of text and code is a literate statistical program or a literate statistical analysis.\n\nWeaving and Tangling\nLiterate programs by themselves are a bit difficult to work with, but they can be processed in two important ways.\nLiterate programs can be weaved to produce human readable documents like PDFs or HTML web pages, and they can tangled to produce machine-readable “documents”, or in other words, machine readable code.\nThe basic idea behind literate programming in order to generate the different kinds of output you might need, you only need a single source document—you can weave and tangle to get the rest.\nIn order to use a system like this you need a documentational language, that’s human readable, and you need a programming language that’s machine readable (or can be compiled/interpreted into something that’s machine readable).\n\n\nSweave\nOne of the original literate programming systems in R that was designed to do this was called Sweave. Sweave enables users to combine R code with a documentation program called LaTeX.\nSweave files ends a .Rnw and have R code weaved through the document:\n<<plot1, height=4, width=5, eval=FALSE>>=\ndata(airquality)\nplot(airquality$Ozone ~ airquality$Wind)\n@\nOnce you have created your .Rnw file, Sweave will process the file, executing the R chunks and replacing them with output as appropriate before creating the PDF document.\nIt was originally developed by Fritz Leisch, who is a core member of R, and the code base is still maintained by R Core. The Sweave system comes with any installation of R.\nThere are many limitations to the original Sweave system.\n\nOne of the limitations is that it is focused primarily on LaTeX, which is not a documentation language that many people are familiar with.\nTherefore, it can be difficult to learn this type of markup language if you’re not already in a field that uses it regularly.\nSweave also lacks a lot of features that people find useful like caching, and multiple plots per page and mixing programming languages.\n\nInstead, folks have moved towards using something called knitr, which offers everything Sweave does, plus it extends it further.\n\nWith Sweave, additional tools are required for advanced operations, whereas knitr supports more internally. We’ll discuss knitr below.\n\n\n\nrmarkdown\nAnother choice for literate programming is to build documents based on Markdown language. A markdown file is a plain text file that is typically given the extension .md.. The rmarkdown R package takes a R Markdown file (.Rmd) and weaves together R code chunks like this:\n```{r plot1, height=4, width=5, eval=FALSE, echo=TRUE}\ndata(airquality)\nplot(airquality$Ozone ~ airquality$Wind)\n```\n\n\n\n\n\n\nTip\n\n\n\nThe best resource for learning about R Markdown this by Yihui Xie, J. J. Allaire, and Garrett Grolemund:\n\nhttps://bookdown.org/yihui/rmarkdown\n\nThe R Markdown Cookbook by Yihui Xie, Christophe Dervieux, and Emily Riederer is really good too:\n\nhttps://bookdown.org/yihui/rmarkdown-cookbook\n\nThe authors of the 2nd book describe the motivation for the 2nd book as:\n\n“However, we have received comments from our readers and publisher that it would be beneficial to provide more practical and relatively short examples to show the interesting and useful usage of R Markdown, because it can be daunting to find out how to achieve a certain task from the aforementioned reference book (put another way, that book is too dry to read). As a result, this cookbook was born.”\n\n\n\nBecause this is lecture is built in a .qmd file (which is very similar to a .Rmd file), let’s demonstrate how this work. I am going to change eval=FALSE to eval=TRUE.\n\ndata(airquality)\nplot(airquality$Ozone ~ airquality$Wind)\n\n\n\n\n\n\n\n\n\n\nQuestions\n\n\n\n\nWhy do we not see the back ticks ``` anymore in the code chunk above that made the plot?\nWhat do you think we should do if we want to have the code executed, but we want to hide the code that made it?\n\n\n\nBefore we leave this section, I find that there is quite a bit of terminology to understand the magic behind rmarkdown that can be confusing, so let’s break it down:\n\nPandoc. Pandoc is a command line tool with no GUI that converts documents (e.g. from number of different markup formats to many other formats, such as .doc, .pdf etc). It is completely independent from R (but does come bundled with RStudio).\nMarkdown (markup language). Markdown is a lightweight markup language with plain text formatting syntax designed so that it can be converted to HTML and many other formats. A markdown file is a plain text file that is typically given the extension .md. It is completely independent from R.\nmarkdown (R package). markdown is an R package which converts .md files into HTML. It is no longer recommended for use has been surpassed by rmarkdown (discussed below).\nR Markdown (markup language). R Markdown is an extension of the markdown syntax. R Markdown files are plain text files that typically have the file extension .Rmd.\nrmarkdown (R package). The R package rmarkdown is a library that uses pandoc to process and convert .Rmd files into a number of different formats. This core function is rmarkdown::render(). Note: this package only deals with the markdown language. If the input file is e.g. .Rhtml or .Rnw, then you need to use knitr prior to calling pandoc (see below).\n\n\n\n\n\n\n\nTip\n\n\n\nCheck out the R Markdown Quick Tour for more:\n\nhttps://rmarkdown.rstudio.com/authoring_quick_tour.html\n\n\n\n\n\n\nArtwork by Allison Horst on RMarkdown\n\n\n\n\nknitr\nOne of the alternative that has come up in recent times is something called knitr.\n\nThe knitr package for R takes a lot of these ideas of literate programming and updates and improves upon them.\nknitr still uses R as its programming language, but it allows you to mix other programming languages in.\nYou can also use a variety of documentation languages now, such as LaTeX, markdown and HTML.\nknitr was developed by Yihui Xie while he was a graduate student at Iowa State and it has become a very popular package for writing literate statistical programs.\n\nKnitr takes a plain text document with embedded code, executes the code and ‘knits’ the results back into the document.\nFor for example, it converts\n\nAn R Markdown (.Rmd) file into a standard markdown file (.md)\nAn .Rnw (Sweave) file into to .tex format.\nAn .Rhtml file into to .html.\n\nThe core function is knitr::knit() and by default this will look at the input document and try and guess what type it is e.g. Rnw, Rmd etc.\nThis core function performs three roles:\n\nA source parser, which looks at the input document and detects which parts are code that the user wants to be evaluated.\nA code evaluator, which evaluates this code\nAn output renderer, which writes the results of evaluation back to the document in a format which is interpretable by the raw output type. For instance, if the input file is an .Rmd, the output render marks up the output of code evaluation in .md format.\n\n\n\n\n\n\nConverting a Rmd file to many outputs using knitr and pandoc\n\n\n\n\n[Source]\nAs seen in the figure above, from there pandoc is used to convert e.g. a .md file into many other types of file formats into a .html, etc.\nSo in summary:\n\n“R Markdown stands on the shoulders of knitr and Pandoc. The former executes the computer code embedded in Markdown, and converts R Markdown to Markdown. The latter renders Markdown to the output format you want (such as PDF, HTML, Word, and so on).”\n\n[Source]\n\n\n\nCreate and Knit Your First R Markdown Document\n\n\nWhen creating your first R Markdown document, in RStudio you can\n\nGo to File > New File > R Markdown…\nFeel free to edit the Title\nMake sure to select “Default Output Format” to be HTML\nClick “OK”. RStudio creates the R Markdown document and places some boilerplate text in there just so you can see how things are setup.\nClick the “Knit” button (or go to File > Knit Document) to make sure you can create the HTML output\n\nIf you successfully knit your first R Markdown document, then congratulations!\n\n\n\n\n\nMission accomplished!\n\n\n\n\n\n\nWebsites and Books in R Markdown\nNow that you are on the road to using R Markdown documents, it is important to know about other wonderful things you do with these documents. For example, let’s say you have multiple .Rmd documents that you want to put together into a website, blog, book, etc.\nThere are primarily two ways to build multiple .Rmd documents together:\n\nblogdown for building websites\nbookdown for authoring books\n\nIn this section, we briefly introduce both packages, but it’s worth mentioning that the rmarkdown package also has a built-in site generator to build websites.\n\nblogdown\n\n\n\n\n\nblogdown logo\n\n\n\n\n[Source]\nThe blogdown R package is built on top of R Markdown, supports multi-page HTML output to write a blog post or a general page in an Rmd document, or a plain Markdown document.\n\nThese source documents (e.g. .Rmd or .md) are built into a static website (i.e. a bunch of static HTML files, images and CSS files).\nUsing this folder of files, it is very easy to publish it to any web server as a website.\nAlso, it is easy to maintain because it is only a single folder.\n\n\n\n\n\n\n\nTip\n\n\n\nFor example, my personal website was built in blogdown:\n\nhttps://www.stephaniehicks.com\n\nOther really great examples can be found here:\n\nhttps://awesome-blogdown.com\n\n\n\nOther advantages include the content likely being reproducible, easier to maintain, and easy to convert pages to e.g. PDF or other formats in the future if you do not want to convert to HTML files.\nBecause it is based on the Markdown syntax, it is easy to write technical documents, including math equations, insert figures or tables with captions, cross-reference with figure or table numbers, add citations, and present theorems or proofs.\nHere’s a video you can watch of someone making a blogdown website.\n\n\n\n\n[Source on YouTube]\n\n\nbookdown\n\n\n\n\n\nbook logo\n\n\n\n\n[Source]\nSimilar to blogdown, the bookdown R package is built on top of R Markdown, but also offers features like multi-page HTML output, numbering and cross-referencing figures/tables/sections/equations, inserting parts/appendices, and imported the GitBook style (https://www.gitbook.com) to create elegant and appealing HTML book pages. Share\n\n\n\n\n\n\nTip\n\n\n\nFor example, the previous version of this course was built in bookdown:\n\nhttps://rdpeng.github.io/Biostat776\n\nAnother example is the Tidyverse Skills for Data Science book that the JHU Data Science Lab wrote. The github repo that contains all the .Rmd files can be found here.\n\nhttps://jhudatascience.org/tidyversecourse\nhttps://github.com/jhudsl/tidyversecourse\n\n\n\nNote: Even though the word “book” is in “bookdown”, this package is not only for books. It really can be anything that consists of multiple .Rmd documents meant to be read in a linear sequence such as course dissertation/thesis, handouts, study notes, a software manual, a thesis, or even a diary.\n\nhttps://bookdown.org/yihui/rmarkdown/basics-examples.html#examples-books\n\n\n\ndistill\nThere is another great way to build blogs or websites using the distill for R Markdown.\n\nhttps://rstudio.github.io/distill\n\nDistill for R Markdown combines the technical authoring features of the Distill web framework (optimized for scientific and technical communication) with R Markdown, enabling a fully reproducible workflow based on literate programming (Knuth 1984).\nDistill articles include:\n\nReader-friendly typography that adapts well to mobile devices.\nFeatures essential to technical writing like LaTeX math, citations, and footnotes.\nFlexible figure layout options (e.g. displaying figures at a larger width than the article text).\nAttractively rendered tables with optional support for pagination.\nSupport for a wide variety of diagramming tools for illustrating concepts. The ability to incorporate JavaScript and D3-based interactive visualizations.\nA variety of ways to publish articles, including support for publishing sets of articles as a Distill website or as a Distill blog.\n\nThe course website from last year was built in Distill for R Markdown:\n\nWebsite: https://stephaniehicks.com/jhustatcomputing2021\nGithub: https://github.com/stephaniehicks/jhustatcomputing2021\n\nSome other cool things about distill is the use of footnotes and asides.\nFor example 1. The number of the footnote will be automatically generated.\nYou can also optionally include notes in the gutter of the article (immediately to the right of the article text). To do this use the aside tag.\n\nThis content will appear in the gutter of the article.\n\nYou can also include figures in the gutter. Just enclose the code chunk which generates the figure in an aside tag\n\n\n\nTips and tricks in R Markdown in RStudio\nHere are shortcuts and tips on efficiently using RStudio to improve how you write code.\n\nRun code\nIf you want to run a code chunk:\ncommand + Enter on Mac\nCtrl + Enter on Windows\n\n\nInsert a comment in R and R Markdown\nTo insert a comment:\ncommand + Shift + C on Mac\nCtrl + Shift + C on Windows\nThis shortcut can be used both for:\n\nR code when you want to comment your code. It will add a # at the beginning of the line\nfor text in R Markdown. It will add <!-- and --> around the text\n\nNote that if you want to comment more than one line, select all the lines you want to comment then use the shortcut. If you want to uncomment a comment, apply the same shortcut.\n\n\nKnit a R Markdown document\nYou can knit R Markdown documents by using this shortcut:\ncommand + Shift + K on Mac\nCtrl + Shift + K on Windows\n\n\nCode snippets\nCode snippets is usually a few characters long and is used as a shortcut to insert a common piece of code. You simply type a few characters then press Tab and it will complete your code with a larger code. Tab is then used again to navigate through the code where customization is required. For instance, if you type fun then press Tab, it will auto-complete the code with the required code to create a function:\nname <- function(variables) {\n  \n}\nPressing Tab again will jump through the placeholders for you to edit it. So you can first edit the name of the function, then the variables and finally the code inside the function (try by yourself!).\nThere are many code snippets by default in RStudio. Here are the code snippets I use most often:\n\nlib to call library()\n\n\nlibrary(package)\n\n\nmat to create a matrix\n\n\nmatrix(data, nrow = rows, ncol = cols)\n\n\nif, el, and ei to create conditional expressions such as if() {}, else {} and else if () {}\n\n\nif (condition) {\n  \n}\n\nelse {\n  \n}\n\nelse if (condition) {\n  \n}\n\n\nfun to create a function\n\n\nname <- function(variables) {\n  \n}\n\n\nfor to create for loops\n\n\nfor (variable in vector) {\n  \n}\n\n\nts to insert a comment with the current date and time (useful if you have very long code and share it with others so they see when it has been edited)\n\n\n# Tue Jan 21 20:20:14 2020 ------------------------------\n\nYou can see all default code snippets and add yours by clicking on Tools > Global Options… > Code (left sidebar) > Edit Snippets…\n\n\nOrdered list in R Markdown\nIn R Markdown, when creating an ordered list such as this one:\n\nItem 1\nItem 2\nItem 3\n\nInstead of bothering with the numbers and typing\n1. Item 1\n2. Item 2\n3. Item 3\nyou can simply type\n1. Item 1\n1. Item 2\n1. Item 3\nfor the exact same result (try it yourself or check the code of this article!). This way you do not need to bother which number is next when creating a new item.\nTo go even further, any numeric will actually render the same result as long as the first item is the number you want to start from. For example, you could type:\n1. Item 1\n7. Item 2\n3. Item 3\nwhich renders\n\nItem 1\nItem 2\nItem 3\n\nHowever, I suggest always using the number you want to start from for all items because if you move one item at the top, the list will start with this new number. For instance, if we move 7. Item 2 from the previous list at the top, the list becomes:\n7. Item 2\n1. Item 1\n3. Item 3\nwhich incorrectly renders\n\nItem 2\nItem 1\nItem 3\n\n\n\nNew code chunk in R Markdown\nWhen editing R Markdown documents, you will need to insert a new R code chunk many times. The following shortcuts will make your life easier:\ncommand + option + I on Mac (or command + alt + I depending on your keyboard)\nCtrl + ALT + I on Windows\n\n\nReformat code\nA clear and readable code is always easier and faster to read (and look more professional when sharing it to collaborators). To automatically apply the most common coding guidelines such as white spaces, indents, etc., use:\ncmd + Shift + A on Mac\nCtrl + Shift + A on Windows\nSo for example the following code which does not respect the guidelines (and which is not easy to read):\n1+1\n  for(i in 1:10){if(!i%%2){next}\nprint(i)\n }\nbecomes much more neat and readable:\n1 + 1\nfor (i in 1:10) {\n  if (!i %% 2) {\n    next\n  }\n  print(i)\n}\n\n\nRStudio addins\nRStudio addins are extensions which provide a simple mechanism for executing advanced R functions from within RStudio. In simpler words, when executing an addin (by clicking a button in the Addins menu), the corresponding code is executed without you having to write the code. RStudio addins have the advantage that they allow you to execute complex and advanced code much more easily than if you would have to write it yourself.\n\n\n\n\n\n\nTip\n\n\n\nFor more information about RStudio addins, check out:\n\nhttps://rstudio.github.io/rstudioaddins\nhttps://statsandr.com/blog/tips-and-tricks-in-rstudio-and-r-markdown\n\n\n\n\n\nOthers\nSimilar to many other programs, you can also use:\n\ncommand + Shift + N on Mac and Ctrl + Shift + N on Windows to open a new R Script\ncommand + S on Mac and Ctrl + S on Windows to save your current script or R Markdown document\n\nCheck out Tools –> Keyboard Shortcuts Help to see a long list of these shortcuts.\n\n\n\nPost-lecture materials\n\nFinal Questions\nHere are some post-lecture questions to help you think about the material discussed.\n\n\nQuestions\n\nWhat is literate programming?\nWhat was the first literate statistical programming tool to weave together a statistical language (R) with a markup language (LaTeX)?\nWhat is knitr and how is different than other literate statistical programming tools?\nWhere can you find a list of other commands that help make your code writing more efficient in RStudio?\n\n\n\nAdditional Resources\n\n\n\n\n\n\nTip\n\n\n\n\nRMarkdown Tips and Tricks by Indrajeet Patil\nhttps://bookdown.org/yihui/rmarkdown\nhttps://bookdown.org/yihui/rmarkdown-cookbook\n\n\n\n\n\n\n\n\n\n\nReferences\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.\n\nFootnotes\n\n\nThis will become a hover-able footnote↩︎"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html",
    "title": "Working with dates and times",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://r4ds.had.co.nz/dates-and-times\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://jhu-advdatasci.github.io/2018/lectures/09-dates-times\nhttps://r4ds.had.co.nz/dates-and-times"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#the-lubridate-package",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#the-lubridate-package",
    "title": "Working with dates and times",
    "section": "The lubridate package",
    "text": "The lubridate package\nHere, we will focus on the lubridate R package, which makes it easier to work with dates and times in R.\n\n\n\n\n\n\nPro-tip\n\n\n\nCheck out the lubridate cheat sheet at https://lubridate.tidyverse.org\n\n\nA few things to note about it:\n\nIt largely replaces the default date/time functions in base R\nIt contains methods for date/time arithmetic\nIt handles time zones, leap year, leap seconds, etc.\n\n [Source: Artwork by Allison Horst]\nlubridate is installed when you install tidyverse, but it is not loaded when you load tidyverse. Alternatively, you can install it separately.\n\ninstall.packages(\"lubridate\") \n\n\nlibrary(tidyverse)\nlibrary(lubridate)"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#from-a-string",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#from-a-string",
    "title": "Working with dates and times",
    "section": "1. From a string",
    "text": "1. From a string\nDates are of the Date class.\n\nx <- today()\nclass(x)\n\n[1] \"Date\"\n\n\nDates can be coerced from a character strings using some helper functions from lubridate. They automatically work out the format once you specify the order of the component.\nTo use the helper functions, identify the order in which year, month, and day appear in your dates, then arrange “y”, “m”, and “d” in the same order.\nThat gives you the name of the lubridate function that will parse your date. For example:\n\nymd(\"1970-01-01\")\n\n[1] \"1970-01-01\"\n\nymd(\"2017-01-31\")\n\n[1] \"2017-01-31\"\n\nmdy(\"January 31st, 2017\")\n\n[1] \"2017-01-31\"\n\ndmy(\"31-Jan-2017\")\n\n[1] \"2017-01-31\"\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\n\nWhen reading in data with read_csv(), you may need to read in as character first and then convert to date/time\nDate objects have their own special print() methods that will always format as “YYYY-MM-DD”\nThese functions also take unquoted numbers.\n\n\nymd(20170131)\n\n[1] \"2017-01-31\"\n\n\n\n\n\nAlternate Formulations\nDifferent locales have different ways of formatting dates\n\nymd(\"2016-09-13\")  ## International standard\n\n[1] \"2016-09-13\"\n\nymd(\"2016/09/13\")  ## Just figure it out\n\n[1] \"2016-09-13\"\n\nmdy(\"09-13-2016\")  ## Mostly U.S.\n\n[1] \"2016-09-13\"\n\ndmy(\"13-09-2016\")  ## Europe\n\n[1] \"2016-09-13\"\n\n\nAll of the above are valid and lead to the exact same object.\nEven if the individual dates are formatted differently, ymd() can usually figure it out.\n\nx <- c(\"2016-04-05\", \n       \"2016/05/06\",\n       \"2016,10,4\")\nymd(x)\n\n[1] \"2016-04-05\" \"2016-05-06\" \"2016-10-04\"\n\n\nCool right?"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#from-individual-date-time-components",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#from-individual-date-time-components",
    "title": "Working with dates and times",
    "section": "2. From individual date-time components",
    "text": "2. From individual date-time components\nSometimes the date components will come across multiple columns in a dataset.\n\nlibrary(nycflights13)\n\nflights %>% \n  select(year, month, day)\n\n# A tibble: 336,776 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# … with 336,766 more rows\n\n\nTo create a date/time from this sort of input, use\n\nmake_date(year,month,day) for dates, or\nmake_datetime(year,month,day,hour,min,sec,tz) for date-times\n\nWe combine these functions inside of mutate to add a new column to our dataset:\n\nflights %>% \n  select(year, month, day) %>% \n  mutate(departure = make_date(year, month, day))\n\n# A tibble: 336,776 × 4\n    year month   day departure \n   <int> <int> <int> <date>    \n 1  2013     1     1 2013-01-01\n 2  2013     1     1 2013-01-01\n 3  2013     1     1 2013-01-01\n 4  2013     1     1 2013-01-01\n 5  2013     1     1 2013-01-01\n 6  2013     1     1 2013-01-01\n 7  2013     1     1 2013-01-01\n 8  2013     1     1 2013-01-01\n 9  2013     1     1 2013-01-01\n10  2013     1     1 2013-01-01\n# … with 336,766 more rows\n\n\n\n\n\n\n\n\nQuestions\n\n\n\nThe flights also contains a hour and minute column.\n\nflights %>% \n  select(year, month, day, hour, minute)\n\n# A tibble: 336,776 × 5\n    year month   day  hour minute\n   <int> <int> <int> <dbl>  <dbl>\n 1  2013     1     1     5     15\n 2  2013     1     1     5     29\n 3  2013     1     1     5     40\n 4  2013     1     1     5     45\n 5  2013     1     1     6      0\n 6  2013     1     1     5     58\n 7  2013     1     1     6      0\n 8  2013     1     1     6      0\n 9  2013     1     1     6      0\n10  2013     1     1     6      0\n# … with 336,766 more rows\n\n\nLet’s use make_datetime() to create a date-time column called departure:\n\n# try it yourself"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#from-other-types",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#from-other-types",
    "title": "Working with dates and times",
    "section": "3. From other types",
    "text": "3. From other types\nYou may want to switch between a date-time and a date.\nThat is the job of as_datetime() and as_date():\n\ntoday()\n\n[1] \"2022-10-02\"\n\nas_datetime(today())\n\n[1] \"2022-10-02 UTC\"\n\nnow()\n\n[1] \"2022-10-02 23:58:39 EDT\"\n\nas_date(now())\n\n[1] \"2022-10-02\""
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#from-a-string-1",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#from-a-string-1",
    "title": "Working with dates and times",
    "section": "From a string",
    "text": "From a string\nymd() and friends create dates.\nTo create a date-time from a character string, add an underscore and one or more of “h”, “m”, and “s” to the name of the parsing function:\nTimes can be coerced from a character string with ymd_hms()\n\nymd_hms(\"2017-01-31 20:11:59\")\n\n[1] \"2017-01-31 20:11:59 UTC\"\n\nmdy_hm(\"01/31/2017 08:01\")\n\n[1] \"2017-01-31 08:01:00 UTC\"\n\n\nYou can also force the creation of a date-time from a date by supplying a timezone:\n\nymd_hms(\"2016-09-13 14:00:00\")\n\n[1] \"2016-09-13 14:00:00 UTC\"\n\nymd_hms(\"2016-09-13 14:00:00\", tz = \"America/New_York\")\n\n[1] \"2016-09-13 14:00:00 EDT\"\n\nymd_hms(\"2016-09-13 14:00:00\", tz = \"\")\n\n[1] \"2016-09-13 14:00:00 EDT\""
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#posixct-or-the-posixlt-class",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#posixct-or-the-posixlt-class",
    "title": "Working with dates and times",
    "section": "POSIXct or the POSIXlt class",
    "text": "POSIXct or the POSIXlt class\nLet’s get into some hairy details about date-times. Date-times are represented using the POSIXct or the POSIXlt class in R. What are these things?\n\nPOSIXct\nPOSIXct is just a very large integer under the hood. It is a useful class when you want to store times in something like a data frame.\nTechnically, the POSIXct class represents the number of seconds since 1 January 1970. (In case you were wondering, “POSIXct” stands for “Portable Operating System Interface”, calendar time.)\n\nx <- ymd_hm(\"1970-01-01 01:00\")\nclass(x) \n\n[1] \"POSIXct\" \"POSIXt\" \n\nunclass(x)\n\n[1] 3600\nattr(,\"tzone\")\n[1] \"UTC\"\n\ntypeof(x)\n\n[1] \"double\"\n\nattributes(x)\n\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"UTC\"\n\n\n\n\nPOSIXlt\nPOSIXlt is a list underneath and it stores a bunch of other useful information like the day of the week, day of the year, month, day of the month\n\ny <- as.POSIXlt(x)\ny\n\n[1] \"1970-01-01 01:00:00 UTC\"\n\ntypeof(y)\n\n[1] \"list\"\n\nattributes(y)\n\n$names\n[1] \"sec\"   \"min\"   \"hour\"  \"mday\"  \"mon\"   \"year\"  \"wday\"  \"yday\"  \"isdst\"\n\n$class\n[1] \"POSIXlt\" \"POSIXt\" \n\n$tzone\n[1] \"UTC\"\n\n\n\n\n\n\n\n\nPro-tip\n\n\n\nPOSIXlts are rare inside the tidyverse. They do crop up in base R, because they are needed to extract specific components of a date, like the year or month.\nSince lubridate provides helpers for you to do this instead, you do not really need them imho.\nPOSIXct’s are always easier to work with, so if you find you have a POSIXlt, you should always convert it to a regular data time lubridate::as_datetime()."
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#arithmetic",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#arithmetic",
    "title": "Working with dates and times",
    "section": "Arithmetic",
    "text": "Arithmetic\nYou can add and subtract dates and times.\n\nx <- ymd(\"2012-01-01\", tz = \"\")  ## Midnight\ny <- dmy_hms(\"9 Jan 2011 11:34:21\", tz = \"\")\nx - y ## this works\n\nTime difference of 356.5178 days\n\n\nYou can do comparisons too (i.e. >, <, and ==)\n\nx < y ## this works\n\n[1] FALSE\n\nx > y ## this works\n\n[1] TRUE\n\nx == y ## this works\n\n[1] FALSE\n\nx + y ## what??? why does this not work? \n\nError in `+.POSIXt`(x, y): binary '+' is not defined for \"POSIXt\" objects\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe class of x is POSIXct.\n\nclass(x)\n\n[1] \"POSIXct\" \"POSIXt\" \n\n\nPOSIXct objects are a measure of seconds from an origin, usually the UNIX epoch (1st Jan 1970).\nJust add the requisite number of seconds to the object:\n\nx + 3*60*60 # add 3 hours\n\n[1] \"2012-01-01 03:00:00 EST\"\n\n\n\n\nSame goes for days. For example, you can just keep the date portion using date():\n\ny <- date(y)\ny\n\n[1] \"2011-01-09\"\n\n\nAnd then add a number to the date (in this case 1 day)\n\ny + 1  \n\n[1] \"2011-01-10\"\n\n\nCool eh?"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#leaps-and-bounds",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#leaps-and-bounds",
    "title": "Working with dates and times",
    "section": "Leaps and Bounds",
    "text": "Leaps and Bounds\nEven keeps track of leap years, leap seconds, daylight savings, and time zones.\nLeap years\n\nx <- ymd(\"2012-03-01\")\ny <- ymd(\"2012-02-28\")\nx - y\n\nTime difference of 2 days\n\n\nNot a leap year\n\nx <- ymd(\"2013-03-01\")\ny <- ymd(\"2013-02-28\")\nx - y\n\nTime difference of 1 days\n\n\nBUT beware of time zones!\n\nx <- ymd_hms(\"2012-10-25 01:00:00\", tz = \"\")\ny <- ymd_hms(\"2012-10-25 05:00:00\", tz = \"GMT\")\ny - x\n\nTime difference of 0 secs\n\n\nThere are also things called leap seconds.\n\n.leap.seconds\n\n [1] \"1972-07-01 GMT\" \"1973-01-01 GMT\" \"1974-01-01 GMT\" \"1975-01-01 GMT\"\n [5] \"1976-01-01 GMT\" \"1977-01-01 GMT\" \"1978-01-01 GMT\" \"1979-01-01 GMT\"\n [9] \"1980-01-01 GMT\" \"1981-07-01 GMT\" \"1982-07-01 GMT\" \"1983-07-01 GMT\"\n[13] \"1985-07-01 GMT\" \"1988-01-01 GMT\" \"1990-01-01 GMT\" \"1991-01-01 GMT\"\n[17] \"1992-07-01 GMT\" \"1993-07-01 GMT\" \"1994-07-01 GMT\" \"1996-01-01 GMT\"\n[21] \"1997-07-01 GMT\" \"1999-01-01 GMT\" \"2006-01-01 GMT\" \"2009-01-01 GMT\"\n[25] \"2012-07-01 GMT\" \"2015-07-01 GMT\" \"2017-01-01 GMT\""
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#date-elements",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#date-elements",
    "title": "Working with dates and times",
    "section": "Date Elements",
    "text": "Date Elements\n\nx <- ymd_hms(c(\"2012-10-25 01:13:46\",\n               \"2015-04-23 15:11:23\"), tz = \"\")\nyear(x)\n\n[1] 2012 2015\n\nmonth(x)\n\n[1] 10  4\n\nday(x)\n\n[1] 25 23\n\nweekdays(x)\n\n[1] \"Thursday\" \"Thursday\""
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#time-elements",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#time-elements",
    "title": "Working with dates and times",
    "section": "Time Elements",
    "text": "Time Elements\n\nx <- ymd_hms(c(\"2012-10-25 01:13:46\",\n               \"2015-04-23 15:11:23\"), tz = \"\")\nminute(x)\n\n[1] 13 11\n\nsecond(x)\n\n[1] 46 23\n\nhour(x)\n\n[1]  1 15\n\nweek(x)\n\n[1] 43 17"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#reading-in-the-data",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#reading-in-the-data",
    "title": "Working with dates and times",
    "section": "Reading in the Data",
    "text": "Reading in the Data\n\nlibrary(here)\nlibrary(readr)\nstorm <- read_csv(here(\"data\", \"storms_2004.csv.gz\"), progress = FALSE)\nstorm\n\n# A tibble: 52,409 × 51\n   BEGIN…¹ BEGIN…² BEGIN…³ END_Y…⁴ END_DAY END_T…⁵ EPISO…⁶ EVENT…⁷ STATE STATE…⁸\n     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <chr>   <dbl>\n 1  200412      29    1800  200412      30    1200 1182771 5430389 MONT…      30\n 2  200412      29    1800  200412      30    1200 1182771 5430390 MONT…      30\n 3  200412       8    1800  200412       8    1800 1182769 5430387 IDAHO      16\n 4  200412      19    1500  200412      19    1700 1182770 5430388 MONT…      30\n 5  200412      14     600  200412      14     800 1182772 5430391 MONT…      30\n 6  200412      21     400  200412      21     800 1183013 5430322 MICH…      26\n 7  200412      21     400  200412      21     800 1183013 5430323 MICH…      26\n 8  200412      26    1500  200412      27     800 1182925 5430420 MASS…      25\n 9  200412      26    1500  200412      27     800 1182925 5430421 MASS…      25\n10  200412      11     800  200412      11    1300 1182849 5430278 DELA…      10\n# … with 52,399 more rows, 41 more variables: YEAR <dbl>, MONTH_NAME <chr>,\n#   EVENT_TYPE <chr>, CZ_TYPE <chr>, CZ_FIPS <dbl>, CZ_NAME <chr>, WFO <chr>,\n#   BEGIN_DATE_TIME <chr>, CZ_TIMEZONE <chr>, END_DATE_TIME <chr>,\n#   INJURIES_DIRECT <dbl>, INJURIES_INDIRECT <dbl>, DEATHS_DIRECT <dbl>,\n#   DEATHS_INDIRECT <dbl>, DAMAGE_PROPERTY <chr>, DAMAGE_CROPS <chr>,\n#   SOURCE <chr>, MAGNITUDE <dbl>, MAGNITUDE_TYPE <chr>, FLOOD_CAUSE <lgl>,\n#   CATEGORY <lgl>, TOR_F_SCALE <chr>, TOR_LENGTH <dbl>, TOR_WIDTH <dbl>, …\n\n\n\nnames(storm)\n\n [1] \"BEGIN_YEARMONTH\"    \"BEGIN_DAY\"          \"BEGIN_TIME\"        \n [4] \"END_YEARMONTH\"      \"END_DAY\"            \"END_TIME\"          \n [7] \"EPISODE_ID\"         \"EVENT_ID\"           \"STATE\"             \n[10] \"STATE_FIPS\"         \"YEAR\"               \"MONTH_NAME\"        \n[13] \"EVENT_TYPE\"         \"CZ_TYPE\"            \"CZ_FIPS\"           \n[16] \"CZ_NAME\"            \"WFO\"                \"BEGIN_DATE_TIME\"   \n[19] \"CZ_TIMEZONE\"        \"END_DATE_TIME\"      \"INJURIES_DIRECT\"   \n[22] \"INJURIES_INDIRECT\"  \"DEATHS_DIRECT\"      \"DEATHS_INDIRECT\"   \n[25] \"DAMAGE_PROPERTY\"    \"DAMAGE_CROPS\"       \"SOURCE\"            \n[28] \"MAGNITUDE\"          \"MAGNITUDE_TYPE\"     \"FLOOD_CAUSE\"       \n[31] \"CATEGORY\"           \"TOR_F_SCALE\"        \"TOR_LENGTH\"        \n[34] \"TOR_WIDTH\"          \"TOR_OTHER_WFO\"      \"TOR_OTHER_CZ_STATE\"\n[37] \"TOR_OTHER_CZ_FIPS\"  \"TOR_OTHER_CZ_NAME\"  \"BEGIN_RANGE\"       \n[40] \"BEGIN_AZIMUTH\"      \"BEGIN_LOCATION\"     \"END_RANGE\"         \n[43] \"END_AZIMUTH\"        \"END_LOCATION\"       \"BEGIN_LAT\"         \n[46] \"BEGIN_LON\"          \"END_LAT\"            \"END_LON\"           \n[49] \"EPISODE_NARRATIVE\"  \"EVENT_NARRATIVE\"    \"DATA_SOURCE\"       \n\n\n\n\n\n\n\n\nQuestions\n\n\n\nLet’s take a look at the BEGIN_DATE_TIME, EVENT_TYPE, and DEATHS_DIRECT variables from the storm dataset.\nTasks:\n\nCreate a subset of the storm dataset with only the four columns above.\nConvert the BEGIN_DATE_TIME date/time column to a date/time R object.\nRename the EVENT_TYPE column as type.\nRename the DEATHS_DIRECT column as deaths.\n\n\nlibrary(dplyr)\n\n# try it yourself\n\n\n\nNext, we do some wrangling to create a storm_sub data frame (code chunk set to echo=FALSE for the purposes of the lecture, but code is in the R Markdown).\n\n\n\n\nstorm_sub\n\n# A tibble: 52,409 × 3\n   begin               type             deaths\n   <dttm>              <chr>             <dbl>\n 1 2004-12-29 18:00:00 Heavy Snow            0\n 2 2004-12-29 18:00:00 Heavy Snow            0\n 3 2004-12-08 18:00:00 Winter Storm          0\n 4 2004-12-19 15:00:00 High Wind             0\n 5 2004-12-14 06:00:00 Winter Weather        0\n 6 2004-12-21 04:00:00 Winter Storm          0\n 7 2004-12-21 04:00:00 Winter Storm          0\n 8 2004-12-26 15:00:00 Winter Storm          0\n 9 2004-12-26 15:00:00 Winter Storm          0\n10 2004-12-11 08:00:00 Storm Surge/Tide      0\n# … with 52,399 more rows"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#histograms-of-datestimes",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#histograms-of-datestimes",
    "title": "Working with dates and times",
    "section": "Histograms of Dates/Times",
    "text": "Histograms of Dates/Times\nWe can make a histogram of the dates/times to get a sense of when storm events occur.\n\nlibrary(ggplot2)\nstorm_sub %>%\n  ggplot(aes(x = begin)) + \n  geom_histogram(bins = 20) + \n  theme_bw()\n\n\n\n\nWe can group by event type too.\n\nlibrary(ggplot2)\nstorm_sub %>%\n  ggplot(aes(x = begin)) + \n  facet_wrap(~ type) + \n  geom_histogram(bins = 20) + \n  theme_bw() + \n  theme(axis.text.x.bottom = element_text(angle = 90))"
  },
  {
    "objectID": "posts/2022-10-04-working-with-dates-and-times/index.html#scatterplots-of-datestimes",
    "href": "posts/2022-10-04-working-with-dates-and-times/index.html#scatterplots-of-datestimes",
    "title": "Working with dates and times",
    "section": "Scatterplots of Dates/Times",
    "text": "Scatterplots of Dates/Times\n\nstorm_sub %>%\n  ggplot(aes(x = begin, y = deaths)) + \n  geom_point()\n\n\n\n\nIf we focus on a single month, the x-axis adapts.\n\nstorm_sub %>%\n  filter(month(begin) == 6) %>%\n  ggplot(aes(begin, deaths)) + \n  geom_point()\n\n\n\n\nSimilarly, we can focus on a single day.\n\nstorm_sub %>%\n  filter(month(begin) == 6, day(begin) == 16) %>%\n  ggplot(aes(begin, deaths)) + \n  geom_point()"
  },
  {
    "objectID": "posts/2022-09-08-tidy-data-and-the-tidyverse/index.html",
    "href": "posts/2022-09-08-tidy-data-and-the-tidyverse/index.html",
    "title": "Tidy data and the Tidyverse",
    "section": "",
    "text": "“Tidy datasets are all alike, but every messy dataset is messy in its own way.” —- Hadley Wickham\n\n\nPre-lecture materials\n\nRead ahead\n\n\n\n\n\n\nRead ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nTidy Data paper published in the Journal of Statistical Software\nhttps://r4ds.had.co.nz/tidy-data\ntidyr cheat sheet from RStudio\n\n\n\n\n\nAcknowledgements\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-tidy-data-and-the-tidyverse\nhttps://r4ds.had.co.nz/tidy-data\n\n\n\n\nLearning objectives\n\n\n\n\n\n\nLearning objectives\n\n\n\nAt the end of this lesson you will:\n\nDefine tidy data\nBe able to transform non-tidy data into tidy data\nBe able to transform wide data into long data\nBe able to separate character columns into multiple columns\nBe able to unite multiple character columns into one column\n\n\n\n\n\nTidy data\nAs we learned in the last lesson, one unifying concept of the tidyverse is the notion of tidy data.\nAs defined by Hadley Wickham in his 2014 paper published in the Journal of Statistical Software, a tidy dataset has the following properties:\n\nEach variable forms a column.\nEach observation forms a row.\nEach type of observational unit forms a table.\n\n\n\n\nArtwork by Allison Horst on tidy data\n\n\n[Source: Artwork by Allison Horst]\nThe purpose of defining tidy data is to highlight the fact that most data do not start out life as tidy.\nIn fact, much of the work of data analysis may involve simply making the data tidy (at least this has been our experience).\n\nOnce a dataset is tidy, it can be used as input into a variety of other functions that may transform, model, or visualize the data.\n\n\n\n\n\n\n\nExample\n\n\n\nAs a quick example, consider the following data illustrating religion and income survey data with the number of respondents with income range in column name.\nThis is in a classic table format:\n\nlibrary(tidyr)\nrelig_income\n\n# A tibble: 18 × 11\n   religion      `<$10k` $10-2…¹ $20-3…² $30-4…³ $40-5…⁴ $50-7…⁵ $75-1…⁶ $100-…⁷\n   <chr>           <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Agnostic           27      34      60      81      76     137     122     109\n 2 Atheist            12      27      37      52      35      70      73      59\n 3 Buddhist           27      21      30      34      33      58      62      39\n 4 Catholic          418     617     732     670     638    1116     949     792\n 5 Don’t know/r…      15      14      15      11      10      35      21      17\n 6 Evangelical …     575     869    1064     982     881    1486     949     723\n 7 Hindu               1       9       7       9      11      34      47      48\n 8 Historically…     228     244     236     238     197     223     131      81\n 9 Jehovah's Wi…      20      27      24      24      21      30      15      11\n10 Jewish             19      19      25      25      30      95      69      87\n11 Mainline Prot     289     495     619     655     651    1107     939     753\n12 Mormon             29      40      48      51      56     112      85      49\n13 Muslim              6       7       9      10       9      23      16       8\n14 Orthodox           13      17      23      32      32      47      38      42\n15 Other Christ…       9       7      11      13      13      14      18      14\n16 Other Faiths       20      33      40      46      49      63      46      40\n17 Other World …       5       2       3       4       2       7       3       4\n18 Unaffiliated      217     299     374     365     341     528     407     321\n# … with 2 more variables: `>150k` <dbl>, `Don't know/refused` <dbl>, and\n#   abbreviated variable names ¹​`$10-20k`, ²​`$20-30k`, ³​`$30-40k`, ⁴​`$40-50k`,\n#   ⁵​`$50-75k`, ⁶​`$75-100k`, ⁷​`$100-150k`\n\n\n\n\nWhile this format is canonical and is useful for quickly observing the relationship between multiple variables, it is not tidy.\nThis format violates the tidy form because there are variables in the columns.\n\nIn this case the variables are religion, income bracket, and the number of respondents, which is the third variable, is presented inside the table.\n\nConverting this data to tidy format would give us\n\nlibrary(tidyverse)\n\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"respondents\") %>%\n  mutate(religion = factor(religion), income = factor(income))\n\n# A tibble: 180 × 3\n   religion income             respondents\n   <fct>    <fct>                    <dbl>\n 1 Agnostic <$10k                       27\n 2 Agnostic $10-20k                     34\n 3 Agnostic $20-30k                     60\n 4 Agnostic $30-40k                     81\n 5 Agnostic $40-50k                     76\n 6 Agnostic $50-75k                    137\n 7 Agnostic $75-100k                   122\n 8 Agnostic $100-150k                  109\n 9 Agnostic >150k                       84\n10 Agnostic Don't know/refused          96\n# … with 170 more rows\n\n\nSome of these functions you have seen before, others might be new to you. Let’s talk about each one in the context of the tidyverse R packages.\n\n\nThe “Tidyverse”\nThere are a number of R packages that take advantage of the tidy data form and can be used to do interesting things with data. Many (but not all) of these packages are written by Hadley Wickham and the collection of packages is often referred to as the “tidyverse” because of their dependence on and presumption of tidy data.\n\n\n\n\n\n\nNote\n\n\n\nA subset of the “Tidyverse” packages include:\n\nggplot2: a plotting system based on the grammar of graphics\nmagrittr: defines the %>% operator for chaining functions together in a series of operations on data\ndplyr: a suite of (fast) functions for working with data frames\ntidyr: easily tidy data with pivot_wider() and pivot_longer() functions (also separate() and unite())\n\nA complete list can be found here (https://www.tidyverse.org/packages).\n\n\nWe will be using these packages quite a bit.\nThe “tidyverse” package can be used to install all of the packages in the tidyverse at once.\nFor example, instead of starting an R script with this:\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(ggplot2)\n\nYou can start with this:\n\nlibrary(tidyverse)\n\nIn the example above, let’s talk about what we did using the pivot_longer() function.\nWe will also talk about pivot_wider().\n\npivot_longer()\nThe tidyr package includes functions to transfer a data frame between long and wide.\n\nWide format data tends to have different attributes or variables describing an observation placed in separate columns.\nLong format data tends to have different attributes encoded as levels of a single variable, followed by another column that contains tha values of the observation at those different levels.\n\n\n\n\n\n\n\nExample\n\n\n\nIn the section above, we showed an example that used pivot_longer() to convert data into a tidy format.\nThe key problem with the tidyness of the data is that the income variables are not in their own columns, but rather are embedded in the structure of the columns.\nTo fix this, you can use the pivot_longer() function to gather values spread across several columns into a single column, here with the column names gathered into an income column.\nNote: when gathering, exclude any columns that you do not want “gathered” (religion in this case) by including the column names with a the minus sign in the pivot_longer() function.\nFor example:\n\n# Gather everything EXCEPT religion to tidy data\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"respondents\")\n\n# A tibble: 180 × 3\n   religion income             respondents\n   <chr>    <chr>                    <dbl>\n 1 Agnostic <$10k                       27\n 2 Agnostic $10-20k                     34\n 3 Agnostic $20-30k                     60\n 4 Agnostic $30-40k                     81\n 5 Agnostic $40-50k                     76\n 6 Agnostic $50-75k                    137\n 7 Agnostic $75-100k                   122\n 8 Agnostic $100-150k                  109\n 9 Agnostic >150k                       84\n10 Agnostic Don't know/refused          96\n# … with 170 more rows\n\n\n\n\nEven if your data is in a tidy format, pivot_longer() is occasionally useful for pulling data together to take advantage of faceting, or plotting separate plots based on a grouping variable. We will talk more about that in a future lecture.\n\n\npivot_wider()\nThe pivot_wider() function is less commonly needed to tidy data. It can, however, be useful for creating summary tables.\n\n\n\n\n\n\nExample\n\n\n\nYou use the summarize() function in dplyr to summarize the total number of respondents per income category.\n\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"respondents\") %>%\n  mutate(religion = factor(religion), income = factor(income)) %>% \n  group_by(income) %>% \n  summarize(total_respondents = sum(respondents)) %>%\n  pivot_wider(names_from = \"income\", \n              values_from = \"total_respondents\") %>%\n  knitr::kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<$10k\n>150k\n$10-20k\n$100-150k\n$20-30k\n$30-40k\n$40-50k\n$50-75k\n$75-100k\nDon’t know/refused\n\n\n\n\n1930\n2608\n2781\n3197\n3357\n3302\n3085\n5185\n3990\n6121\n\n\n\n\n\n\n\nNotice in this example how pivot_wider() has been used at the very end of the code sequence to convert the summarized data into a shape that offers a better tabular presentation for a report.\n\n\n\n\n\n\nNote\n\n\n\nIn the pivot_wider() call, you first specify the name of the column to use for the new column names (income in this example) and then specify the column to use for the cell values (total_respondents here).\n\n\n\n\n\n\n\n\nExample of pivot_longer()\n\n\n\nLet’s try another dataset. This data contain an excerpt of the Gapminder data on life expectancy, GDP per capita, and population by country.\n\nlibrary(gapminder)\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# … with 1,694 more rows\n\n\nIf we wanted to make lifeExp, pop and gdpPercap (all measurements that we observe) go from a wide table into a long table, what would we do?\n\n# try it yourself\n\n\n\n\n\n\n\n\n\nExample\n\n\n\nOne more! Try using pivot_longer() to convert the the following data that contains made-up revenues for three companies by quarter for years 2006 to 2009.\nAfterward, use group_by() and summarize() to calculate the average revenue for each company across all years and all quarters.\nBonus: Calculate a mean revenue for each company AND each year (averaged across all 4 quarters).\n\ndf <- tibble(\n  \"company\" = rep(1:3, each=4), \n  \"year\"  = rep(2006:2009, 3),\n  \"Q1\"    = sample(x = 0:100, size = 12),\n  \"Q2\"    = sample(x = 0:100, size = 12),\n  \"Q3\"    = sample(x = 0:100, size = 12),\n  \"Q4\"    = sample(x = 0:100, size = 12),\n)\ndf\n\n# A tibble: 12 × 6\n   company  year    Q1    Q2    Q3    Q4\n     <int> <int> <int> <int> <int> <int>\n 1       1  2006    94    95    50    87\n 2       1  2007    73    16    86    82\n 3       1  2008    64    50    85    61\n 4       1  2009     6     4    87     1\n 5       2  2006    88    24    74    52\n 6       2  2007    32    98    52    94\n 7       2  2008     4    42    79     3\n 8       2  2009    23    97    71    76\n 9       3  2006     1    75    97    66\n10       3  2007    30    87    58     5\n11       3  2008    17    91    61    70\n12       3  2009    14    12     1    60\n\n\n\n# try it yourself \n\n\n\n\n\nseparate() and unite()\nThe same tidyr package also contains two useful functions:\n\nunite(): combine contents of two or more columns into a single column\nseparate(): separate contents of a column into two or more columns\n\nFirst, we combine the first three columns into one new column using unite().\n\ngapminder %>% \n  unite(col=\"country_continent_year\", \n        country:year, \n        sep=\"_\")\n\n# A tibble: 1,704 × 4\n   country_continent_year lifeExp      pop gdpPercap\n   <chr>                    <dbl>    <int>     <dbl>\n 1 Afghanistan_Asia_1952     28.8  8425333      779.\n 2 Afghanistan_Asia_1957     30.3  9240934      821.\n 3 Afghanistan_Asia_1962     32.0 10267083      853.\n 4 Afghanistan_Asia_1967     34.0 11537966      836.\n 5 Afghanistan_Asia_1972     36.1 13079460      740.\n 6 Afghanistan_Asia_1977     38.4 14880372      786.\n 7 Afghanistan_Asia_1982     39.9 12881816      978.\n 8 Afghanistan_Asia_1987     40.8 13867957      852.\n 9 Afghanistan_Asia_1992     41.7 16317921      649.\n10 Afghanistan_Asia_1997     41.8 22227415      635.\n# … with 1,694 more rows\n\n\nNext, we show how to separate the columns into three separate columns using separate() using the col, into and sep arguments.\n\ngapminder %>% \n  unite(col=\"country_continent_year\", \n        country:year, \n        sep=\"_\") %>% \n  separate(col=\"country_continent_year\", \n           into=c(\"country\", \"continent\", \"year\"), \n           sep=\"_\")\n\n# A tibble: 1,704 × 6\n   country     continent year  lifeExp      pop gdpPercap\n   <chr>       <chr>     <chr>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia      1952     28.8  8425333      779.\n 2 Afghanistan Asia      1957     30.3  9240934      821.\n 3 Afghanistan Asia      1962     32.0 10267083      853.\n 4 Afghanistan Asia      1967     34.0 11537966      836.\n 5 Afghanistan Asia      1972     36.1 13079460      740.\n 6 Afghanistan Asia      1977     38.4 14880372      786.\n 7 Afghanistan Asia      1982     39.9 12881816      978.\n 8 Afghanistan Asia      1987     40.8 13867957      852.\n 9 Afghanistan Asia      1992     41.7 16317921      649.\n10 Afghanistan Asia      1997     41.8 22227415      635.\n# … with 1,694 more rows\n\n\n\n\n\nPost-lecture materials\n\nFinal Questions\nHere are some post-lecture questions to help you think about the material discussed.\n\n\n\n\n\n\nQuestions\n\n\n\n\nUsing prose, describe how the variables and observations are organised in a tidy dataset versus an non-tidy dataset.\nWhat do the extra and fill arguments do in separate()? Experiment with the various options for the following two toy datasets.\n\n\ntibble(x = c(\"a,b,c\", \"d,e,f,g\", \"h,i,j\")) %>% \n  separate(x, c(\"one\", \"two\", \"three\"))\n\ntibble(x = c(\"a,b,c\", \"d,e\", \"f,g,i\")) %>% \n  separate(x, c(\"one\", \"two\", \"three\"))\n\n\nBoth unite() and separate() have a remove argument. What does it do? Why would you set it to FALSE?\nCompare and contrast separate() and extract(). Why are there three variations of separation (by position, by separator, and with groups), but only one unite()?\n\n\n\n\n\nAdditional Resources\n\n\n\n\n\n\nTip\n\n\n\n\nTidy Data paper published in the Journal of Statistical Software\nhttps://r4ds.had.co.nz/tidy-data.html\ntidyr cheat sheet from RStudio"
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "",
    "text": "Read ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nhttps://r4ds.had.co.nz/data-visualisation\nhttp://vita.had.co.nz/papers/layered-grammar.pdf\n\n\n\n\n\n\nMaterial for this lecture was borrowed and adopted from\n\nhttps://rdpeng.github.io/Biostat776/lecture-the-ggplot2-plotting-system-part-2"
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#basic-components-of-a-ggplot2-plot",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#basic-components-of-a-ggplot2-plot",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "Basic components of a ggplot2 plot",
    "text": "Basic components of a ggplot2 plot\n\n\n\n\n\n\nKey components\n\n\n\nA ggplot2 plot consists of a number of key components.\n\nA data frame: stores all of the data that will be displayed on the plot\naesthetic mappings: describe how data are mapped to color, size, shape, location\ngeoms: geometric objects like points, lines, shapes\nfacets: describes how conditional/panel plots should be constructed\nstats: statistical transformations like binning, quantiles, smoothing\nscales: what scale an aesthetic map uses (example: left-handed = red, right-handed = blue)\ncoordinate system: describes the system in which the locations of the geoms will be drawn\n\n\n\nIt is essential to organize your data into a data frame before you start with ggplot2 (and all the appropriate metadata so that your data frame is self-describing and your plots will be self-documenting).\nWhen building plots in ggplot2 (rather than using qplot()), the “artist’s palette” model may be the closest analogy.\nEssentially, you start with some raw data, and then you gradually add bits and pieces to it to create a plot.\n\n\n\n\n\n\nNote\n\n\n\nPlots are built up in layers, with the typically ordering being\n\nPlot the data\nOverlay a summary\nAdd metadata and annotation\n\n\n\nFor quick exploratory plots you may not get past step 1."
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#example-bmi-pm2.5-asthma",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#example-bmi-pm2.5-asthma",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "Example: BMI, PM2.5, Asthma",
    "text": "Example: BMI, PM2.5, Asthma\nTo demonstrate the various pieces of ggplot2 we will use a running example from the Mouse Allergen and Asthma Cohort Study (MAACS). Here, the question we are interested in is\n\n“Are overweight individuals, as measured by body mass index (BMI), more susceptible than normal weight individuals to the harmful effects of PM2.5 on asthma symptoms?”\n\nThere is a suggestion that overweight individuals may be more susceptible to the negative effects of inhaling PM2.5.\nThis would suggest that increases in PM2.5 exposure in the home of an overweight child would be more deleterious to his/her asthma symptoms than they would be in the home of a normal weight child.\nWe want to see if we can see that difference in the data from MAACS.\n\n\n\n\n\n\nNote\n\n\n\nBecause the individual-level data for this study are protected by various U.S. privacy laws, we cannot make those data available.\nFor the purposes of this lesson, we have simulated data that share many of the same features of the original data, but do not contain any of the actual measurements or values contained in the original dataset.\n\n\n\n\n\n\n\n\nExample\n\n\n\nWe can look at the data quickly by reading it in as a tibble with read_csv() in the tidyverse package.\n\nlibrary(tidyverse)\nlibrary(here)\nmaacs <- read_csv(here(\"data\", \"bmi_pm25_no2_sim.csv\"),\n                  col_types = \"nnci\")\nmaacs\n\n# A tibble: 517 × 4\n   logpm25 logno2_new bmicat        NocturnalSympt\n     <dbl>      <dbl> <chr>                  <int>\n 1   1.25       1.18  normal weight              1\n 2   1.12       1.55  overweight                 0\n 3   1.93       1.43  normal weight              0\n 4   1.37       1.77  overweight                 2\n 5   0.775      0.765 normal weight              0\n 6   1.49       1.11  normal weight              0\n 7   2.16       1.43  normal weight              0\n 8   1.65       1.40  normal weight              0\n 9   1.55       1.81  normal weight              0\n10   2.04       1.35  overweight                 3\n# … with 507 more rows\n\n\n\n\nThe outcome we will look at here (NocturnalSymp) is the number of days in the past 2 weeks where the child experienced asthma symptoms (e.g. coughing, wheezing) while sleeping.\nThe other key variables are:\n\nlogpm25: average level of PM2.5 over the course of 7 days (micrograms per cubic meter) on the log scale\nlogno2_new: exhaled nitric oxide on the log scale\nbmicat: categorical variable with BMI status"
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#first-plot-with-point-layer",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#first-plot-with-point-layer",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "First plot with point layer",
    "text": "First plot with point layer\nTo make a scatter plot, we need add at least one geom, such as points.\nHere, we add the geom_point() function to create a traditional scatter plot.\n\ng <- maacs %>%\n        ggplot(aes(logpm25, NocturnalSympt))\ng + geom_point()\n\n\n\n\nScatterplot of PM2.5 and days with nocturnal symptoms\n\n\n\n\nHow does ggplot know what points to plot? In this case, it can grab them from the data frame maacs that served as the input into the ggplot() function."
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#adding-more-layers",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#adding-more-layers",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "Adding more layers",
    "text": "Adding more layers\n\nsmooth\nBecause the data appear rather noisy, it might be better if we added a smoother on top of the points to see if there is a trend in the data with PM2.5.\n\ng + \n  geom_point() + \n  geom_smooth()\n\n\n\n\nScatterplot with smoother\n\n\n\n\nThe default smoother is a loess smoother, which is flexible and nonparametric but might be too flexible for our purposes. Perhaps we’d prefer a simple linear regression line to highlight any first order trends. We can do this by specifying method = \"lm\" to geom_smooth().\n\ng + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n\n\nScatterplot with linear regression line\n\n\n\n\nHere, we can see there appears to be a slight increasing trend, suggesting that higher levels of PM2.5 are associated with increased days with nocturnal symptoms.\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s use the ggplot() function with our palmerpenguins dataset example and make a scatter plot with flipper_length_mm on the x-axis, bill_length_mm on the y-axis, colored by species, and a smoother by adding a linear regression.\n\n# try it yourself\n\nlibrary(palmerpenguins)\npenguins \n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g\n\n\n\n\n\n\nfacets\nBecause our primary question involves comparing overweight individuals to normal weight individuals, we can stratify the scatter plot of PM2.5 and nocturnal symptoms by the BMI category (bmicat) variable, which indicates whether an individual is overweight or now.\nTo visualize this we can add a facet_grid(), which takes a formula argument.\n\n\n\n\n\n\nExample\n\n\n\nWe want one row and two columns, one column for each weight category. So we specify bmicat on the right hand side of the forumla passed to facet_grid().\n\ng + \n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  facet_grid(. ~ bmicat) \n\n\n\n\nScatterplot of PM2.5 and nocturnal symptoms by BMI category\n\n\n\n\n\n\nNow it seems clear that the relationship between PM2.5 and nocturnal symptoms is relatively flat among normal weight individuals, while the relationship is increasing among overweight individuals.\nThis plot suggests that overweight individuals may be more susceptible to the effects of PM2.5."
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#customizing-the-smooth",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#customizing-the-smooth",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "Customizing the smooth",
    "text": "Customizing the smooth\nWe can also customize aspects of the geoms.\nFor example, we can customize the smoother that we overlay on the points with geom_smooth().\nHere we change the line type and increase the size from the default. We also remove the shaded standard error from the line.\n\ng + \n  geom_point(aes(color = bmicat), \n             size = 2, \n             alpha = 1/2) + \n  geom_smooth(size = 4, \n              linetype = 3, \n              method = \"lm\", \n              se = FALSE)\n\n\n\n\nCustomizing a smoother"
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#changing-the-theme",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#changing-the-theme",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "Changing the theme",
    "text": "Changing the theme\nThe default theme for ggplot2 uses the gray background with white grid lines.\nIf you don’t find this suitable, you can use the black and white theme by using the theme_bw() function.\nThe theme_bw() function also allows you to set the typeface for the plot, in case you don’t want the default Helvetica. Here we change the typeface to Times.\n\n\n\n\n\n\nNote\n\n\n\nFor things that only make sense globally, use theme(), i.e. theme(legend.position = \"none\"). Two standard appearance themes are included\n\ntheme_gray(): The default theme (gray background)\ntheme_bw(): More stark/plain\n\n\n\n\ng + \n  geom_point(aes(color = bmicat)) + \n  theme_bw(base_family = \"Times\")\n\n\n\n\nModifying the theme for a plot\n\n\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nLet’s take our palmerpenguins scatterplot from above and change out the theme to use theme_dark().\n\n# try it yourself\n\nlibrary(palmerpenguins)\npenguins \n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_…¹ body_…² sex    year\n   <fct>   <fct>              <dbl>         <dbl>      <int>   <int> <fct> <int>\n 1 Adelie  Torgersen           39.1          18.7        181    3750 male   2007\n 2 Adelie  Torgersen           39.5          17.4        186    3800 fema…  2007\n 3 Adelie  Torgersen           40.3          18          195    3250 fema…  2007\n 4 Adelie  Torgersen           NA            NA           NA      NA <NA>   2007\n 5 Adelie  Torgersen           36.7          19.3        193    3450 fema…  2007\n 6 Adelie  Torgersen           39.3          20.6        190    3650 male   2007\n 7 Adelie  Torgersen           38.9          17.8        181    3625 fema…  2007\n 8 Adelie  Torgersen           39.2          19.6        195    4675 male   2007\n 9 Adelie  Torgersen           34.1          18.1        193    3475 <NA>   2007\n10 Adelie  Torgersen           42            20.2        190    4250 <NA>   2007\n# … with 334 more rows, and abbreviated variable names ¹​flipper_length_mm,\n#   ²​body_mass_g"
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#modifying-labels",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#modifying-labels",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "Modifying labels",
    "text": "Modifying labels\n\n\n\n\n\n\nNote\n\n\n\nThere are a variety of annotations you can add to a plot, including different kinds of labels.\n\nxlab() for x-axis labels\nylab() for y-axis labels\nggtitle() for specifying plot titles\n\nlabs() function is generic and can be used to modify multiple types of labels at once\n\n\nHere is an example of modifying the title and the x and y labels to make the plot a bit more informative.\n\ng + \n  geom_point(aes(color = bmicat)) + \n  labs(title = \"MAACS Cohort\") + \n  labs(x = expression(\"log \" * PM[2.5]), \n       y = \"Nocturnal Symptoms\")\n\n\n\n\nModifying plot labels"
  },
  {
    "objectID": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#a-quick-aside-about-axis-limits",
    "href": "posts/2022-09-15-ggplot2-plotting-system-part-2/index.html#a-quick-aside-about-axis-limits",
    "title": "The ggplot2 plotting system: ggplot()",
    "section": "A quick aside about axis limits",
    "text": "A quick aside about axis limits\nOne quick quirk about ggplot2 that caught me up when I first started using the package can be displayed in the following example.\nIf you make a lot of time series plots, you often want to restrict the range of the y-axis while still plotting all the data.\nIn the base graphics system you can do that as follows.\n\ntestdat <- data.frame(x = 1:100, \n                      y = rnorm(100))\ntestdat[50,2] <- 100  ## Outlier!\nplot(testdat$x, \n     testdat$y,\n     type = \"l\", \n     ylim = c(-3,3))\n\n\n\n\nTime series plot with base graphics\n\n\n\n\nHere, we have restricted the y-axis range to be between -3 and 3, even though there is a clear outlier in the data.\n\n\n\n\n\n\nExample\n\n\n\nWith ggplot2 the default settings will give you this.\n\ng <- ggplot(testdat, aes(x = x, y = y))\ng + geom_line()\n\n\n\n\nTime series plot with default settings\n\n\n\n\nOne might think that modifying the ylim() attribute would give you the same thing as the base plot, but it doesn’t (?????)\n\ng + \n  geom_line() + \n  ylim(-3, 3)\n\n\n\n\nTime series plot with modified ylim\n\n\n\n\n\n\nEffectively, what this does is subset the data so that only observations between -3 and 3 are included, then plot the data.\nTo plot the data without subsetting it first and still get the restricted range, you have to do the following.\n\ng + \n  geom_line() + \n  coord_cartesian(ylim = c(-3, 3))\n\n\n\n\nTime series plot with restricted y-axis range\n\n\n\n\nAnd now you know!"
  },
  {
    "objectID": "posts/2022-09-01-reproducible-research/index.html",
    "href": "posts/2022-09-01-reproducible-research/index.html",
    "title": "Reproducible Research",
    "section": "",
    "text": "[Link to Claerbout and Karrenbach (1992) article]\n\nPre-lecture materials\n\nRead ahead\n\n\n\n\n\n\nRead ahead\n\n\n\nBefore class, you can prepare by reading the following materials:\n\nStatistical programming, Small mistakes, big impacts by Simon Schwab and Leonhard Held\nReproducible Research: A Retrospective by Roger Peng and Stephanie Hicks\n\n\n\n\n\nAcknowledgements\nMaterial for this lecture was borrowed and adopted from\n\nhttps://ropensci.github.io/reproducibility-guide/sections/introduction\nhttps://rdpeng.github.io/Biostat776\nReproducible Research: A Retrospective by Roger Peng and Stephanie Hicks\n\n\n\n\nLearning objectives\n\n\n\n\n\n\nLearning objectives\n\n\n\nAt the end of this lesson you will:\n\nKnow the difference between replication and reproducibility\nIdentify valid reasons why replication and/or reproducibility is not always possible\nIdentify the type of reproducibility\nIdentify key components to enable reproducible data analyses\n\n\n\n\n\nIntroduction\nThis lecture will be about reproducible reporting, and I want to take the opportunity to cover some basic concepts and ideas that are related to reproducible reporting, just in case you have not heard about it or don not know what it is.\nBefore we get to reproducibility, we need to cover a little background with respect to how science works (even if you are not a scientist, this is important).\nThe ultimate standard in strengthening scientific evidence is replication. Assume you claim that X causes Y, or that Vitamin C improves disease. The goal of replication is to have independent people to do independent things with different data, different methods, and different laboratories and see if they get the same result.\nThere is a sense that if a relationship in nature is truly there, then it should be robust to having different people discover it in different ways. Replication is particularly important in areas where findings can have big policy impacts or can influence regulatory types of decisions.\n\nWhat is wrong with replication?\nThere is really nothing wrong with it. This is what science has been doing for a long time, through hundreds of years. And there is nothing wrong with it today.\nBut the problem is that it is becoming more and more challenging to do replication or to replicate other studies.\nHere are some reasons:\n\nOften times studies are much larger and more costly than previously. If you want to do ten versions of the same study, you need ten times as much money and there is not as much money around as there used to be.\nSometimes it is difficult to replicate a study because if the original study took 20 years to complete, it is difficult to wait around another 20 years for replication.\nSome studies are just plain unique, such as studying the impact of a massive earthquake in a very specific location and time. If you are looking at a unique situation in time or a unique population, you cannot readily replicate that situation.\n\nThere are a lot of good reasons why you cannot replicate a study. If you cannot replicate a study, is the alternative just to do nothing (?? 😱), just let that study stand by itself?\nThe idea behind a reproducible reporting is to create a kind of minimum standard (or a middle ground) where we will not be replicating a study, but maybe we can do something in between. What can we do that’s in between the gold standard and doing nothing?\nThat is where reproducibility comes in. That’s how we can kind of bridge the gap between replication and nothing.\nIn non-research settings, often full replication is not even the point. Often the goal is to preserve something to the point where anybody in an organization can repeat what you did (for example, after you leave the organization).\n\nIn this case, reproducibility is key to maintaining the history of a project and making sure that every step along the way is clear.\n\n\n\n\n\n\n\nSummary\n\n\n\n\nReplication, whereby scientific questions are examined and verified independently by different scientists, is the gold standard for scientific validity.\nReplication can be difficult and often there are no resources to independently replicate a study.\nReproducibility, whereby data and code are re-analyzed by independent scientists to obtain the same results of the original investigator, is a reasonable minimum standard when replication is not possible.\n\n\n\n\n\n\nReproducibility to the Rescue\nLet’s first define reproducibility. The basic idea is that you need to make the data available for the original study and the computational methods available so that other people can look at your data and run the kind of analysis that you have run, and come to the same findings that you found.\nWhat reproducible reporting is about is a validation of the data analysis (not the original question itself). Because you are not collecting independent data using independent methods, it is a little bit more difficult to validate the scientific question itself. But if you can take someone’s data and reproduce their findings, then you can, in some sense, validate the data analysis.\nIn this way, you can at least have confidence that you can reproduce the analysis.\nRecently, there has been a lot of discussion of reproducibility in the media and in the scientific literature. The journal Science had a special issue on reproducibility and data replication.\n\nhttps://www.science.org/toc/science/334/6060\n\nOther journals have specific policies to promote reproducibility in manuscripts that are published in their journals. For example, the Journal of American Statistical Association (JASA) requires authors to submit their code and data to reproduce their analyses and a set of Associate Editors of Reproducibility review those materials as part of the review process:\n\nhttps://jasa-acs.github.io/repro-guide\n\n\nWhy does this matter?\nHere is an example. In 2012, a feature on the TV show 60 minutes looked at a major incident at Duke University where many results involving a promising cancer test were found to be not reproducible. This led to a number of studies and clinical trials having to be stopped, followed by an investigation which is still ongoing.\n\n\n\n\n[Source on YouTube]\n\n\nTypes of reproducibility\nWhat are the different kinds of reproducible research? Enabling reproducibility can be complicated, but by separating out some of the levels and degrees of reproducibility the problem can become more manageable because we can focus our efforts on what best suits our specific scientific domain. Victoria Stodden (2014), a prominent scholar on this topic, has identified some useful distinctions in reproducible research:\n\nComputational reproducibility: when detailed information is provided about code, software, hardware and implementation details.\nEmpirical reproducibility: when detailed information is provided about non-computational empirical scientific experiments and observations. In practice this is enabled by making data freely available, as well as details of how the data was collected.\nStatistical reproducibility: when detailed information is provided about the choice of statistical tests, model parameters, threshold values, etc. This mostly relates to pre-registration of study design to prevent p-value hacking and other manipulations.\n\n[Source]\n\n\nElements of computational reproducibility\nWhat do we need for computational reproducibility? There are a variety of ways to talk about this, but one basic definition that we hae come up with is that there are four things that are required to make results reproducible:\n\nAnalytic data. The data that were used for the analysis that was presented should be available for others to access. This is different from the raw data because very often in a data analysis the raw data are not all used for the analysis, but rather some subset is used. It may be interesting to see the raw data but impractical to actually have it. Analytic data is key to examining the data analysis.\nAnalytic code. The analytic code is the code that was applied to the analytic data to produce the key results. This may be preprocessing code, regression modeling code, or really any other code used to produce the results from the analytic data.\nDocumentation. Documentation of that code and the data is very important.\nDistribution. Finally, there needs to be some standard means of distribution, so all this data in the code is easily accessible.\n\n\n\n\n\n\n\nSummary\n\n\n\n\nReproducible reporting is about is a validation of the data analysis\nThere are multiple types of reproducibility\nThere are four elements to computational reproducibility\n\n\n\n\n\n\n“X” to “Computational X”\nWhat is driving this need for a “reproducibility middle ground” between replication and doing nothing?\nFor starters, there are a lot of new technologies on the scene and in many different fields of study including, biology, chemistry and environmental science. These technologies allow us to collect data at a much higher throughput so we end up with these very complex and very high dimensional data sets.\nThese datasets can be collected almost instantaneously compared to even just ten years ago—the technology has allowed us to create huge data sets at essentially the touch of a button. Furthermore, we the computing power to take existing (already huge) databases and merge them into even bigger and bigger databases. Finally, the massive increase in computing power has allowed us to implement more sophisticated and complex analysis routines.\nThe analyses themselves, the models that we fit and the algorithms that we run, are much much more complicated than they used to be. Having a basic understanding of these algorithms is difficult, even for a sophisticated person, and it is almost impossible to describe these algorithms with words alone.\nUnderstanding what someone did in a data analysis now requires looking at code and scrutinizing the computer programs that people used.\nThe bottom line with all these different trends is that for every field “X”, there is now “Computational X”. There’s computational biology, computational astronomy—whatever it is you want, there is a computational version of it.\n\nExample: machine learning in the life sciences\nOne example of an area where reproducibility is important comes from research that I have conducted in the area of machine learning in the life sciences.\nIn the above article, computational reproducibility is not throught of as a binary property, but rather it is on a sliding scale that reflects the time needed to reproduce. Published works fall somewhere on this scale, which is bookended by ‘forever’, for a completely irreproducible work, and ‘zero’, for a work where one can automatically repeat the entire analysis with a single keystroke.\nAs in many cases it is difficult to impose a single standard that divides work into ‘reproducible’ and ‘irreproducible’. Therefore, instead a menu is proposed of three standards with varying degrees of rigor for computational reproducibility:\n\nBronze standard. The authors make the data, models and code used in the analysis publicly available. The bronze standard is the minimal standard for reproducibility. Without data, models and code, it is not possible to reproduce a work.\nSilver standard. In addition to meeting the bronze standard: (1) the dependencies of the analysis can be downloaded and installed in a single command; (2) key details for reproducing the work are documented, including the order in which to run the analysis scripts, the operating system used and system resource requirements; and (3) all random components in the analysis are set to be deterministic. The silver standard is a midway point between minimal availability and full automation. Works that meet this standard will take much less time to reproduce than ones only meeting the bronze standard.\nGold standard. The work meets the silver standard, and the authors make the analysis reproducible with a single command. The gold standard for reproducibility is full automation. When a work meets this standard, it will take little to no effort for a scientist to reproduce it.\n\n\n\n\nThe Data Science Pipeline\nThe basic issue is when you read a description of a data analysis, such as in an article or a technical report, for the most part, what you get is the report and nothing else.\nOf course, everyone knows that behind the scenes there’s a lot that went into this article and that is what I call the data science pipeline.\n\n\n\nThe Data Science Pipeline\n\n\nIn this pipeline, there are two “actors”: the author of the report/article and the reader.\n\nOn the left side, the author is going from left to right along this pipeline.\nOn the right side, the reader is going from right to left.\n\nIf you are the reader, you read the article, and you may want to know more about what happened e.g.\n\nWhere are the data?\nWhat methods were used here?\n\nThe basic idea behind computational reproducibility is to focus on the elements in the blue box: the analytic data and the computational results. With computational reproducibility the goal is to allow the author of a report and the reader of that report to “meet in the middle”.\n\nAuthors and Readers\nIt is important to realize that there are multiple players when you talk about reproducibility–there are different types of parties that have different types of interests. There are authors who produce research and they want to make their research reproducible. There are also readers of research and they want to reproduce that work. Everyone needs tools to make their lives easier.\nOne current challenge is that authors of research have to undergo considerable effort to make their results available to a wide audience.\n\nPublishing data and code today is not necessarily a trivial task. Although there are a number of resources available now, that were not available even five years ago, it is still a bit of a challenge to get things out on the web (or at least distributed widely).\nResources like GitHub, kipoi, and RPubs and various data repositories have made a big difference, but there is still a ways to go with respect to building up the public reproducibility infrastructure.\n\nFurthermore, even when data and code are available, readers often have to download the data, download the code, and then they have to piece everything together, usually by hand. It’s not always an easy task to put the data and code together.\n\nReaders may not have the same computational resources that the original authors did.\nIf the original authors used an enormous computing cluster, for example, to do their analysis, the readers may not have that same enormous computing cluster at their disposal. It may be difficult for readers to reproduce the same results.\n\nGenerally, the toolbox for doing reproducible research is small, although it’s definitely growing.\n\nIn practice, authors often just throw things up on the web. There are journals and supplementary materials, but they are famously disorganized.\nThere are only a few central databases that authors can take advantage of to post their data and make it available. So if you are working in a field that has a central database that everyone uses, that is great. If you are not, then you have to assemble your own resources.\n\n\n\n\n\n\n\nSummary\n\n\n\n\nThe process of conducting and disseminating research can be depicted as a “data science pipeline”\nReaders and consumers of data science research are typically not privy to the details of the data science pipeline\nOne view of reproducibility is that it gives research consumers partial access to the raw pipeline elements.\n\n\n\n\n\n\nPost-lecture materials\n\nFinal Questions\nHere are some post-lecture questions to help you think about the material discussed.\n\n\n\n\n\n\nQuestions\n\n\n\n\nWhat is the difference between replication and reproducible?\nWhy can replication be difficult to achieve? Why is reproducibility a reasonable minimum standard when replication is not possible?\nWhat is needed to reproduce the results of a data analysis?"
  },
  {
    "objectID": "posts/2022-08-30-introduction-to-r-and-rstudio/index.html",
    "href": "posts/2022-08-30-introduction-to-r-and-rstudio/index.html",
    "title": "Introduction to R and RStudio!",
    "section": "",
    "text": "There are only two kinds of languages: the ones people complain about and the ones nobody uses. —Bjarne Stroustrup"
  },
  {
    "objectID": "posts/2022-08-30-introduction-to-r-and-rstudio/index.html#rtistry",
    "href": "posts/2022-08-30-introduction-to-r-and-rstudio/index.html#rtistry",
    "title": "Introduction to R and RStudio!",
    "section": "rtistry",
    "text": "rtistry\n\n\n\n\n\n[‘Water Colours’ from Danielle Navarro https://art.djnavarro.net]"
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "module 5\n\n\nweek 7\n\n\ntidyverse\n\n\ntidytext\n\n\nsentiment analysis\n\n\n\n\nIntroduction to tidytext and sentiment analysis\n\n\n\n\n\n\nOct 13, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 5\n\n\nweek 7\n\n\ntidyverse\n\n\nfactors\n\n\ncategorial variables\n\n\n\n\nUsing factors to work with categorial variables\n\n\n\n\n\n\nOct 11, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 5\n\n\nweek 6\n\n\ntidyverse\n\n\nR\n\n\nprogramming\n\n\nstrings and regex\n\n\n\n\nIntroduction to working with character strings and regular expressions in R\n\n\n\n\n\n\nOct 6, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 5\n\n\nweek 6\n\n\ntidyverse\n\n\nR\n\n\nprogramming\n\n\ndates and times\n\n\n\n\nIntroduction to lubridate for dates and times in R\n\n\n\n\n\n\nOct 4, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 4\n\n\nweek 5\n\n\nprogramming\n\n\ndebugging\n\n\n\n\nImplement exception handling routines in R functions\n\n\n\n\n\n\nSep 29, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 4\n\n\nweek 5\n\n\nprogramming\n\n\ndebugging\n\n\n\n\nHelp! What’s wrong with my code???\n\n\n\n\n\n\nSep 29, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 4\n\n\nweek 5\n\n\nR\n\n\nprogramming\n\n\nfunctions\n\n\n\n\nIntroduction to vectorization and loop functionals\n\n\n\n\n\n\nSep 27, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 4\n\n\nweek 4\n\n\nR\n\n\nprogramming\n\n\n\n\nIntroduction to control the flow of execution of a series of R expressions\n\n\n\n\n\n\nSep 22, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 4\n\n\nweek 4\n\n\nR\n\n\nprogramming\n\n\nfunctions\n\n\n\n\nIntroduction to writing functions in R\n\n\n\n\n\n\nSep 22, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 4\n\n\nweek 4\n\n\nR\n\n\nprogramming\n\n\n\n\nIntroduction to data types and objects in R\n\n\n\n\n\n\nSep 20, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 3\n\n\nweek 3\n\n\nR\n\n\nprogramming\n\n\nggplot2\n\n\ndata viz\n\n\n\n\nAn overview of the ggplot2 plotting system in R with ggplot()\n\n\n\n\n\n\nSep 15, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 3\n\n\nweek 3\n\n\nR\n\n\nprogramming\n\n\nggplot2\n\n\ndata viz\n\n\n\n\nOverview of three plotting systems in R\n\n\n\n\n\n\nSep 13, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 3\n\n\nweek 3\n\n\nR\n\n\nprogramming\n\n\nggplot2\n\n\ndata viz\n\n\n\n\nAn overview of the ggplot2 plotting system in R with qplot()\n\n\n\n\n\n\nSep 13, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 2\n\n\nweek 2\n\n\nR\n\n\nprogramming\n\n\ndplyr\n\n\nhere\n\n\ntidyverse\n\n\n\n\nIntroduction to relational data and join functions in the dplyr R package\n\n\n\n\n\n\nSep 8, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 2\n\n\nweek 2\n\n\nR\n\n\nprogramming\n\n\ntidyr\n\n\nhere\n\n\ntidyverse\n\n\n\n\nIntroduction to tidy data and how to convert between wide and long data with the tidyr R package\n\n\n\n\n\n\nSep 8, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 2\n\n\nweek 2\n\n\nR\n\n\nprogramming\n\n\nreadr\n\n\nhere\n\n\ntidyverse\n\n\n\n\nHow to get data in and out of R using relative paths\n\n\n\n\n\n\nSep 6, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 2\n\n\nweek 2\n\n\nR\n\n\nprogramming\n\n\ndplyr\n\n\nhere\n\n\ntibble\n\n\ntidyverse\n\n\n\n\nAn introduction to data frames in R and the managing them with the dplyr R package\n\n\n\n\n\n\nSep 6, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nR Markdown\n\n\nprogramming\n\n\n\n\nHow to use citations and incorporate references from a bibliography in R Markdown.\n\n\n\n\n\n\nSep 1, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nR Markdown\n\n\nprogramming\n\n\n\n\nIntroduction to literate statistical programming tools including R Markdown\n\n\n\n\n\n\nSep 1, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nR\n\n\nreproducibility\n\n\n\n\nIntroduction to reproducible research covering some basic concepts and ideas that are related to reproducible reporting\n\n\n\n\n\n\nSep 1, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nprogramming\n\n\nversion control\n\n\ngit\n\n\nGitHub\n\n\n\n\nVersion control is a game changer; or how I learned to love git/GitHub\n\n\n\n\n\n\nAug 30, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\ncourse-admin\n\n\nmodule 1\n\n\nweek 1\n\n\n\n\nOverview course information for BSPH Biostatistics 140.776 in Fall 2022\n\n\n\n\n\n\nAug 30, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nR\n\n\nprogramming\n\n\nRStudio\n\n\n\n\nLet’s dig into the R programming language and the RStudio integrated developer environment\n\n\n\n\n\n\nAug 30, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "project 3\n\n\nprojects\n\n\n\n\nExploring album sales and sentiment of lyrics from Beyoncé and Taylor Swift\n\n\n\n\n\n\nOct 4, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nproject 2\n\n\nprojects\n\n\n\n\nExploring temperature and rainfall in Australia\n\n\n\n\n\n\nSep 15, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nproject 1\n\n\nprojects\n\n\n\n\nFinding great chocolate bars!\n\n\n\n\n\n\nSep 6, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nproject 0\n\n\nprojects\n\n\n\n\nInformation for Project 0 (entirely optional, but hopefully useful and fun!)\n\n\n\n\n\n\nAug 30, 2022\n\n\nStephanie Hicks\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "Big Book of R: https://www.bigbookofr.com\nList of resources to learn R (but also Python, SQL, Javascript): https://github.com/delabj/datacamp_alternatives/blob/master/index.md\nlearnr4free. Resources (books, videos, interactive websites, papers) to learn R. Some of the resources are beginner-friendly and start with the installation process: https://www.learnr4free.com/en\nData Science with R by Danielle Navarro: https://robust-tools.djnavarro.net"
  }
]